@import "../base/colors";
@import "../base/vars";
@import "../base/breakpoints";
@import "../base/mixins";

// Please "whatever creature rules in HIS place" forgive us from this MADNESS of nesting, important declerations etc. as there are nothing we can do about it!

// Because deep nesting and very specific selectors used in ReadSpeaker styling we need to use same level of specificity to override styles succesfully even if it's pure maddness.
// This is prone for duplication unfortunately.

// Master wrapping element gets classNames based on the situation within the player.
// When playing is paused master wrapper gets className calles "rspause".
// When playing started the master wrapper gets className "rsexpanded".

/* stylelint-disable */

// ReadSpeaker player
.rsbtn.muikku,
.rsbtn.muikku.mega_toggle {
  align-items: center;
  background-color: $color-default;
  border: 1px solid $color-default-separator-border;
  border-radius: 15px 15px 15px 15px;
  display: flex;
  justify-content: flex-start;
  margin: 0;

  .toolsopen {
    .rsbtn_play {
      border-radius: 15px;
    }
  }

  // Button's child span definition
  .rsicn {
    align-items: center;
    cursor: pointer;
    display: flex;
    font-size: 1rem;
    height: 1.5rem;
    justify-content: center;
    padding: 0;
    width: 2rem;
  }

  .rsbtn_exp {
    .rsbtn_exp_inner {

      // Volume dropdown
      .rsbtn_volume_container.rsbtn_dropdown {
        background: $color-default;
        border-radius: 5px;
        border: 0;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
        margin: 4px 0 0;

        &::before {
          border: solid transparent;
          border-top-width: medium;
          border-right-width: medium;
          border-bottom-color: transparent;
          border-bottom-width: medium;
          border-left-width: medium;
          border-bottom-color: $color-default;
          border-width: 4px;
          bottom: 100%;
          content: " ";
          display: block;
          height: 0;
          pointer-events: none;
          position: absolute;
          right: 15px;
          top: -7px;
          width: 0;
          z-index: 99;
        }
      }
    }

  }

    // When player is expanded a.k.a content is playing
  &.rsexpanded {

      // Expanded players wrapper
    .rsbtn_exp {
      align-items: center;
      background-color: $color-default;
      height: auto;
      line-height: 1;
      margin: 0;
      order: 2;
      padding: 0;
      width: auto;

      // Loading and playing progressbars
      .rs-player-loadindicator {
        background-color: $color-default-separator-border;
        left: -33px !important;
        right: -33px !important;
        top: -10px !important;

        .rsbtn-loading{
          background-color: $color-notice;
        }

        .rsbtn-progress {
          background-color: $color-success;
        }
      }

      // Some unnecessary container that just is there but needs overrides
      .rsbtn_exp_inner {
        background-color: $color-default;
        border: 0;
        border-radius: 15px;
        display: flex;
        flex-basis: auto;
        flex-flow: row nowrap;
        flex-grow: 0;
        flex-shrink: 0;
        height: auto;
        width: auto;

        // Generic player button item inside expanded player container
        button.rsbtn_player_item {
          align-items: center;
          background-color: $color-default;
          border: 0;
          border-radius: 15px;
          display: flex;
          flex-basis: auto;
          flex-grow: 0;
          flex-shrink: 0;
          float: none;
          height: auto;
          line-height: 1;
          margin: 0;
          order: 3;
          padding: 0;
          position: relative;
          width: auto;
        }

        // Setting the baseline styles and overrides for every button inside expanded player
        button[class^="rsbtn_"] {
          &:hover {
            background-color: $color-readspeaker-selected;
          }

          *[class^="rsicn"] {
            line-height:1;

            &:hover,
            &:active,
            &:focus {
              &::before {
                font-size: 1rem;
              }
            }

            &::before {
              color: $color-default;
              font-size: 1rem;
            }
          }
        }

        // Pause onHover effect
        button.rsbtn_pause {
          .rsicn-pause {
            &:hover,
            &:active,
            &:focus {
              &::before {
                color: $color-default;
              }
            }

            &::before {
              color: $color-default-helper;
            }
          }
        }

        // Stop onHover effect
        button.rsbtn_stop {
          .rsicn-stop {
            &:hover,
            &:active,
            &:focus {
              &::before {
                color: $color-default;
              }
            }

            &::before {
              color: $color-default-helper;
            }
          }
        }

        // Adjust volume onHover effect
        button.rsbtn_volume {
          .rsicn-volume {
            &:hover,
            &:active,
            &:focus {
              &::before {
                color: $color-default;
              }
            }

            &::before {
              color: $color-default-helper;
            }
          }
        }

        // Close onHover effect
        button.rsbtn_closer {
          .rsicn-cross {
            &:hover,
            &:active,
            &:focus {
              &::before {
                color: $color-default;
                content: "\e90b";
              }
            }

            &::before {
              color: $color-default-helper,
            }
          }

          // Override the ReadSpeaker's icon change with onHover event
          &:hover,
          &:active,
          &:focus {
            .rsicn-cross {
              &::before {
                color: $color-default;
                content: "\e90b";
              }
            }
          }
        }
      }
    }
  }

  // When player is paused
  &.rspaused {

    .rsbtn_exp {
      .rsbtn_exp_inner {

        // Resume onHover effect
        button.rsbtn_pause {

          .rsicn-pause {
            &:hover,
            &:active,
            &:focus {

              &::before {
                color: $color-default;
              }
            }

            &::before {
              color: $color-default-helper;
            }
          }
        }
      }
    }
  }

  // Prevent float rules as they are canzur generally fucks everything up
  * {
    float: none !important;
  }

  // Set typography baselines for every <a> and <span> elements used in ReadSpeaker
  a,
  span {
    font-family: $system-font-family;
    font-size: $text-mobile-font-size;
    font-weight: 400;
  }

  // Toggle button that triggers settings popper
  button.rsbtn_tooltoggle {
    align-items: center;
    background-color: $color-default;
    border: 0;
    border-radius: 15px;
    display: flex;
    flex-basis: auto;
    flex-grow: 0;
    flex-shrink: 0;
    float: none;
    height: auto;
    line-height: 1;
    margin: 0;
    order: 3;
    padding: 0;
    position: relative;
    width: auto;

    &:hover,
    &:active,
    &:focus {
      background-color: $color-readspeaker-selected;
      border: 0;

      .rsicn.rsicn-arrow-down::before {
        color: $color-default;
      }
    }

    .rsicn-arrow-down {

      &::before {
        color: $color-default-helper;
        font-size: 1rem;
      }
    }
  }

  // Dropdown popover
  .rsbtn_toolpanel.vertical {
    margin-top: 4px;
    position: absolute;
    right: -10px;

    &::before {
      border: solid transparent;
      border-top-width: medium;
      border-right-width: medium;
      border-bottom-color: transparent;
      border-bottom-width: medium;
      border-left-width: medium;
      border-bottom-color: $color-default;
      border-width: 4px;
      bottom: 100%;
      content: " ";
      display: block;
      height: 0;
      pointer-events: none;
      position: absolute;
      right: 23px;
      top: -7px;
      width: 0;
      z-index: 99;
    }

    .rsbtn_tools {
      border-radius: 5px;
      border: 0;
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);

      .rsbtn_tools_inner {

        .rsbtn_toolcontainer {
          min-width: 150px;

          ul.rsbtn_toollist {
            background-color: $color-default;
            border-radius: 5px;
            padding: 5px;

            li[class^="rsbtn_tool"] {
              background-color: $color-default;
              border: 0;
              height: auto;
              max-height: none;
              min-height: auto;

              button.rsbtn_tool {
                align-items: center;
                display: flex;
                justify-content: flex-start;
                padding: 5px;

                span[class^="rsicn"] {
                  font-size: 1rem;
                  height: auto;
                  line-height:1;
                }

                span.rsbtn_btnlabel {
                  font-size: 0.875rem;
                  font-weight: 400;
                }

                &:hover,
                &:active,
                &:focus {
                  background-color: rgba(0, 0, 0, 0.05);
                }
              }

              &:last-child {
                border: 0;
              }
            }
          }
        }

        .rsbtn_powered {
          display: none;
        }
      }
    }
  }

  // anchor element that wraps the play button thingy
  a.rsbtn_play {
    align-items: center;
    background-color: $color-default;
    border: 0;
    border-radius: 15px;
    cursor: pointer;
    display: flex;
    flex-basis: auto;
    flex-grow: 0;
    flex-shrink: 0;
    float: none;
    height: auto;
    line-height: 1;
    margin: 0;
    order: 1;
    padding: 0;
    width: auto;

    &:hover {
      background-color: $color-readspeaker-selected;

      .rsbtn_right.rsplay::before {
        color: $color-default;
      }
    }

    // Actual container for the play button
    .rsbtn_right.rsplay {
      align-items: center;
      border: 0;
      display: flex;
      height: 1.5rem;
      justify-content: center;
      line-height: 1;
      margin: 0;
      padding: 0;
      width: 2rem;

      &::before {
        color: $color-default-helper;
        content: "\ea27";
        font-family: "muikku" !important;
        font-size: 1rem;
        font-variant: normal;
      }
    }

    // We ASSUME this element we hide here contains the Readspeaker text and 2 loud speaker icons which we dont want to see
    .rsbtn_left {
      display: none;
    }
  }
}

// Readspeaker controlpanel
#rs-controlpanel.unselectable {
  background: $color-readspeaker-selected;
  border: 1px solid $color-readspeaker-selected;
  border-radius: 20px;
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
  color: $color-default;

  .rsicn.rsicn-logo {
    display: none;
  }

  button.rs-controlpanel-btn {
    border: 0;
    border-radius: 15px 15px 15px 15px;
    color: $color-default;

    &:hover,
    &:active,
    &:focus {
      background-color: $color-default;
      color: $color-readspeaker-selected;
    }
  }

  .rs-controlpanel-scroll-toggler {
    background: $color-default;
    border: 0;
    border-radius: 15px 15px 15px 15px;

    .rs-controlpanel-scroll-label {
      color: $color-default-contrast;
      font-size: 0.75rem;
    }

    .rs-controlpanel-scroll-state {
      font-size: 0.75rem;
    }
  }
}
/* stylelint-enable */
