# Please use following rules when editing this file:
# - id parameters and other similiar named properties always are type number and format int64
# - identifiers and other similiar named properties are always type string
# - use as precice format for properties as possible (e.g. use date-time instead of string) because it helps generate better client code
# - create schemas for all request and use references to them in paths
openapi: 3.0.3
info:
  version: 1.0.0
  title: mApi API-spec
security:
  - bearerAuth: []
servers:
  - url: /
paths:
  #/rest/example/examples/:
  #get:
  #  operationId: getExamples
  #  summary: Get examples
  #  description: Get examples
  #  tags:
  #    - YourTag
  #  responses:
  #    "200":
  #      description: ""
  #      content:
  #        application/json:
  #          schema:
  #            type: array
  #            items:
  #              $ref: "#/components/schemas/Example"
  #    "400":
  #      description: Invalid request was sent to the server
  #    "403":
  #      description: Attempted to make a call with unauthorized client
  #    "500":
  #      description: Internal server error

  #post:
  #  operationId:
  #  summary:
  #  description:
  #  tags:
  #    - YourTag
  #  responses:
  #    "200":
  #      description: ""
  #    "400":
  #      description: Invalid request was sent to the server
  #    "403":
  #      description: Attempted to make a call with unauthorized client
  #    "500":
  #      description: Internal server error

  #put:
  #  operationId:
  #  summary:
  #  description:
  #  tags:
  #    - YourTag
  #  responses:
  #    "200":
  #      description: ""
  #    "400":
  #      description: Invalid request was sent to the server
  #    "403":
  #      description: Attempted to make a call with unauthorized client
  #    "500":
  #      description: Internal server error

  #delete:
  #  operationId:
  #  summary:
  #  description:
  #  tags:
  #    - YourTag
  #  responses:
  #    "200":
  #      description: ""
  #    "400":
  #      description: Invalid request was sent to the server
  #    "403":
  #      description: Attempted to make a call with unauthorized client
  #    "500":
  #      description: Internal server error

  #ACTIVITYLOGS
  /rest/activitylogs/user/{userIdentifier}:
    get:
      operationId: getUserActivityLogs
      summary: Get activity logs
      tags:
        - Activitylogs
      parameters:
        - name: userIdentifier
          in: path
          description: Identifier of the user
          required: true
          schema:
            type: string
        - name: from
          in: query
          description: From
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: To
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: Activity logs successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityLogHash"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "404":
          description: Activity logs not found
        "500":
          description: Internal server error

  /rest/activitylogs/user/{userIdentifier}/workspace:
    get:
      operationId: getWorkspaceActivityLogs
      summary: Get activity logs
      tags:
        - Activitylogs
      parameters:
        - name: userIdentifier
          in: path
          description: Identifier of the user
          required: true
          schema:
            type: string
        - name: workspaceEntityId
          in: query
          description: Workspace entity id
          schema:
            type: integer
            format: int64
        - name: from
          in: query
          description: From
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: To
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ActivityLogEntry"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "404":
          description: Activity logs not found
        "500":
          description: Internal server error

  #ANNNOUNCER
  /rest/announcer/announcements:
    get:
      operationId: getAnnouncements
      summary: Get announcements with defined parameters
      description: Get announcements with defined parameters. Depending on the parameters, the result can be filtered by workspace, archived, editable, time frame, etc.
      tags:
        - Announcer
      parameters:
        - name: hideEnvironmentAnnouncements
          in: query
          description: Hide environment announcements
          schema:
            type: boolean
            default: false
        - name: hideWorkspaceAnnouncements
          in: query
          description: Hide workspace announcements
          schema:
            type: boolean
            default: false
        - name: hideGroupAnnouncements
          in: query
          description: Hide group announcements
          schema:
            type: boolean
            default: false
        - name: workspaceEntityId
          in: query
          description: Workspace entity id
          schema:
            type: integer
            format: int64
        - name: onlyMine
          in: query
          description: Only mine
          schema:
            type: boolean
            default: false
        - name: onlyEditable
          in: query
          description: Only editable
          schema:
            type: boolean
            default: false
        - name: onlyArchived
          in: query
          description: Only archived
          schema:
            type: boolean
            default: false
        - name: timeFrame
          in: query
          description: Announcement time frame
          schema:
            type: string
            enum:
              - ALL
              - CURRENT
              - EXPIRED
              - UPCOMING
              - CURRENTANDEXPIRED
              - CURRENTANDUPCOMING
            default: CURRENT
      responses:
        "200":
          description: Fetch announcements successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Announcement"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

    post:
      operationId: createAnnouncement
      summary: Create announcement with defined request body
      tags:
        - Announcer
      requestBody:
        $ref: "#/components/requestBodies/AnnouncementCreateRequestBody"
      responses:
        "200":
          description: Announcement created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Announcement"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  /rest/announcer/announcements/{announcementId}:
    get:
      operationId: getAnnouncement
      summary: Get announcement by id
      tags:
        - Announcer
      parameters:
        - name: announcementId
          in: path
          description: Announcement id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Announcement"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

    put:
      operationId: updateAnnouncement
      summary: Update announcement by id and with defined request body
      tags:
        - Announcer
      parameters:
        - name: announcementId
          in: path
          description: Announcement id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/AnnouncementUpdateRequestBody"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Announcement"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

    delete:
      operationId: deleteAnnouncement
      summary: Delete announcement by id
      tags:
        - Announcer
      parameters:
        - name: announcementId
          in: path
          description: Announcement id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "Announcement deleted successfully"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  #ASSESSMENTREQUEST
  /rest/assessmentrequest/workspace/{workspaceEntityId}/paidAssessmentRequest:
    post:
      operationId: createPaidAssessmentRequest
      summary: Create paid assessment request
      description: Create paid assessment request
      tags:
        - AssessmentRequest
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/PaidAssessmentRequestCreateRequestBody"
      responses:
        "200":
          description: Paid assessment request created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    description: Url to which the user should be redirected to complete payment
                    type: string
                  id:
                    description: Paid assessment request id
                    type: integer
                    format: int64
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/assessmentrequest/workspace/{workspaceEntityId}/assessmentPrice:
    get:
      operationId: getWorkspaceAssessmentPrice
      summary: Get assessment price
      description: Get assessment price
      tags:
        - AssessmentRequest
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace assessment price successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  price:
                    description: Workspace assessment price
                    type: number
                    format: double
        "400":
          description: Invalid request was sent to the server
        "404":
          description: Workspace assessment price not found
        "500":
          description: Internal server error

  /rest/assessmentrequest/workspace/{workspaceEntityId}/assessmentRequests:
    get:
      operationId: getWorkspaceAssessmentRequests
      summary: Get assessment requests
      description: Get assessment requests
      tags:
        - AssessmentRequest
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
            format: int64
        - name: studentIdentifier
          in: query
          description: Student identifier
          schema:
            type: string
      responses:
        "200":
          description: "Assessment requests successfully retrieved"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AssessmentRequest"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

    post:
      operationId: createWorkspaceAssessmentRequest
      summary: Create assessment request
      description: Create assessment request
      tags:
        - AssessmentRequest
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/AssessmentRequestCreateRequestBody"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssessmentRequest"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  /rest/assessmentrequest/workspace/{workspaceEntityId}/assessmentRequests/{assessmentRequestId}:
    delete:
      operationId: deleteWorkspaceAssessmentRequest
      summary: Delete assessment request
      description: Delete assessment request
      tags:
        - AssessmentRequest
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
            format: int64
        - name: assessmentRequestId
          in: path
          description: Assessment request id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "Assessment request deleted successfully"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  #CHAT
  /rest/chat/room:
    post:
      operationId: createChatRoom
      summary: Create chat room. Doesn't return anything, look websocket for response with message "chat:room-created" with JSON content ChatRoom.
      tags:
        - Chat
      requestBody:
        $ref: "#/components/requestBodies/ChatRoomCreateRequestBody"
      responses:
        "204":
          description: Chat room created successfully
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  /rest/chat/room/{identifier}:
    put:
      operationId: updateChatRoom
      summary: Update chat room. Doesn't return anything, look websocket for response with message "chat:room-updated" with JSON content ChatRoom.
      tags:
        - Chat
      parameters:
        - name: identifier
          in: path
          description: Chat room id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ChatRoomUpdateRequestBody"
      responses:
        "204":
          description: Chat room updated successfully
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "404":
          description: Chat room not found

    delete:
      operationId: deleteChatRoom
      summary: Delete chat room. Doesn't return anything, look websocket for response with message "chat:room-deleted".
      tags:
        - Chat
      parameters:
        - name: identifier
          in: path
          description: Chat room id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Chat room deleted successfully
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  /rest/chat/rooms:
    get:
      operationId: getChatRooms
      summary: Get chat rooms.
      tags:
        - Chat
      responses:
        "200":
          description: Chat rooms successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatRoom"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  /rest/chat/message/{targetIdentifier}:
    post:
      operationId: createChatMessage
      summary: Create chat message. Doesn't return anything, look websocket for response with message "chat:message-sent" with JSON content ChatMessage.
      tags:
        - Chat
      parameters:
        - name: targetIdentifier
          in: path
          description: Target identifier (room-123 or user-123 depending use case)
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ChatMessageCreateRequestBody"
      responses:
        "204":
          description: Chat message created successfully
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Posting to target has been blocked

  /rest/chat/message/{messageId}:
    put:
      operationId: updateChatMessage
      summary: Update chat message. Doesn't return anything, look websocket for response with message "chat:message-edited" with JSON content ChatMessage.
      tags:
        - Chat
      parameters:
        - name: messageId
          in: path
          description: Chat message id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/ChatMessageUpdateRequestBody"
      responses:
        "204":
          description: Chat message updated successfully
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "404":
          description: Chat message not found

    delete:
      operationId: deleteChatMessage
      summary: Delete chat message. Doesn't return anything, look websocket for response with message "chat:message-deleted" with JSON content ChatMessage.
      tags:
        - Chat
      parameters:
        - name: messageId
          in: path
          description: Chat message id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Chat message deleted successfully
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "404":
          description: Chat message not found

  /rest/chat/messages/{targetIdentifier}:
    get:
      operationId: getChatMessagesByTarget
      summary: Get chat messages by target identifier (room-123 or user-123).
      tags:
        - Chat
      parameters:
        - name: targetIdentifier
          in: path
          description: Target identifier (room-123 or user-123 depending use case)
          required: true
          schema:
            type: string
        - name: count
          in: query
          description: Count of latest messages to retrieve. Default is 25.
          schema:
            type: integer
            default: 25
        - name: earlierThan
          in: query
          description: Earlier than
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: Chat private messages successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatMessage"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  /rest/chat/users:
    get:
      operationId: getChatUsers
      summary: Get chat users.
      tags:
        - Chat
      parameters:
        - name: onlyOnline
          in: query
          description: Should the list contain only users currently online. Default value is true.
          schema:
            type: boolean
            default: true
      responses:
        "200":
          description: Chat users successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatUser"
        "403":
          description: Calling user is not a chat user currently online

  /rest/chat/markAsRead/{identifier}:
    get:
      operationId: markAsRead
      summary: Marks private messages with the given user as read
      tags:
        - Chat
      parameters:
        - name: identifier
          in: path
          description: Target user identifier, e.g. user-123
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Private messages marked as read
        "400":
          description: Invalid identifier format

  /rest/chat/block/{identifier}:
    get:
      operationId: blockUser
      summary: Blocks the given user
      tags:
        - Chat
      parameters:
        - name: identifier
          in: path
          description: Target user identifier, e.g. user-123
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Operation successful

  /rest/chat/unblock/{identifier}:
    get:
      operationId: unblockUser
      summary: Unblocks the given user
      tags:
        - Chat
      parameters:
        - name: identifier
          in: path
          description: Target user identifier, e.g. user-123
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Operation successful

  /rest/chat/closeDiscussion/{identifier}:
    get:
      operationId: closeConversation
      summary: Closes a private discussion with the given user
      tags:
        - Chat
      parameters:
        - name: identifier
          in: path
          description: Target user identifier, e.g. user-123
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Operation successful

  /rest/chat/activity:
    get:
      operationId: getChatActivity
      summary: Returns a list of chat activity for the current user
      tags:
        - Chat
      responses:
        "200":
          description: Chat activity successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatActivity"

  /rest/chat/blocklist:
    get:
      operationId: getBlocklist
      summary: Returns the users blocked by the current user
      tags:
        - Chat
      responses:
        "200":
          description: Blocklist successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatUser"
        "403":
          description: Calling user is not a chat user currently online

  /rest/chat/privateDiscussions:
    get:
      operationId: getPrivateDiscussions
      summary: Returns a list of users the user has had private discussions with
      tags:
        - Chat
      responses:
        "200":
          description: Chat users successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatUser"
        "403":
          description: Calling user is not a chat user currently online

  /rest/chat/users/{chatUserId}:
    get:
      operationId: getChatUser
      summary: Get chat user.
      tags:
        - Chat
      parameters:
        - name: chatUserId
          in: path
          description: Chat user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Chat user successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatUser"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  /rest/chat/settings:
    get:
      operationId: getChatSettings
      summary: Get chat settings as a chat user object.
      tags:
        - Chat
      responses:
        "200":
          description: Chat settings successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatUser"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

    put:
      operationId: updateChatSettings
      summary: Update chat settings. Returns the updated chat user object.
      tags:
        - Chat
      requestBody:
        $ref: "#/components/requestBodies/ChatSettingsUpdateRequestBody"
      responses:
        "200":
          description: Chat settings updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatUser"
        "400":
          description: Nickname not given when chat is on
        "409":
          description: Nickname already exists

  /rest/chat/guidanceCounselors:
    get:
      operationId: getChatGuidanceCounselors
      summary: Get guidance counselors specifically for chat. Only returns guidance counselors that have enabled chat.
      tags:
        - Chat
      responses:
        "200":
          description: Guidance counselors successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GuidanceCounselorContact"
        "403":
          description: Calling user is not a chat user currently online
        "500":
          description: Internal server error

  #CEEPOS
  /rest/ceepos/manualCompletion/{orderId}:
    post:
      operationId: createCeeposManualCompletion
      summary: Create manual completion
      description: Create manual completion
      tags:
        - Ceepos
      parameters:
        - name: orderId
          in: path
          description: Order id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Manual completion created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CeeposOrder"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/ceepos/order:
    post:
      operationId: createCeeposOrder
      summary: Create order
      description: Create order
      tags:
        - Ceepos
      requestBody:
        $ref: "#/components/requestBodies/CeeposOrderCreateRequestBody"
      responses:
        "200":
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CeeposOrder"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/ceepos/order/{orderId}:
    delete:
      operationId: deleteCeeposOrder
      summary: Delete order
      description: Delete order
      tags:
        - Ceepos
      parameters:
        - name: orderId
          in: path
          description: Order id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: "Order deleted successfully"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/ceepos/pay/{orderId}:
    post:
      operationId: createCeeposPay
      summary: Create pay
      description: Create pay
      tags:
        - Ceepos
      parameters:
        - name: orderId
          in: path
          description: Order id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Order created successfully. Returns the url to which the user should be redirected to complete payment.
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/ceepos/order/{orderId}/returnLink:
    get:
      operationId: getCeeposReturnLink
      summary: Get return link
      description: Get return link
      tags:
        - Ceepos
      parameters:
        - name: orderId
          in: path
          description: Order id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Return link successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CeeposReturnLink"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/ceepos/products:
    get:
      operationId: getCeeposProducts
      summary: Get products
      description: Get products
      tags:
        - Ceepos
      parameters:
        - name: line
          in: query
          description: Line
          schema:
            type: string
      responses:
        "200":
          description: Ceepos products list successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CeeposPurchaseProduct"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/ceepos/user/{userIdentifier}/order/{orderId}:
    get:
      operationId: getCeeposUserOrder
      summary: Get user order
      description: Get user order
      tags:
        - Ceepos
      parameters:
        - name: userIdentifier
          in: path
          description: Identifier of the user
          required: true
          schema:
            type: string
        - name: orderId
          in: path
          description: Order id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Ceepos user order successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CeeposOrder"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "404":
          description: Ceepos user order not found
        "500":
          description: Internal server error

  /rest/ceepos/user/{userIdentifier}/orders:
    get:
      operationId: getCeeposUserOrders
      summary: Get user orders
      description: Get user orders
      tags:
        - Ceepos
      parameters:
        - name: userIdentifier
          in: path
          description: Identifier of the user
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Ceepos user orders successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CeeposOrder"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "404":
          description: Ceepos user orders not found
        "500":
          description: Internal server error

  #COMMUNICATOR
  /rest/communicator/communicatormessages/{messageId}:
    get:
      operationId: getCommunicatorMessage
      summary: Get communicator message
      description: Get communicator message
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/messages:
    post:
      operationId: createCommunicatorMessage
      summary: Create communicator message
      description: Create communicator message
      tags:
        - Communicator
      requestBody:
        $ref: "#/components/requestBodies/CommunicatorMessageCreateRequestBody"
      responses:
        "200":
          description: Communicator message created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/messages/{messageThreadId}:
    get:
      operationId: getCommunicatorMessageThread
      summary: Get communicator message thread
      description: Get communicator message thread
      tags:
        - Communicator
      parameters:
        - name: messageThreadId
          in: path
          description: Communicator message thread id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageThreadExpanded"
        "400":
          description: Invalid request was sent to the server
        "404":
          description: Communicator message thread not found
        "500":
          description: Internal server error

    post:
      operationId: createCommunicatorMessageToThread
      summary: Update communicator message
      description: Update communicator message
      tags:
        - Communicator
      parameters:
        - name: messageThreadId
          in: path
          description: Communicator message thread id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/CommunicatorMessageUpdateRequestBody"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/messages/{messageId}/labels:
    post:
      operationId: addCommunicatorMessageLabel
      summary: Add communicator message label
      description: Add communicator message label
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/CommunicatorMessageLabelRequestBody"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageThreadLabel"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "404":
          description: Communicator message not found
        "500":
          description: Internal server error

  /rest/communicator/messages/{messageId}/labels/{labelId}:
    delete:
      operationId: deleteCommunicatorMessageLabel
      summary: Delete communicator message label
      description: Delete communicator message label
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
            format: int64
        - name: labelId
          in: path
          description: Communicator message label id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: "Communicator message label deleted successfully"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "404":
          description: Communicator message not found

  /rest/communicator/receiveditemscount:
    get:
      operationId: getCommunicatorReceivedItemsCount
      summary: Get communicator received items count
      description: Get communicator received items count
      tags:
        - Communicator
      responses:
        "200":
          description: Number of received items successfully retrieved
          content:
            application/json:
              schema:
                type: integer
                format: int64
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/recipientsUsersSearch:
    get:
      operationId: getCommunicatorRecipientsUserSearch
      summary: Get communicator recipients user search
      description: Get communicator recipients user search
      tags:
        - Communicator
      parameters:
        - name: q
          in: query
          description: Search string
          schema:
            type: string
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Message recipients search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/recipientsWorkspacesSearch:
    get:
      operationId: getCommunicatorRecipientsWorkspacesSearch
      summary: Get communicator recipients workspaces search
      description: Get communicator recipients workspaces search
      tags:
        - Communicator
      parameters:
        - name: q
          in: query
          description: Search string
          schema:
            type: string
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Workspace recipients search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceBasicInfo"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/items:
    get:
      operationId: getCommunicatorThreads
      summary: Get communicator threads
      description: Get communicator threads
      tags:
        - Communicator
      parameters:
        - name: labelId
          in: query
          description: Label id
          schema:
            type: integer
            format: int64
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
        - name: onlyUnread
          in: query
          description: Only unread
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: "Communicator threads"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MessageThread"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/items/{messageId}:
    delete:
      operationId: deleteCommunicatorMessage
      summary: Delete communicator message
      description: Delete communicator message
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: "Communicator message deleted successfully"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/items/{messageId}/markasread:
    post:
      operationId: markCommunicatorThreadAsRead
      summary: Mark communicator thread as read
      description: Mark communicator thread as read
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: "Communicator thread marked as read"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/items/{messageId}/markasunread:
    post:
      operationId: markCommunicatorThreadAsUnread
      summary: Mark communicator thread as unread
      description: Mark communicator thread as unread
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: "Communicator thread marked as unread"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/sentitems:
    get:
      operationId: getCommunicatorSentItems
      summary: Get communicator sent items
      description: Get communicator sent items
      tags:
        - Communicator
      parameters:
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: "Communicator sent items"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MessageThread"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/sentitems/{messageId}:
    get:
      operationId: getCommunicatorSentItem
      summary: Get communicator sent item
      description: Get communicator sent item
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "Communicator sent item"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageThreadExpanded"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    delete:
      operationId: deleteCommunicatorSentItem
      summary: Delete communicator sent item
      description: Delete communicator sent item
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: "Communicator sent item deleted successfully"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/trash:
    get:
      operationId: getCommunicatorTrash
      summary: Get communicator trash
      description: Get communicator trash
      tags:
        - Communicator
      parameters:
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: "Communicator trash"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MessageThread"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/trash/{messageId}:
    get:
      operationId: getCommunicatorTrashItem
      summary: Get communicator trash item
      description: Get communicator trash item
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "Communicator trash item"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageThreadExpanded"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    delete:
      operationId: deleteCommunicatorTrashItem
      summary: Delete communicator trash item
      description: Delete communicator trash item
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: "Communicator trash item deleted successfully"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/trash/{messageId}/markasread:
    post:
      operationId: markCommunicatorTrashItemAsRead
      summary: Mark communicator trash item as read
      description: Mark communicator trash item as read
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: "Communicator trash item marked as read"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/trash/{messageId}/markasunread:
    post:
      operationId: markCommunicatorTrashItemAsUnread
      summary: Mark communicator trash item as unread
      description: Mark communicator trash item as unread
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: "Communicator trash item marked as unread"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/trash/{messageId}/restore:
    put:
      operationId: restoreCommunicatorTrashItem
      summary: Restore communicator trash item
      description: Restore communicator trash item
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: "Communicator trash item restored successfully"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/unread/{messageId}:
    get:
      operationId: getCommunicatorUnread
      summary: Get communicator unread
      description: Get communicator unread
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "Communicator unread"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageThreadExpanded"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/communicator/searchItems/:
    get:
      operationId: getCommunicatorSearchItems
      summary: Get communicator search items
      description: Get communicator search items
      tags:
        - Communicator
      parameters:
        - name: q
          in: query
          description: Search string
          schema:
            type: string
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: "Communicator search results"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MessageSearchResult"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "502":
          description: Bad gateway
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  /rest/communicator/signatures:
    get:
      operationId: getCommunicatorSignatures
      summary: Get communicator signatures
      description: Get communicator signatures
      tags:
        - Communicator
      responses:
        "200":
          description: Communicator signatures
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommunicatorSignature"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

    post:
      operationId: createCommunicatorSignature
      summary: Create communicator signature
      description: Create communicator signature
      tags:
        - Communicator
      requestBody:
        $ref: "#/components/requestBodies/CommunicatorSignatureCreateRequestBody"
      responses:
        "200":
          description: Communicator signature created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunicatorSignature"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/signatures/{signatureId}:
    put:
      operationId: updateCommunicatorSignature
      summary: Update communicator signature
      description: Update communicator signature
      tags:
        - Communicator
      parameters:
        - name: signatureId
          in: path
          description: Communicator signature id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/CommunicatorSignatureUpdateRequestBody"
      responses:
        "200":
          description: Communicator signature updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunicatorSignature"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

    delete:
      operationId: deleteCommunicatorSignature
      summary: Delete communicator signature
      description: Delete communicator signature
      tags:
        - Communicator
      parameters:
        - name: signatureId
          in: path
          description: Communicator signature id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Communicator signature deleted successfully
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/userLabels:
    get:
      operationId: getCommunicatorUserLabels
      summary: Get communicator user labels
      description: Get communicator user labels
      tags:
        - Communicator
      responses:
        "200":
          description: Communicator user labels
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Label"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

    post:
      operationId: createCommunicatorUserLabel
      summary: Create communicator user label
      description: Create communicator user label
      tags:
        - Communicator
      requestBody:
        $ref: "#/components/requestBodies/CommunicatorCreateLabelRequestBody"
      responses:
        "200":
          description: Communicator user label created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Label"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/userLabels/{labelId}:
    put:
      operationId: updateCommunicatorUserLabel
      summary: Update communicator user label
      description: Update communicator user label
      tags:
        - Communicator
      parameters:
        - name: labelId
          in: path
          description: Communicator user label id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/CommunicatorUpdateLabelRequestBody"
      responses:
        "200":
          description: Communicator user label updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Label"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

    delete:
      operationId: deleteCommunicatorUserLabel
      summary: Delete communicator user label
      description: Delete communicator user label
      tags:
        - Communicator
      parameters:
        - name: labelId
          in: path
          description: Communicator user label id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Communicator user label deleted successfully
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/userLabels/{labelId}/messages:
    get:
      operationId: getCommunicatorUserLabelMessages
      summary: Get communicator user label messages
      description: Get communicator user label messages
      tags:
        - Communicator
      parameters:
        - name: labelId
          in: path
          description: Communicator user label id
          required: true
          schema:
            type: integer
            format: int64
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Communicator user label messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MessageThread"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/userLabels/{labelId}/messages/{messageId}:
    get:
      operationId: getCommunicatorUserLabelMessage
      summary: Get communicator user label message
      description: Get communicator user label message
      tags:
        - Communicator
      parameters:
        - name: labelId
          in: path
          description: Communicator user label id
          required: true
          schema:
            type: integer
            format: int64
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Communicator user label message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageThreadExpanded"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  #COURSEPICKER
  /rest/coursepicker/curriculums:
    get:
      operationId: getCoursepickerCurriculums
      summary: Get course picker curriculums
      description: Get course picker curriculums
      tags:
        - Coursepicker
      responses:
        "200":
          description: Course picker curriculums
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Curriculum"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  /rest/coursepicker/educationTypes:
    get:
      operationId: getCoursepickerEducationTypes
      description: Returns list of education types that are used in coursepicker. This list only contains education types that do have courses for sure.
      tags:
        - Coursepicker
      responses:
        "200":
          description: Course picker education types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EducationType"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  /rest/coursepicker/organizations:
    get:
      operationId: getCoursepickerOrganizations
      summary: Get course picker organizations
      description: Get course picker organizations
      tags:
        - Coursepicker
      responses:
        "200":
          description: Course picker organizations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceOrganization"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  /rest/coursepicker/workspaces:
    get:
      operationId: getCoursepickerWorkspaces
      summary: Get course picker workspaces
      description: Get course picker workspaces
      tags:
        - Coursepicker
      parameters:
        - name: q
          in: query
          description: Search string
          schema:
            type: string
        - name: subjects
          in: query
          description: Subject ids
          schema:
            type: array
            items:
              type: string
        - name: educationTypes
          in: query
          description: Education type ids
          schema:
            type: array
            items:
              type: string
        - name: curriculums
          in: query
          description: Curriculum ids
          schema:
            type: array
            items:
              type: string
        - name: organizations
          in: query
          description: Organization ids
          schema:
            type: array
            items:
              type: string
        - name: minVisits
          in: query
          description: Minimum visits
          schema:
            type: integer
            format: int64
        - name: publicity
          in: query
          description: Publicity restriction
          schema:
            allOf:
              - $ref: "#/components/schemas/PublicityRestriction"
            default: ONLY_PUBLISHED
        - name: myWorkspaces
          in: query
          description: My workspaces
          schema:
            type: boolean
            default: false
        - name: templates
          in: query
          description: Template restriction
          schema:
            allOf:
              - $ref: "#/components/schemas/TemplateRestriction"
            default: ONLY_WORKSPACES
        - name: orderBy
          in: query
          description: Order by
          schema:
            type: array
            items:
              type: string
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Course picker workspaces
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  /rest/coursepicker/workspaces/{workspaceId}:
    get:
      operationId: getCoursepickerWorkspace
      summary: Get course picker workspace
      description: Get course picker workspace
      tags:
        - Coursepicker
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Course picker workspace
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  /rest/coursepicker/workspaces/{workspaceId}/canSignup:
    get:
      operationId: workspaceCanSignUp
      summary: Returns can signup info for workspace
      description: Returns can signup info for workspace and any possible existing assessment events
      tags:
        - Coursepicker
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Course picker workspace can signup info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceCansignup"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  /rest/coursepicker/workspaces/{workspaceId}/signup:
    post:
      operationId: workspaceSignUp
      summary: Signups user to workspace
      description: Signup user to workspace
      tags:
        - Coursepicker
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceSignUpRequestBody"
      responses:
        "204":
          description: User signed up to workspace successfully
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  #EVALUATION
  /rest/evaluation/compositeAssessmentRequests:
    get:
      operationId: getCompositeAssessmentRequests
      summary: Get composite assessment requests
      description: Get composite assessment requests
      tags:
        - Evaluation
      parameters:
        - name: workspaceEntityId
          in: query
          description: Workspace entity id
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Composite assessment requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EvaluationAssessmentRequest"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/compositeGradingScales:
    get:
      operationId: getEvaluationGradingScales
      summary: Get evaluation grading systems
      description: Get evaluation grading systems
      tags:
        - Evaluation
      responses:
        "200":
          description: Grading systems
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EvaluationGradeScale"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/interimEvaluationRequest:
    post:
      operationId: createInterimEvaluationRequest
      summary: Create interim evaluation request
      description: Create interim evaluation request
      tags:
        - Evaluation
      requestBody:
        $ref: "#/components/requestBodies/InterimEvaluationRequestCreateRequestBody"
      responses:
        "200":
          description: Interim evaluation request created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InterimEvaluationRequest"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  /rest/evaluation/interimEvaluationRequest/{interimEvaluationRequestId}:
    delete:
      operationId: deleteInterimEvaluationRequest
      summary: Delete interim evaluation request
      description: Delete interim evaluation request
      tags:
        - Evaluation
      parameters:
        - name: interimEvaluationRequestId
          in: path
          description: Interim evaluation request id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Interim evaluation request deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InterimEvaluationRequest"
        "204":
          description: Interim evaluation request deleted successfully
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  /rest/evaluation/workspace/{workspaceId}/interimEvaluationRequests:
    get:
      operationId: getWorkspaceInterimEvaluationRequests
      summary: Get workspace interim evaluation requests
      description: Get workspace interim evaluation requests
      tags:
        - Evaluation
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace interim evaluation requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InterimEvaluationRequest"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/workspace/{workspaceId}/user/{userEntityId}/workspacematerial/{workspaceMaterialId}/assessment:
    post:
      operationId: saveWorkspaceAssigmentAssessment
      summary: Save workspace material assessment
      description: Save workspace material assessment
      tags:
        - Evaluation
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: userEntityId
          in: path
          description: User entity id
          required: true
          schema:
            type: integer
            format: int64
        - name: workspaceMaterialId
          in: path
          description: Workspace material id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/EvaluationSaveAssignmentAssessmentRequestBody"
      responses:
        "200":
          description: Workspace material assessment created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssessmentWithAudio"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/workspace/{workspaceId}/user/{userEntityId}/workspacematerial/{workspaceMaterialId}/assessment/{assessmentId}:
    put:
      operationId: updateWorkspaceAssigmentAssessment
      summary: Update workspace material assessment
      description: Update workspace material assessment
      tags:
        - Evaluation
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: userEntityId
          in: path
          description: User entity id
          required: true
          schema:
            type: integer
            format: int64
        - name: workspaceMaterialId
          in: path
          description: Workspace material id
          required: true
          schema:
            type: integer
            format: int64
        - name: assessmentId
          in: path
          description: Assessment id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/EvaluationUpdateAssignmentAssessmentRequestBody"
      responses:
        "200":
          description: Workspace material assessment updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssessmentWithAudio"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/workspaceMaterial/{workspaceMaterialId}/interimEvaluationRequest:
    get:
      operationId: getWorkspaceMaterialInterimEvaluationRequest
      summary: Get workspace material interim evaluation request
      description: Get workspace material interim evaluation request
      tags:
        - Evaluation
      parameters:
        - name: workspaceMaterialId
          in: path
          description: Workspace material id
          required: true
          schema:
            type: integer
            format: int64
        - name: userEntityId
          in: query
          description: User entity id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace material interim evaluation request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InterimEvaluationRequest"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  /rest/evaluation/workspaces/{workspaceId}/materials/{workspaceMaterialId}/evaluations/:
    get:
      operationId: getWorkspaceMaterialEvaluations
      summary: Get workspace material evaluations
      description: Get workspace material evaluations
      tags:
        - Evaluation
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: workspaceMaterialId
          in: path
          description: Workspace material id
          required: true
          schema:
            type: integer
            format: int64
        - name: userEntityId
          in: query
          description: User entity id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace material evaluations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MaterialEvaluation"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/workspaces/{workspaceId}/students/{studentEntityId}/journalfeedback:
    get:
      operationId: getWorkspaceStudentJournalFeedback
      summary: Get workspace student journal feedback
      description: Get workspace student journal feedback
      tags:
        - Evaluation
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: studentEntityId
          in: path
          description: Student entity id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace student journal feedback
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluationJournalFeedback"
        "204":
          description: Workspace student journal feedback not found
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

    post:
      operationId: saveWorkspaceStudentJournalFeedback
      summary: Create workspace student journal feedback
      description: Create workspace student journal feedback
      tags:
        - Evaluation
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: studentEntityId
          in: path
          description: Student entity id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/EvaluationCreateJournalFeedbackRequestBody"
      responses:
        "200":
          description: Workspace student journal feedback created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluationJournalFeedback"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/workspaces/{workspaceId}/students/{studentEntityId}/journalfeedback/{journalFeedbackId}:
    delete:
      operationId: deleteWorkspaceStudentJournalFeedback
      summary: Delete workspace student journal feedback
      description: Delete workspace student journal feedback
      tags:
        - Evaluation
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: studentEntityId
          in: path
          description: Student entity id
          required: true
          schema:
            type: integer
            format: int64
        - name: journalFeedbackId
          in: path
          description: Journal feedback id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Workspace student journal feedback deleted successfully
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/workspaces/{workspaceId}/students/{studentEntityId}/activity:
    get:
      operationId: getWorkspaceStudentActivity
      summary: Get workspace student activity
      description: Get workspace student activity
      tags:
        - Evaluation
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: studentEntityId
          in: path
          description: Student entity id
          required: true
          schema:
            type: string
            format: int64
      responses:
        "200":
          description: Workspace student activity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceActivity"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/workspaceuser/{workspaceUserEntityId}/assessment:
    post:
      operationId: saveWorkspaceUserAssessment
      summary: Save workspace user assessment
      description: Save workspace user assessment
      tags:
        - Evaluation
      parameters:
        - name: workspaceUserEntityId
          in: path
          description: Workspace user entity id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/EvaluationSaveWorkspaceUserAssessmentRequestBody"
      responses:
        "200":
          description: Workspace user assessment created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Assessment"

        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

    put:
      operationId: updateWorkspaceUserAssessment
      summary: Update workspace user assessment
      description: Update workspace user assessment
      tags:
        - Evaluation
      parameters:
        - name: workspaceUserEntityId
          in: path
          description: Workspace user entity id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/EvaluationUpdateWorkspaceUserAssessmentRequestBody"
      responses:
        "200":
          description: Workspace user assessment updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Assessment"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/workspaceuser/{workspaceUserEntityId}/assessment/{assessmentRequestIdentifier}/lock:
    put:
      operationId: lockWorkspaceUserEvaluationRequest
      summary: Lock workspace user evaluation request
      description: Lock workspace user evaluation request
      tags:
        - Evaluation
      parameters:
        - name: workspaceUserEntityId
          in: path
          description: Workspace user entity id
          required: true
          schema:
            type: integer
            format: int64
        - name: assessmentRequestIdentifier
          in: path
          description: Assessment request identifier (like PYRAMUS-103)
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/EvaluationUpdateLockAssessmentRequestBody"
      responses:
        "200":
          description: Workspace user assessment lock updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluationAssessmentRequest"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/workspaceuser/{workspaceUserEntityId}/evaluationrequestarchive:
    put:
      operationId: archiveWorkspaceUserEvaluationRequest
      summary: Archive workspace user evaluation
      description: Archive workspace user evaluation request
      tags:
        - Evaluation
      parameters:
        - name: workspaceUserEntityId
          in: path
          description: Workspace user entity id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Workspace user evaluation request archived successfully
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/workspaceuser/{workspaceUserEntityId}/events:
    get:
      operationId: getWorkspaceUserEvaluationEvents
      summary: Get workspace user evaluation events
      description: Get workspace user evaluation events
      tags:
        - Evaluation
      parameters:
        - name: workspaceUserEntityId
          in: path
          description: Workspace user entity id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace user events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EvaluationEvent"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  /rest/evaluation/workspaceuser/{workspaceUserEntityId}/supplementationrequest:
    post:
      operationId: saveWorkspaceUserSupplementationRequest
      summary: Create workspace user supplementation request
      description: Create workspace user supplementation request
      tags:
        - Evaluation
      parameters:
        - name: workspaceUserEntityId
          in: path
          description: Workspace user entity id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/EvaluationSaveSupplementationRequestRequestBody"
      responses:
        "200":
          description: Workspace user supplementation request created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluationSupplementationRequest"

        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

    put:
      operationId: updateWorkspaceUserSupplementationRequest
      summary: Update workspace user supplementation request
      description: Update workspace user supplementation request
      tags:
        - Evaluation
      parameters:
        - name: workspaceUserEntityId
          in: path
          description: Workspace user entity id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/EvaluationUpdateSupplementationRequestRequestBody"
      responses:
        "200":
          description: Workspace user supplementation request updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluationSupplementationRequest"

        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/workspaceuser/{workspaceUserEntityId}/supplementationrequest/{supplementationRequestId}:
    delete:
      operationId: deleteWorkspaceUserSupplementationRequest
      summary: Delete workspace user supplementation request
      description: Delete workspace user supplementation request
      tags:
        - Evaluation
      parameters:
        - name: workspaceUserEntityId
          in: path
          description: Workspace user entity id
          required: true
          schema:
            type: integer
            format: int64
        - name: supplementationRequestId
          in: path
          description: Supplementation request id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Workspace user supplementation request deleted successfully
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/workspaceuser/{workspaceUserEntityId}/workspaceassessment/{workspaceAssessmentIdentifier}:
    delete:
      operationId: deleteWorkspaceUserWorkspaceAssessment
      summary: Delete workspace user workspace assessment
      description: Delete workspace user workspace assessment
      tags:
        - Evaluation
      parameters:
        - name: workspaceUserEntityId
          in: path
          description: Workspace user entity id
          required: true
          schema:
            type: integer
            format: int64
        - name: workspaceAssessmentIdentifier
          in: path
          description: Workspace assessment identifier
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Workspace user workspace assessment deleted successfully
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  #FEED
  /rest/feed/feeds/{feedReadTarget}:
    get:
      operationId: getFeeds
      summary: Get feeds
      description: Get feeds
      tags:
        - Feeds
      parameters:
        - name: feedReadTarget
          in: path
          description: Feed read target
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: numItems
          in: query
          description: Max results
          schema:
            type: number
            default: 10
        - name: order
          in: query
          description: Order
          schema:
            type: string
            enum:
              - DESCENDING
              - ASCENDING
            default: DESCENDING
      responses:
        "200":
          description: Feeds
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FeedEntry"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #CREDENTIALS
  /rest/forgotpassword/credentialReset:
    post:
      operationId: updateCredentials
      description: Changes the username and password of the account corresponding to the credential reset hashcode.
      tags:
        - Credentials
      requestBody:
        $ref: "#/components/requestBodies/UpdateCredentialsBody"
      responses:
        "204":
          description: Password reset successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forgotpassword/credentialReset/{hash}:
    get:
      operationId: loadCredentials
      description: For a valid credential reset hashcode, returns a credential reset entity containing the current username of the user requesting credential reset.
      tags:
        - Credentials
      parameters:
        - name: hash
          in: path
          description: Hashcode of the reset request
          required: true
          schema:
            type: string
      responses:
        "200":
          description: load credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credentials"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forgotpassword/reset:
    get:
      operationId: resetCredentials
      description: Used to request a credential reset for the account corresponding to the given email address. 204 for a successful reset request; user receives an email with a link to change the credentials
      tags:
        - Credentials
      parameters:
        - name: email
          in: query
          description: the email address of the user requesting a password reset
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Password reset successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  # DISCUSSION
  /rest/forum/areas:
    get:
      operationId: getDiscussionAreas
      summary: Get discussion areas
      description: Get discussion areas
      tags:
        - Discussion
      responses:
        "200":
          description: discussion areas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DiscussionArea"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createDiscussionArea
      summary: Create discussion area
      description: Create discussion area
      tags:
        - Discussion
      requestBody:
        $ref: "#/components/requestBodies/DiscussionAreaCreateRequestBody"
      responses:
        "200":
          description: Discussion area created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionArea"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forum/areas/{areaId}:
    put:
      operationId: updateDiscussionArea
      summary: Update discussion area
      description: Update discussion area
      tags:
        - Discussion
      parameters:
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/DiscussionAreaUpdateRequestBody"
      responses:
        "200":
          description: Discussion area updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionArea"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    delete:
      operationId: deleteDiscussionArea
      summary: Delete discussion area
      description: Delete discussion area
      tags:
        - Discussion
      parameters:
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Discussion area deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forum/areas/{areaId}/threads:
    get:
      operationId: getDiscussionThreads
      summary: Get discussion threads
      description: Get discussion threads
      tags:
        - Discussion
      parameters:
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
            format: int64
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Discussion threads
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DiscussionThread"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createDiscussionThread
      summary: Create discussion thread
      description: Create discussion thread
      tags:
        - Discussion
      parameters:
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/DiscussionThreadCreateRequestBody"
      responses:
        "200":
          description: Discussion thread created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionThread"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forum/areas/{areaId}/threads/{threadId}:
    get:
      operationId: getDiscussionThread
      summary: Get discussion thread
      description: Get discussion thread
      tags:
        - Discussion
      parameters:
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
            format: int64
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Discussion thread
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionThread"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    put:
      operationId: updateDiscussionThread
      summary: Update discussion thread
      description: Update discussion thread
      tags:
        - Discussion
      parameters:
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
            format: int64
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/DiscussionThreadUpdateRequestBody"
      responses:
        "200":
          description: Discussion thread updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionThread"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    delete:
      operationId: deleteDiscussionThread
      summary: Delete discussion thread
      description: Delete discussion thread
      tags:
        - Discussion
      parameters:
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
            format: int64
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Discussion thread deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forum/areas/{areaId}/threads/{threadId}/replies:
    get:
      operationId: getDiscussionThreadReplies
      summary: Get discussion thread replies
      description: Get discussion thread replies
      tags:
        - Discussion
      parameters:
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
            format: int64
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
            format: int64
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Discussion thread replies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DiscussionThreadReply"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createDiscussionThreadReply
      summary: Create discussion thread reply
      description: Create discussion thread reply
      tags:
        - Discussion
      parameters:
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
            format: int64
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/DiscussionThreadReplyCreateRequestBody"
      responses:
        "200":
          description: Discussion thread reply created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionThreadReply"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forum/areas/{areaId}/threads/{threadId}/replies/{replyId}:
    put:
      operationId: updateDiscussionThreadReply
      summary: Update discussion thread reply
      description: Update discussion thread reply
      tags:
        - Discussion
      parameters:
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
            format: int64
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
            format: int64
        - name: replyId
          in: path
          description: Discussion thread reply id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/DiscussionThreadReplyUpdateRequestBody"
      responses:
        "200":
          description: Discussion thread reply updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionThreadReply"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    delete:
      operationId: deleteDiscussionThreadReply
      summary: Delete discussion thread reply
      description: Delete discussion thread reply
      tags:
        - Discussion
      parameters:
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
            format: int64
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
            format: int64
        - name: replyId
          in: path
          description: Discussion thread reply id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Discussion thread reply deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forum/areas/{areaId}/threads/{threadId}/toggleSubscription:
    post:
      operationId: toggleDiscussionThreadSubscription
      summary: Toggle discussion thread subscription
      description: Toggle discussion thread subscription
      tags:
        - Discussion
      parameters:
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
            format: int64
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Discussion thread subscription toggled successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionSubscribedThread"
        "204":
          description: Discussion thread subscription untoggled successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forum/areas/{areaId}/toggleSubscription:
    post:
      operationId: toggleDiscussionAreaSubscription
      summary: Toggle discussion area subscription
      description: Toggle discussion area subscription
      tags:
        - Discussion
      parameters:
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Discussion area subscription toggled successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionSubscribedArea"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forum/environmentAreaPermissions:
    get:
      operationId: getDiscussionEnvironmentAreaPermissions
      summary: Get discussion environment area permissions
      description: Get discussion environment area permissions
      tags:
        - Discussion
      responses:
        "200":
          description: Discussion environment area permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forum/isAvailable:
    get:
      operationId: isDiscussionAvailable
      summary: Is discussion available
      description: Is discussion available
      tags:
        - Discussion
      responses:
        "200":
          description: Discussion available
          content:
            application/json:
              schema:
                type: boolean
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forum/latest:
    get:
      operationId: getLatestDiscussionThreads
      summary: Get latest discussion threads
      description: Get latest discussion threads
      tags:
        - Discussion
      parameters:
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Latest discussion threads
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DiscussionThread"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forum/subscriptionAreas/{userId}:
    get:
      operationId: getDiscussionSubscribedAreas
      summary: Get discussion subscribed areas
      description: Get discussion subscribed areas
      tags:
        - Discussion
      parameters:
        - name: userId
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Discussion subscribed areas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DiscussionSubscribedArea"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forum/subscriptionThreads/{userId}:
    get:
      operationId: getDiscussionSubscribedThreads
      summary: Get discussion subscribed threads
      description: Get discussion subscribed threads
      tags:
        - Discussion
      parameters:
        - name: userId
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Discussion subscribed threads
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DiscussionSubscribedThread"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #WORKSPACE DISCUSSION
  /rest/workspace/workspaces/{workspaceentityId}/forumAreas:
    get:
      operationId: getWorkspaceDiscussionAreas
      summary: Get workspace discussion areas
      description: Get workspace discussion areas
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceentityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace discussion areas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DiscussionArea"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createWorkspaceDiscussionArea
      summary: Create workspace discussion area
      description: Create workspace discussion area
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceentityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: sourceWorkspaceEntityId
          in: query
          description: Source workspace id
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/DiscussionWorkspaceAreaCreateRequestBody"
      responses:
        "200":
          description: Workspace discussion area created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionArea"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceentityId}/forumAreas/{areaId}:
    put:
      operationId: updateWorkspaceDiscussionArea
      summary: Update workspace discussion area
      description: Update workspace discussion area
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceentityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/DiscussionAreaUpdateRequestBody"
      responses:
        "200":
          description: Workspace discussion area updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionArea"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    delete:
      operationId: deleteWorkspaceDiscussionArea
      summary: Delete workspace discussion area
      description: Delete workspace discussion area
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceentityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Workspace discussion area deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceentityId}/forumAreas/{areaId}/threads:
    get:
      operationId: getWorkspaceDiscussionThreads
      summary: Get workspace discussion threads
      description: Get workspace discussion threads
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceentityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
            format: int64
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Workspace discussion threads
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DiscussionThread"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createWorkspaceDiscussionThread
      summary: Create workspace discussion thread
      description: Create workspace discussion thread
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceentityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/DiscussionThreadCreateRequestBody"
      responses:
        "200":
          description: Workspace discussion thread created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionThread"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceentityId}/forumAreas/{areaId}/threads/{threadId}:
    get:
      operationId: getWorkspaceDiscussionThread
      summary: Get workspace discussion thread
      description: Get workspace discussion thread
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceentityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
            format: int64
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace discussion thread
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionThread"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    put:
      operationId: updateWorkspaceDiscussionThread
      summary: Update workspace discussion thread
      description: Update workspace discussion thread
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceentityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
            format: int64
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/DiscussionThreadUpdateRequestBody"
      responses:
        "200":
          description: Workspace discussion thread updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionThread"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    delete:
      operationId: deleteWorkspaceDiscussionThread
      summary: Delete workspace discussion thread
      description: Delete workspace discussion thread
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceentityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
            format: int64
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Workspace discussion thread deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceentityId}/forumAreas/{areaId}/threads/{threadId}/replies:
    get:
      operationId: getWorkspaceDiscussionThreadReplies
      summary: Get workspace discussion thread replies
      description: Get workspace discussion thread replies
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceentityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
            format: int64
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
            format: int64
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Workspace discussion thread replies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DiscussionThreadReply"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createWorkspaceDiscussionThreadReply
      summary: Create workspace discussion thread reply
      description: Create workspace discussion thread reply
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceentityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
            format: int64
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/DiscussionThreadReplyCreateRequestBody"
      responses:
        "200":
          description: Workspace discussion thread reply created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionThreadReply"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceentityId}/forumAreas/{areaId}/threads/{threadId}/replies/{replyId}:
    put:
      operationId: updateWorkspaceDiscussionThreadReply
      summary: Update workspace discussion thread reply
      description: Update workspace discussion thread reply
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceentityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
            format: int64
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
            format: int64
        - name: replyId
          in: path
          description: Discussion thread reply id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/DiscussionThreadReplyUpdateRequestBody"
      responses:
        "200":
          description: Workspace discussion thread reply updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionThreadReply"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    delete:
      operationId: deleteWorkspaceDiscussionThreadReply
      summary: Delete workspace discussion thread reply
      description: Delete workspace discussion thread reply
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceentityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
            format: int64
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
            format: int64
        - name: replyId
          in: path
          description: Discussion thread reply id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Workspace discussion thread reply deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/forumStatistics:
    get:
      operationId: getWorkspaceDiscussionStatistics
      summary: Get workspace discussion statistics
      description: Get workspace discussion statistics
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: userIdentifier
          in: query
          description: User identifier
          schema:
            type: string
      responses:
        "200":
          description: Workspace discussion statistics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionWorkspaceStatistic"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/forumLatest:
    get:
      operationId: getWorkspaceForumLatest
      summary: Get workspace forum latest
      description: Get workspace forum latest
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Workspace forum latest
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DiscussionThread"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #GUIDER
  /rest/guider/student/{studentId}/workspace/{workspaceId}/signup:
    post:
      operationId: signupStudentToWorkspace
      summary: Signup student to workspace with given id
      tags:
        - Guider
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: integer
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/SignupStudentToWorkspaceRequestBody"
      responses:
        "200":
          description: Student signed up to workspace successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudentStudyActivity"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/guider/student/{studentId}/contactLog:
    post:
      operationId: createContactLogEvents
      summary: Create contact log event
      description: Create contact log event
      tags:
        - Guider
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/ContactLogCreateEventRequestBody"
      responses:
        "200":
          description: Contact log event created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactLogEvent"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/guider/students/contactLogEntries/batch:
    post:
      operationId: createMultipleContactLogEvents
      summary: Create contact log event for multiple students or student group
      description: Create contact log event for multiple students or student group
      tags:
        - Guider
      requestBody:
        $ref: "#/components/requestBodies/ContactLogCreateMultipleEventRequestBody"
      responses:
        "200":
          description: Contact log event created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactLogEvent"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/guider/student/{studentId}/contactLog/{entryId}:
    put:
      operationId: updateContactLogEvent
      summary: Update contact log event
      description: Update contact log event
      tags:
        - Guider
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: integer
            format: int64
        - name: entryId
          in: path
          description: Contact log event id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/ContactLogUpdateEventRequestBody"
      responses:
        "200":
          description: Contact log event updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactLogEvent"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error
    delete:
      operationId: deleteContactLogEvent
      summary: Delete contact log event
      description: Delete contact log event
      tags:
        - Guider
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: integer
            format: int64
        - name: entryId
          in: path
          description: Contact log event id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Contact log event deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/guider/student/{studentId}/contactLog/{entryId}/comments:
    post:
      operationId: createContactLogEventComment
      summary: Create contact log event comment
      description: Create contact log event comment
      tags:
        - Guider
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: integer
            format: int64
        - name: entryId
          in: path
          description: Contact log event id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/ContactLogEventCommentCreateRequestBody"
      responses:
        "200":
          description: Contact log event comment created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactLogEventComment"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/guider/student/{studentId}/contactLog/{entryId}/comments/{commentId}:
    put:
      operationId: updateContactLogEventComment
      summary: Update contact log event comment
      description: Update contact log event comment
      tags:
        - Guider
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: integer
            format: int64
        - name: entryId
          in: path
          description: Contact log event id
          required: true
          schema:
            type: integer
            format: int64
        - name: commentId
          in: path
          description: Contact log event comment id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/ContactLogEventCommentUpdateRequestBody"
      responses:
        "200":
          description: Contact log event comment updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactLogEventComment"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    delete:
      operationId: deleteContactLogEventComment
      summary: Delete contact log event comment
      description: Delete contact log event comment
      tags:
        - Guider
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: integer
            format: int64
        - name: entryId
          in: path
          description: Contact log event id
          required: true
          schema:
            type: integer
            format: int64
        - name: commentId
          in: path
          description: Contact log event comment id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Contact log event comment deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/guider/students:
    get:
      operationId: getGuiderStudents
      summary: Get students
      description: Get students
      tags:
        - Guider
      parameters:
        - name: q
          in: query
          description: Search query
          schema:
            type: string
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
        - name: flags
          in: query
          description: Flags
          schema:
            type: array
            items:
              type: integer
              format: int64
        - name: workspaceIds
          in: query
          description: Workspace ids
          schema:
            type: array
            items:
              type: integer
              format: int64
        - name: userGroupIds
          in: query
          description: User group ids
          schema:
            type: array
            items:
              type: integer
              format: int64
        - name: flagOwnerIdentifier
          in: query
          description: Falg owner identifier
          schema:
            type: string
        - name: userIdentifier
          in: query
          description: User identifier
          schema:
            type: string
        - name: includeInactiveStudents
          in: query
          description: Include inactive students
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Students
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlaggedStudent"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/guider/students/{studentId}:
    get:
      operationId: getGuiderStudent
      summary: Get student
      description: Get student
      tags:
        - Guider
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GuiderStudent"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/guider/students/{studentId}/workspaces:
    get:
      operationId: getStudentWorkspaces
      summary: Get student workspaces
      description: Get student workspaces
      tags:
        - Guider
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: string
        - name: active
          in: query
          description: Only active workspaces
          schema:
            type: boolean
      responses:
        "200":
          description: Student workspaces
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RecordsWorkspace"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/guider/users/{identifier}/files:
    get:
      operationId: getGuiderUserFiles
      summary: Get guider user files
      description: Get guider user files
      tags:
        - Guider
      parameters:
        - name: identifier
          in: path
          description: User identifier
          required: true
          schema:
            type: string
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Guider user files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserFile"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/guider/users/{identifier}/latestNotifications:
    get:
      operationId: getGuiderUserLatestNotification
      summary: Get guider user latest notifications
      description: Get guider user latest notifications
      tags:
        - Guider
      parameters:
        - name: identifier
          in: path
          description: User identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Guider user latest notifications
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GuiderStudentNotification"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/guider/users/{userId}/contactLog:
    get:
      operationId: getGuiderUserContactLog
      summary: Get guider user contact log
      description: Get guider user contact log
      tags:
        - Guider
      parameters:
        - name: userId
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int64
        - name: resultsPerPage
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
        - name: page
          in: query
          description: First result
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Guider user contact log
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactLog"

        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/guider/users/{identifier}/workspaceActivity:
    get:
      operationId: getGuiderUserWorkspaceActivity
      summary: Get guider identifier workspace activity
      description: Get guider identifier workspace activity
      tags:
        - Guider
      parameters:
        - name: identifier
          in: path
          required: true
          description: Identifier
          schema:
            type: string
        - name: workspaceIdentifier
          in: query
          description: Workspace identifier
          schema:
            type: string
        - name: includeTransferCredits
          in: query
          description: Include transfer credits
          schema:
            type: boolean
        - name: includeAssignmentStatistics
          in: query
          description: Include assignment statistics
          schema:
            type: boolean
      responses:
        "200":
          description: Guider user workspace activity info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceActivityInfo"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/guider/files/{fileId}:
    delete:
      operationId: deleteGuiderFile
      summary: Delete guider file
      description: Delete guider file
      tags:
        - Guider
      parameters:
        - name: fileId
          in: path
          description: File id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Guider file deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #HOPS
  /rest/hops/isHopsAvailable/{studentIdentifier}:
    get:
      operationId: isHopsAvailable
      summary: Is hops available
      description: Is hops available
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Hops available
          content:
            application/json:
              schema:
                type: boolean
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/listWorkspaceSuggestions:
    get:
      operationId: listWorkspaceSuggestions
      summary: List workspace suggestions
      description: List workspace suggestions
      tags:
        - Hops
      parameters:
        - name: subject
          in: query
          description: subject
          required: true
          schema:
            type: string
        - name: courseNumber
          in: query
          description: Workspace entity id
          required: true
          schema:
            type: integer
            format: int64
        - name: userEntityId
          required: true
          in: query
          description: User entity id
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace suggestions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceSuggestion"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/student/{studentIdentifier}:
    get:
      operationId: getStudentHops
      summary: Get student
      description: Get student
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Hops of student. If no hops exists, empty hops is returned. Data is JSON object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: saveStudentHops
      summary: Save student's hops
      description: Save student's hops
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/HopsSaveRequestBody"
      responses:
        "200":
          description: Student created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HopsFormSaveResponse"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/student/{studentIdentifier}/lock:
    get:
      operationId: getStudentHopsLock
      summary: Get student hops locked status information
      description: Get student hops locked status with information about who locked it
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Hops lock with information about who locked it
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HopsLocked"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    put:
      operationId: updateStudentHopsLock
      summary: Update student hops lock
      description: Update student hops lock
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/HopsUpdateLockRequestBody"
      responses:
        "200":
          description: Student hops locked successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HopsLocked"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/student/{studentIdentifier}/alternativeStudyOptions:
    get:
      operationId: getStudentAlternativeStudyOptions
      summary: Get student alternative study options
      description: Get student alternative study options
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student alternative study options
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: saveStudentAlternativeStudyOptions
      summary: Save student alternative study options
      description: Save student alternative study options
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/AlternativeStudyOptionSaveRequestBody"
      responses:
        "200":
          description: Student alternative study options saved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AlternativeStudyOption"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/student/{studentIdentifier}/history:
    get:
      operationId: getStudentHopsHistoryEntries
      summary: Get student hops history entries
      description: Get student hops history entries
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Student hops history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HopsHistoryEntry"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/student/{studentIdentifier}/history/{entryId}:
    put:
      operationId: updateStudentHopsHistoryEntry
      summary: Update student hops history entry
      description: Update student hops history entry
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
        - name: entryId
          in: path
          description: Hops history entry id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/HopsHistoryEntryUpdateRequestBody"
      responses:
        "200":
          description: Student hops history entry updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HopsHistoryEntry"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/student/{studentIdentifier}/hopsGoals:
    get:
      operationId: getStudentHopsGoals
      summary: Get student hops goals
      description: Get student hops goals
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student hops goals
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HopsGoals"

        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: saveStudentHopsGoals
      summary: Save student hops goals
      description: Save student hops goals
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/HopsGoalsUpdateRequestBody"
      responses:
        "200":
          description: Student hops goals saved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HopsGoals"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/student/{studentIdentifier}/optionalSuggestion:
    post:
      operationId: createOptionalSuggestion
      summary: Create optional suggestion for student
      description: Create optional suggestion for student
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/OptionalSuggestionCreateRequestBody"
      responses:
        "200":
          description: Student optional suggestion created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptionalCourseSuggestion"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/student/{studentIdentifier}/optionalSuggestions:
    get:
      operationId: getStudentOptionalSuggestions
      summary: Get student optional suggestions
      description: Get student optional suggestions
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student optional suggestions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OptionalCourseSuggestion"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/student/{studentIdentifier}/studentChoices:
    get:
      operationId: getStudentCourseChoices
      summary: Get student course choices
      description: Get student course choices
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student choices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StudentCourseChoice"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error
    post:
      operationId: saveStudentCourseChoices
      summary: Save student course choices
      description: Save student course choices
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/StudentCourseChoiceSaveRequestBody"
      responses:
        "200":
          description: Student course choices saved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudentCourseChoice"

        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/student/{studentIdentifier}/studentInfo:
    get:
      operationId: getStudentInfo
      summary: Get student info
      description: Get student info
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudentInfo"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/student/{studentIdentifier}/studyActivity:
    get:
      operationId: getStudentStudyActivity
      summary: Get student study activity
      description: Get student study activity
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student study activity
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StudentStudyActivity"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/student/{studentIdentifier}/studyHours:
    get:
      operationId: getStudentStudyHours
      summary: Get student study hours
      description: Get student study hours
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student study hours
          content:
            application/json:
              schema:
                type: integer
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: saveStudentStudyHours
      summary: Save student study hours
      description: Save student study hours
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/StudentStudyHoursSaveRequestBody"
      responses:
        "200":
          description: Student study hours saved successfully
          content:
            application/json:
              schema:
                type: integer
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/student/{studentIdentifier}/toggleSuggestion:
    post:
      operationId: toggleSuggestion
      summary: Toggle suggestion
      description: Toggle suggestion
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ToggleSuggestionCreateRequestBody"
      responses:
        "204":
          description: WorkspaceSuggestion toggled successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    put:
      operationId: updateToggleSuggestion
      summary: Update toggle suggestion
      description: Update toggle suggestion
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ToggleSuggestionUpdateRequestBody"
      responses:
        "204":
          description: WorkspaceSuggestion toggled successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #MATERIALS
  /rest/materials/binary:
    post:
      operationId: createBinaryMaterial
      summary: Create binary material
      description: Create binary material
      tags:
        - Materials
      requestBody:
        $ref: "#/components/requestBodies/BinaryMaterialCreateRequestBody"
      responses:
        "200":
          description: Binary material created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaterialBinary"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/materials/html:
    post:
      operationId: createHtmlMaterial
      summary: Create html material
      description: Create html material
      tags:
        - Materials
      requestBody:
        $ref: "#/components/requestBodies/HtmlMaterialCreateRequestBody"
      responses:
        "200":
          description: Html material created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaterialHtml"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/materials/html/{id}:
    get:
      operationId: getHtmlMaterial
      summary: Get html material
      description: Get html material
      tags:
        - Materials
      parameters:
        - name: id
          in: path
          description: Html material id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Html material
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaterialHtml"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/materials/html/{materialid}/content:
    put:
      operationId: updateHtmlMaterialContent
      summary: Update html material content
      description: Update html material content
      tags:
        - Materials
      parameters:
        - name: materialid
          in: path
          description: Html material id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/MaterialContentUpdateRequestBody"
      responses:
        "204":
          description: Html material content updated successfully
        "400":
          description: Invalid request was sent to the server
        "409":
          description: Material contains answers
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    description: Reason what caused conflict
        "500":
          description: Internal server error

  /rest/materials/material/{materialId}:
    get:
      operationId: getMaterial
      summary: Get material
      description: Get material
      tags:
        - Materials
      parameters:
        - name: materialId
          in: path
          description: Material id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Material
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Material"
        "204":
          description: Material not found
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    put:
      operationId: updateMaterial
      summary: Update material
      description: Update material
      tags:
        - Materials
      parameters:
        - name: materialId
          in: path
          description: Material id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/MaterialUpdateRequestBody"
      responses:
        "200":
          description: Material updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Material"
        "204":
          description: Material updated successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/materials/material/{materialId}/workspaceMaterials:
    get:
      operationId: getMaterialsByWorkspace
      summary: Get workspace materials
      description: Get workspace materials
      tags:
        - Materials
      parameters:
        - name: materialId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace materials
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceMaterial"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/materials/material/{materialId}/producers:
    post:
      operationId: createMaterialProducer
      summary: Create material producer
      description: Create material producer
      tags:
        - Materials
      parameters:
        - name: materialId
          in: path
          description: Material id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/MaterialProducerCreateRequestBody"
      responses:
        "200":
          description: Material producer created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaterialProducer"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/materials/material/{materialId}/producers/{producerId}:
    delete:
      operationId: deleteMaterialProducer
      summary: Delete material producer
      description: Delete material producer
      tags:
        - Materials
      parameters:
        - name: materialId
          in: path
          description: Material id
          required: true
          schema:
            type: integer
            format: int64
        - name: producerId
          in: path
          description: Material producer id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Material producer deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #MATRICULATION
  /rest/matriculation/students/{studentIdentifier}/plan:
    get:
      operationId: getStudentMatriculationPlan
      summary: Get student's matriculation plan
      description: Get student's matriculation plan
      tags:
        - Matriculation
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Matriculation Plan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatriculationPlan"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error
    put:
      operationId: setStudentMatriculationPlan
      summary: Set student's matriculation plan
      description: Set student's matriculation plan
      tags:
        - Matriculation
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/MatriculationPlanUpdateRequestBody"
      responses:
        "200":
          description: Matriculation Plan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatriculationPlan"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/matriculation/students/{studentIdentifier}/results:
    get:
      operationId: getStudentMatriculationResults
      summary: Get student's matriculation results
      description: Get student's matriculation results
      tags:
        - Matriculation
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Matriculation Results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MatriculationResults"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/matriculation/students/{studentIdentifier}/exams:
    get:
      operationId: getStudentExams
      summary: Get students' exams
      description: Get students' exams
      tags:
        - Matriculation
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
        - name: filter
          in: query
          description: Filter for the query
          schema:
            allOf:
              - $ref: "#/components/schemas/MatriculationExamListFilter"
            default: ALL
      responses:
        "200":
          description: Exams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MatriculationExam"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/matriculation/students/{studentIdentifier}/exams/{examId}/enrollment:
    get:
      operationId: getStudentExamEnrollment
      summary: Get student's exam enrollment
      description: Get student's exam enrollment
      tags:
        - Matriculation
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
        - name: examId
          in: path
          description: Exam id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Exam enrollment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatriculationExamEnrollment"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/matriculation/students/{studentIdentifier}/exams/{examId}/enrollment/changelog:
    get:
      operationId: getStudentExamEnrollmentChangeLog
      summary: Get students' exam enrollment's change log
      description: Get students' exam enrollment's change log
      tags:
        - Matriculation
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
        - name: examId
          in: path
          description: Exam id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Exam enrollment's change log entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MatriculationExamChangeLogEntry"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/matriculation/students/{studentIdentifier}/exams/{examId}/enrollment/state:
    put:
      operationId: setStudentExamEnrollmentState
      summary: Set students' exam enrollment state
      description: Set students' exam enrollment state
      tags:
        - Matriculation
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
        - name: examId
          in: path
          description: Exam id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/MatriculationEnrollmentStateUpdateRequestBody"
      responses:
        "204":
          description: OK
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/matriculation/exams/{examId}/enrollments:
    post:
      operationId: createEnrollment
      summary: Create enrollment
      description: Create enrollment
      tags:
        - Matriculation
      parameters:
        - name: examId
          in: path
          description: Exam id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/MatriculationEnrollmentsCreateRequestBody"
      responses:
        "200":
          description: Enrollment created successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/matriculation/students/{studentIdentifier}/initialData:
    get:
      operationId: getInitialData
      summary: Get initial data
      description: Get initial data
      tags:
        - Matriculation
      parameters:
        - name: studentIdentifier
          in: path
          description: Student Identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Initial data in JSON format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatriculationStudent"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/matriculation/students/{studentIdentifier}/matriculationEligibility:
    get:
      operationId: getMatriculationSubjectEligibility
      summary: Get matriculation eligibility
      description: Get matriculation eligibility
      tags:
        - Matriculation
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
        - name: subjectCode
          in: query
          description: Subject code
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Matriculation eligibility
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatriculationSubjectEligibilityOPS2021"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/matriculation/exams/{examId}/savedEnrollments/{userIdentifier}:
    get:
      operationId: getSavedEnrollmentDraft
      summary: Get saved enrollments
      description: Get saved enrollments
      tags:
        - Matriculation
      parameters:
        - name: examId
          in: path
          description: Exam id
          required: true
          schema:
            type: integer
            format: int64
        - name: userIdentifier
          in: path
          description: identifier of user
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Saved enrollments
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Invalid request was sent to the server
        "404":
          description: Saved enrollments not found
        "500":
          description: Internal server error

    put:
      operationId: updateEnrollmentDraft
      summary: Update enrollment draft
      description: Update enrollment draft
      tags:
        - Matriculation
      parameters:
        - name: examId
          in: path
          description: Exam id
          required: true
          schema:
            type: integer
            format: int64
        - name: userIdentifier
          in: path
          description: identifier of user
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/MatriculationEnrollmentDraftUpdateRequestBody"
      responses:
        "200":
          description: Saved enrollments
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #ME
  /rest/me/dependents:
    get:
      operationId: getGuardiansDependents
      summary: Get guardians dependents
      description: Get guardians dependents
      tags:
        - Me
      responses:
        "200":
          description: Guardians dependents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserGuardiansDependant"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/me/dependents/{studentIdentifier}/workspaces:
    get:
      operationId: getGuardiansDependentsActiveWorkspaces
      summary: Get guardians dependents active workspaces
      description: Get guardians dependents active workspaces
      tags:
        - Me
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Guardians dependents active workspaces
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserGuardiansDependantWorkspace"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/me/locale:
    get:
      operationId: getLocale
      summary: Get locale
      description: Get locale
      tags:
        - Me
      responses:
        "200":
          description: Locale
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocalizationLocale"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: setLocale
      summary: Set locale
      description: Set locale
      tags:
        - Me
      requestBody:
        $ref: "#/components/requestBodies/LocalizationSetRequestBody"
      responses:
        "204":
          description: Locale set successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #NOTES
  /rest/notes/note:
    post:
      operationId: createNote
      summary: Creates and returns created note with recipient(s)
      tags:
        - Notes
      requestBody:
        $ref: "#/components/requestBodies/NoteCreateRequestBody"
      responses:
        "200":
          description: Note created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/notes/note/{noteId}:
    put:
      operationId: updateNote
      summary: Updates and returns note
      tags:
        - Notes
      parameters:
        - name: noteId
          in: path
          description: Note id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/NoteUpdateRequestBody"
      responses:
        "200":
          description: Note updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/notes/note/{noteId}/receiver/{recipientId}:
    put:
      operationId: updateNoteReceiver
      summary: Updates and returns note receiver
      tags:
        - Notes
      parameters:
        - name: noteId
          in: path
          description: Note id
          required: true
          schema:
            type: integer
            format: int64
        - name: recipientId
          in: path
          description: Recipient id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/NoteReceiverUpdateRequestBody"
      responses:
        "200":
          description: Note recipient updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoteReceiver"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/notes/note/{noteId}/toggleArchived:
    put:
      operationId: toggleNoteArchived
      summary: Toggles note archived
      tags:
        - Notes
      parameters:
        - name: noteId
          in: path
          description: Note id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Note archived toggled successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/notes/recipient/{recipientId}:
    get:
      operationId: getNotesByRecipient
      summary: Returns notes with given recipient id and optional archived flag
      tags:
        - Notes
      parameters:
        - name: recipientId
          in: path
          description: recipient id
          required: true
          schema:
            type: integer
            format: int64
        - name: listArchived
          in: query
          description: List archived
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Notes returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Note"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/notes/creator/{creatorId}:
    get:
      operationId: getNotesByCreator
      summary: Returns notes with given creator id and optional archived flag
      tags:
        - Notes
      parameters:
        - name: creatorId
          in: path
          description: creator id
          required: true
          schema:
            type: integer
            format: int64
        - name: listArchived
          in: query
          description: List archived
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Notes returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Note"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/notes/note/{noteId}/recipient/{recipientId}:
    delete:
      operationId: deleteNoteRecipient
      summary: Delete note recipient
      tags:
        - Notes
      parameters:
        - name: noteId
          in: path
          description: Note id
          required: true
          schema:
            type: integer
            format: int64
        - name: recipientId
          in: path
          description: Recipient id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Note recipient deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #ORGANIZATION
  /rest/organizationUserManagement/contactPersons:
    get:
      operationId: getContactPersons
      summary: Get contact persons
      description: Get contact persons
      tags:
        - Organization
      responses:
        "200":
          description: Contact persons
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrganizationContact"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/organizationUserManagement/staffMembers:
    get:
      operationId: getOrganizationStaffMembers
      summary: Search staff members
      description: Search staff members
      tags:
        - Organization
      parameters:
        - name: q
          in: query
          description: query string
          schema:
            type: string
        - name: properties
          in: query
          description: Properties
          schema:
            type: string
        - name: userGroupIds
          in: query
          description: User group ids
          schema:
            type: array
            items:
              type: integer
              format: int64
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Staff members object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationStaffMemberSearchResult"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/organizationUserManagement/students:
    get:
      operationId: getOrganizationStudents
      summary: Get students
      description: Get students
      tags:
        - Organization
      parameters:
        - name: q
          in: query
          description: query string
          schema:
            type: string
        - name: userGroupIds
          in: query
          description: User group ids
          schema:
            type: array
            items:
              type: integer
              format: int64
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Students object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationStudentSearchResult"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/organizationUserManagement/studentsSummary:
    get:
      operationId: getOrganizationStudentsSummary
      summary: Get students summary
      description: Get students summary
      tags:
        - Organization
      responses:
        "200":
          description: Students summary
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationStudentsSummary"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/organizationWorkspaceManagement/overview:
    get:
      operationId: getOrganizationWorkspaceOverview
      summary: Get organization workspace overview
      description: Get organization workspace overview
      tags:
        - Organization
      responses:
        "200":
          description: Organization workspace overview
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationWorkspaceSummary"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/organizationWorkspaceManagement/workspaces:
    get:
      operationId: getOrganizationWorkspaces
      summary: Get organization workspaces
      description: Get organization workspaces
      tags:
        - Organization
      parameters:
        - name: q
          in: query
          description: query string
          schema:
            type: string
        - name: subjects
          in: query
          description: Subject ids
          schema:
            type: array
            items:
              type: string
        - name: educationTypes
          in: query
          description: Education type ids
          schema:
            type: array
            items:
              type: string
        - name: curriculums
          in: query
          description: Curriculum ids
          schema:
            type: array
            items:
              type: string
        - name: publicity
          in: query
          description: Publicity restriction
          schema:
            allOf:
              - $ref: "#/components/schemas/PublicityRestriction"
            default: ONLY_PUBLISHED
        - name: templates
          in: query
          description: Template restriction
          schema:
            allOf:
              - $ref: "#/components/schemas/TemplateRestriction"
            default: ONLY_WORKSPACES
        - name: orderBy
          in: query
          description: Order by
          schema:
            type: array
            items:
              type: string
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 50
      responses:
        "200":
          description: Organization workspaces
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/organizationWorkspaceManagement/workspaces/{workspaceId}/staff:
    post:
      operationId: addStaffToWorkspace
      summary: Add staff to workspace
      description: Add staff to workspace
      tags:
        - Organization
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/OrganizationAddStaffToWorkspaceRequestBody"
      responses:
        "204":
          description: Staff added to workspace successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/organizationWorkspaceManagement/workspaces/{workspaceId}/students:
    post:
      operationId: addStudentsToWorkspace
      summary: Add students to workspace
      description: Add students to workspace
      tags:
        - Organization
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/OrganizationAddStudentsToWorkspaceRequestBody"
      responses:
        "204":
          description: Students added to workspace successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #PEDAGOGY
  /rest/pedagogy/form/{userEntityId}:
    get:
      operationId: getPedagogyForm
      summary: Get pedagogy form
      description: Get pedagogy form
      tags:
        - Pedagogy
      parameters:
        - name: userEntityId
          in: path
          description: Student user entity id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Pedagogy form
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PedagogyForm"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createPedagogyForm
      summary: Create pedagogy form
      description: Create pedagogy form
      tags:
        - Pedagogy
      parameters:
        - name: userEntityId
          in: path
          description: Student user entity id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/PedagogyFormCreateRequestBody"
      responses:
        "200":
          description: Pedagogy form created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PedagogyForm"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/pedagogy/form/{userEntityId}/access:
    get:
      operationId: getPedagogyFormAccess
      summary: Get pedagogy form access
      description: Get pedagogy form access
      tags:
        - Pedagogy
      parameters:
        - name: userEntityId
          in: path
          description: Student user entity id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Pedagogy form access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PedagogyFormAccess"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/pedagogy/form/{userEntityId}/formData:
    put:
      operationId: updatePedagogyFormData
      summary: Update pedagogy form data
      description: Update pedagogy form data
      tags:
        - Pedagogy
      parameters:
        - name: userEntityId
          in: path
          description: Student user entity id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/PedagogyFormDataUpdateRequestBody"
      responses:
        "200":
          description: Pedagogy form data updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PedagogyForm"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/pedagogy/form/{userEntityId}/state:
    get:
      operationId: getPedagogyFormState
      summary: Get pedagogy form state
      description: Get pedagogy form state
      tags:
        - Pedagogy
      parameters:
        - name: userEntityId
          in: path
          description: Student user entity id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Pedagogy form state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PedagogyFormState"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    put:
      operationId: updatePedagogyFormState
      summary: Update pedagogy form state
      description: Update pedagogy form state
      tags:
        - Pedagogy
      parameters:
        - name: userEntityId
          in: path
          description: Student user entity id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/PedagogyFormStateUpdateRequestBody"
      responses:
        "200":
          description: Pedagogy form state updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PedagogyForm"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/pedagogy/form/{userEntityId}/workspaces:
    get:
      operationId: getPedagogyFormWorkspaces
      summary: Get list of student workspaces
      description: Get list of student workspaces. Lists workspaces that student has completed or is currently working on.
      tags:
        - Pedagogy
      parameters:
        - name: userEntityId
          in: path
          description: Student user entity id
          required: true
          schema:
            type: integer
            format: int64
        - name: q
          in: query
          description: query string
          schema:
            type: string
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 50
      responses:
        "200":
          description: Pedagogy form workspaces
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PedagogyWorkspace"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #HOPSUPPERSECONDARY
  /rest/records/hops:
    get:
      operationId: getHops
      summary: Get hops
      description: Get hops
      tags:
        - HopsUpperSecondary
      responses:
        "200":
          description: Hops
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HopsUppersecondary"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    put:
      operationId: updateHops
      summary: Update hops
      description: Update hops
      tags:
        - HopsUpperSecondary
      requestBody:
        $ref: "#/components/requestBodies/HopsUppersecondaryUpdateRequestBody"
      responses:
        "200":
          description: Hops updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HopsUppersecondary"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/records/hops/{userIdentifier}:
    get:
      operationId: getHopsByUser
      summary: Get hops by user
      description: Get hops by user
      tags:
        - HopsUpperSecondary
      parameters:
        - name: userIdentifier
          in: path
          description: User identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Hops
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HopsUppersecondary"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/records/hopseligibility/{studentIdentifier}:
    get:
      operationId: getHopsEligibility
      summary: Get hops eligibility
      description: Get hops eligibility
      tags:
        - HopsUpperSecondary
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Hops eligibility
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HopsEligibility"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/records/matriculationSubjects:
    get:
      operationId: getMatriculationSubjects
      summary: Get matriculation subjects
      description: Get matriculation subjects
      tags:
        - Records
      responses:
        "200":
          description: Matriculation subjects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MatriculationSubject"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/records/studentMatriculationEligibility/{studentIdentifier}:
    get:
      operationId: getStudentMatriculationEligibility
      summary: Get student matriculation eligibility
      description: Get student matriculation eligibility
      tags:
        - Records
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student matriculation eligibility
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatriculationEligibility"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/records/students/{studentIdentifier}/students:
    get:
      operationId: getStudents
      summary: Get students
      description: Get students
      tags:
        - Records
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
        - name: includeInactiveStudents
          in: query
          description: Include inactive students
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Students results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserWithSchoolData"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/records/users/{identifier}/workspaceActivity:
    get:
      operationId: getWorkspaceActivity
      summary: Get workspace activity
      description: Get workspace activity
      tags:
        - Records
      parameters:
        - name: identifier
          in: path
          description: User identifier
          required: true
          schema:
            type: string
        - name: workspaceIdentifier
          in: query
          description: Workspace identifier
          schema:
            type: string
        - name: includeTransferCredits
          in: query
          description: String boolean
          schema:
            type: string
        - name: includeAssignmentStatistics
          in: query
          description: String boolean
          schema:
            type: string
      responses:
        "200":
          description: Workspace activity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceActivityInfo"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/records/workspaces/{workspaceId}:
    get:
      operationId: getRecordsWorkspace
      summary: Get workspace
      description: Get workspace
      tags:
        - Records
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: userIdentifier
          in: query
          required: true
          description: User identifier
          schema:
            type: string
      responses:
        "200":
          description: Workspace
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyValue"
                #$ref: "#/components/schemas/Workspace"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #SLICE INTEGRATION (STUDENTCARD)
  /rest/studentCards/studentCard/{studentIdentifier}:
    get:
      operationId: getStudentCard
      summary: Get student card
      description: Get student card
      tags:
        - StudentCards
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student card
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudentCard"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/studentCards/student/{studentIdentifier}/studentCard/{studentCardId}:
    put:
      operationId: updateStudentCard
      summary: Update student card
      description: Update student card
      tags:
        - StudentCards
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
        - name: studentCardId
          in: path
          description: Student card id
          required: true
          schema:
            type: integer
            format: int64
        - name: active
          in: query
          description: Active
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: Student card
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudentCard"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #USER
  /rest/user/files/:
    post:
      operationId: createFile
      summary: Create file
      description: Create file
      tags:
        - User
      requestBody:
        $ref: "#/components/requestBodies/UserFileCreateRequestBody"
      responses:
        "200":
          description: File created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEntityFile"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/files/{userEntityId}/identifier/{identifier}:
    delete:
      operationId: deleteFile
      summary: Delete file
      description: Delete file
      tags:
        - User
      parameters:
        - name: userEntityId
          in: path
          description: User entity id
          required: true
          schema:
            type: integer
            format: int64
        - name: identifier
          in: path
          description: File identifier
          required: true
          schema:
            type: string
      responses:
        "204":
          description: File deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/flags/:
    get:
      operationId: getFlags
      summary: Get flags
      description: Get flags
      tags:
        - User
      parameters:
        - name: ownerIdentifier
          in: query
          description: Owner identifier
          schema:
            type: string
      responses:
        "200":
          description: Flags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserFlag"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createFlag
      summary: Create flag
      description: Create flag
      tags:
        - User
      requestBody:
        $ref: "#/components/requestBodies/UserFlagCreateRequestBody"
      responses:
        "200":
          description: Flag created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFlag"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/flags/{flagId}:
    put:
      operationId: updateFlag
      summary: Update flag
      description: Update flag
      tags:
        - User
      parameters:
        - name: flagId
          in: path
          description: Flag id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/UserFlagUpdateRequestBody"

      responses:
        "200":
          description: Flag updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFlag"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    delete:
      operationId: deleteFlag
      summary: Delete flag
      description: Delete flag
      tags:
        - User
      parameters:
        - name: flagId
          in: path
          description: Flag id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Flag deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/flags/{flagId}/shares:
    get:
      operationId: getFlagShares
      summary: Get flag shares
      description: Get flag shares
      tags:
        - User
      parameters:
        - name: flagId
          in: path
          description: Flag id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Flag shares
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserSharedFlag"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createFlagShare
      summary: Create flag share
      description: Create flag share
      tags:
        - User
      parameters:
        - name: flagId
          in: path
          description: Flag id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/UserSharedFlagCreateRequestBody"
      responses:
        "200":
          description: Flag share created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSharedFlag"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/flags/{flagId}/shares/{shareId}:
    delete:
      operationId: deleteFlagShare
      summary: Delete flag share
      description: Delete flag share
      tags:
        - User
      parameters:
        - name: flagId
          in: path
          description: Flag id
          required: true
          schema:
            type: integer
            format: int64
        - name: shareId
          in: path
          description: Share id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Flag share deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/properties/{userEntityId}:
    get:
      operationId: getUserProperties
      summary: Get user properties
      description: Get user properties
      tags:
        - User
      parameters:
        - name: userEntityId
          in: path
          description: User entity id
          required: true
          schema:
            type: integer
            format: int64
        - name: properties
          in: query
          description: Properties
          schema:
            type: string
      responses:
        "200":
          description: User properties
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/property/{key}:
    get:
      operationId: getUserProperty
      summary: Get user property
      description: Get user property
      tags:
        - User
      parameters:
        - name: key
          in: path
          description: Key of the property
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User property
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/property:
    post:
      operationId: setUserProperty
      summary: Set user property
      description: Set user property
      tags:
        - User
      requestBody:
        $ref: "#/components/requestBodies/SetUserPropertyValueRequestBody"
      responses:
        "200":
          description: User property set successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyValue"
        "204":
          description: User property set successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/staffMembers:
    get:
      operationId: getStaffMembers
      summary: Get staff members
      description: Get staff members
      tags:
        - User
      parameters:
        - name: q
          in: query
          description: Search string
          schema:
            type: string
        - name: properties
          in: query
          description: Properties
          schema:
            type: string
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
        - name: workspaceEntityId
          in: query
          description: Workspace entity id
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Staff members results object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStaffSearchResult"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createStaffMember
      summary: Create staff member
      description: Create staff member
      tags:
        - User
      requestBody:
        $ref: "#/components/requestBodies/UserStaffCreateRequestBody"
      responses:
        "200":
          description: Staff member created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStaffCreatePayload"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/staffMembers/{staffMemberIdentifier}:
    put:
      operationId: updateStaffMember
      summary: Update staff member
      description: Update staff member
      parameters:
        - name: staffMemberIdentifier
          in: path
          description: Staff member identifier
          required: true
          schema:
            type: string
      tags:
        - User
      requestBody:
        $ref: "#/components/requestBodies/UserStaffUpdateRequestBody"
      responses:
        "200":
          description: Staff member updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStaffCreatePayload"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/students:
    post:
      operationId: createStudent
      summary: Create student
      description: Create student
      tags:
        - User
      requestBody:
        $ref: "#/components/requestBodies/UserStudentCreateRequestBody"
      responses:
        "200":
          description: Student created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithSchoolData"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/students/{studentId}:
    get:
      operationId: getStudent
      summary: Get student
      description: Get student
      tags:
        - User
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithSchoolData"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error
    put:
      operationId: updateStudent
      summary: Update student
      description: Update student
      tags:
        - User
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/UserStudentUpdateRequestBody"
      responses:
        "200":
          description: Student updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithSchoolData"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/students/{studentId}/addresses:
    get:
      operationId: getStudentAddresses
      summary: Get student addresses
      description: Get student addresses
      tags:
        - User
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student addresses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserStudentAddress"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/students/{studentId}/addresses/{addressId}:
    put:
      operationId: updateStudentAddress
      summary: Update student address
      description: Update student address
      tags:
        - User
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: string
        - name: addressId
          in: path
          description: Address id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/UserStudentAddressUpdateRequestBody"
      responses:
        "200":
          description: Student address updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStudentAddress"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/students/{studentIdentifier}/basicInfo:
    put:
      operationId: updateStudentBasicInfo
      summary: Update student basic info
      description: Update student basic info
      tags:
        - User
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/UserStudentBasicInfoUpdateRequestBody"
      responses:
        "200":
          description: Student basic info updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithSchoolData"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/students/{studentId}/emails:
    get:
      operationId: getStudentEmails
      summary: Get student emails
      description: Get student emails
      tags:
        - User
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student emails
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserStudentEmail"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/students/{studentId}/flags:
    get:
      operationId: getStudentFlags
      summary: Get student flags
      description: Get student flags
      tags:
        - User
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: string
        - name: ownerIdentifier
          in: query
          description: Owner identifier
          schema:
            type: string
      responses:
        "200":
          description: Student flags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserStudentFlag"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createStudentFlag
      summary: Create student flag
      description: Create student flag
      tags:
        - User
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/GuiderStudentFlagCreateRequestBody"
      responses:
        "200":
          description: Student flag created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStudentFlag"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/students/{studentId}/flags/{flagId}:
    delete:
      operationId: deleteStudentFlag
      summary: Delete student flag
      description: Delete student flag
      tags:
        - User
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: string
        - name: flagId
          in: path
          description: Flag id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Student flag deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/students/{studentId}/phoneNumbers:
    get:
      operationId: getStudentPhoneNumbers
      summary: Get student phone numbers
      description: Get student phone numbers
      tags:
        - User
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student phone numbers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserStudentPhoneNumber"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/students/{studentIdentifier}/guidanceCounselors:
    get:
      operationId: getGuidanceCounselors
      summary: Get guidance counselors
      description: Get guidance counselors
      tags:
        - User
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
        - name: properties
          in: query
          description: Properties as string divided by comma
          schema:
            type: string
      responses:
        "200":
          description: Guidance counselors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GuidanceCounselorContact"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/studyProgrammes:
    get:
      operationId: getStudyProgrammes
      summary: Get study programmes
      description: Get study programmes
      tags:
        - User
      responses:
        "200":
          description: Study programmes results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StudyProgramme"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/userInfo/{userEntityId}:
    get:
      operationId: getUserInfo
      summary: Get user info
      description: Get user info
      tags:
        - User
      parameters:
        - name: userEntityId
          in: path
          description: User entity id
          required: true
          schema:
            type: integer
            format: int64
        - name: data
          in: query
          description: Data
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: User info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/whoami:
    get:
      operationId: getWhoAmI
      summary: Get who am I
      description: Get who am I
      tags:
        - User
      responses:
        "200":
          description: Who am I
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWhoAmI"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #USERGROUP
  /rest/usergroup/addusers:
    put:
      operationId: updateUsergroupAddUsers
      summary: Add user to user group
      description: Add user to user group
      tags:
        - Usergroup
      requestBody:
        $ref: "#/components/requestBodies/UsergroupUpdateAddUsersRequestBody"
      responses:
        "204":
          description: User added to user group successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/usergroup/removeusers:
    post:
      operationId: removeUserFromUserGroup
      summary: Remove user from user group
      description: Remove user from user group
      tags:
        - Usergroup
      responses:
        "204":
          description: User removed from user group successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error
    put:
      operationId: updateUsergroupRemoveUsers
      summary: Remove user from user group
      description: Remove user from user group
      tags:
        - Usergroup
      requestBody:
        $ref: "#/components/requestBodies/UsergroupUpdateRemoveUsersRequestBody"
      responses:
        "204":
          description: User removed from user group successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/usergroup/groups:
    get:
      operationId: getUsergroups
      summary: Get user groups
      description: Get user groups
      tags:
        - Usergroup
      parameters:
        - name: userIdentifier
          in: query
          description: User identifier
          schema:
            type: string
        - name: archetype
          in: query
          description: Archetype
          schema:
            type: string
        - name: q
          in: query
          description: Search string
          schema:
            type: string
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
        - name: userGroupIds
          in: query
          description: User group ids
          schema:
            type: array
            items:
              type: integer
              format: int64
      responses:
        "200":
          description: User groups results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserGroup"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createUsergroup
      summary: Create user group
      description: Create user group
      tags:
        - Usergroup
      requestBody:
        $ref: "#/components/requestBodies/UsergroupCreateRequestBody"
      responses:
        "200":
          description: User group created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroup"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error
    put:
      operationId: updateUsergroup
      summary: Update user group
      description: Update user group
      tags:
        - Usergroup
      requestBody:
        $ref: "#/components/requestBodies/UsergroupUpdateRequestBody"
      responses:
        "204":
          description: User group updated successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/usergroup/groups/{groupId}:
    get:
      operationId: getUserGroup
      summary: Get user group
      description: Get user group
      tags:
        - Usergroup
      parameters:
        - name: groupId
          in: path
          description: User group id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: User group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroup"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/userplugin/credentials:
    get:
      operationId: getUserPluginCredentials
      summary: Get user plugin credentials
      description: Get user plugin credentials
      tags:
        - Userplugin
      responses:
        "200":
          description: User plugin credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCredential"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    put:
      operationId: updateUserPluginCredentials
      summary: Update user plugin credentials
      description: Update user plugin credentials
      tags:
        - Userplugin
      requestBody:
        $ref: "#/components/requestBodies/UserCredentialUpdateRequestBody"
      responses:
        "204":
          description: User plugin credentials updated successfully
        "403":
          description: User plugin credentials update forbidden
        "409":
          description: User plugin credentials update conflict
        "500":
          description: Internal server error

  #WORKLIST
  /rest/worklist/basePrice:
    get:
      operationId: getBasePrice
      description: Returns base price object for the given workspace. Values in the object use pattern (key-value) where key is the assessment identifier and value is the base price. Depending how many modules there is, so many key-value pairs are returned.
      tags:
        - Worklist
      parameters:
        - name: workspaceEntityId
          in: query
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Base price
          content:
            application/json:
              schema:
                type: object # <--Should use patternProperties when it is supported by generator
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/worklist/billedPrice:
    get:
      operationId: getBilledPrice
      summary: Get billed price
      tags:
        - Worklist
      parameters:
        - name: workspaceEntityId
          in: query
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: assessmentIdentifier
          in: query
          description: Assessment identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Billed price
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BilledPrice"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    put:
      operationId: updateBilledPrice
      summary: Updates billed price
      tags:
        - Worklist
      parameters:
        - name: workspaceEntityId
          in: query
          description: Worklist item id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/BilledPriceUpdateRequestBody"
      responses:
        "204":
          description: Billed price updated successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/worklist/isAvailable:
    get:
      operationId: isAvailable
      summary: Is available
      tags:
        - Worklist
      responses:
        "200":
          description: Is available
          content:
            application/json:
              schema:
                type: boolean
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/worklist/templates:
    get:
      operationId: getWorklistTemplates
      summary: Returns list of worklist templates
      tags:
        - Worklist
      responses:
        "200":
          description: Worklist templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorklistTemplate"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/worklist/updateWorklistItemsState:
    put:
      operationId: updateWorklistItemsState
      summary: Updates worklist items state
      tags:
        - Worklist
      requestBody:
        $ref: "#/components/requestBodies/WorklistItemsStateUpdateRequestBody"
      responses:
        "200":
          description: Worklist items state updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorklistItem"

        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/worklist/worklistItems:
    get:
      operationId: getWorklistItems
      summary: Returns list of worklist items
      tags:
        - Worklist
      parameters:
        - name: owner
          in: query
          description: Owner identifier
          required: true
          schema:
            type: string
        - name: beginDate
          in: query
          description: Local date in ISO format (YYYY-MM-DD)
          schema:
            type: string
        - name: endDate
          in: query
          description: Local date in ISO format (YYYY-MM-DD)
          schema:
            type: string
      responses:
        "200":
          description: Worklist items results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorklistItem"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createWorklistItem
      summary: Create worklist item
      tags:
        - Worklist
      requestBody:
        $ref: "#/components/requestBodies/WorklistItemCreateRequestBody"
      responses:
        "200":
          description: Worklist item created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorklistItem"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/worklist/worklistItems/{worklistItemId}:
    put:
      operationId: updateWorklistItem
      summary: Updates worklist item
      tags:
        - Worklist
      parameters:
        - name: worklistItemId
          in: path
          description: Worklist item id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/WorklistItemUpdateRequestBody"
      responses:
        "200":
          description: Worklist item updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorklistItem"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    delete:
      operationId: deleteWorklistItem
      summary: Deletes worklist item
      tags:
        - Worklist
      parameters:
        - name: worklistItemId
          in: path
          description: Worklist item id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Worklist item deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/worklist/worklistSummary:
    get:
      operationId: getWorklistSummary
      summary: Returns list of worklist summary items
      tags:
        - Worklist
      parameters:
        - name: owner
          in: query
          description: Search string
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Worklist summary
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorklistSummary"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #WORKSPACE
  /rest/workspace/educationTypes:
    get:
      operationId: getEducationTypes
      summary: Returns list of education types
      tags:
        - Workspace
      responses:
        "200":
          description: Education types results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EducationType"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaceTypes:
    get:
      operationId: getWorkspaceTypes
      summary: Returns list of workspace types
      tags:
        - Workspace
      responses:
        "200":
          description: Workspace types results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceType"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/:
    get:
      operationId: getWorkspaces
      summary: Returns list of workspaces. Note returned items are typed as any.
      tags:
        - Workspace
      parameters:
        - name: q
          in: query
          description: Search string
          schema:
            type: string
        - name: userId
          in: query
          description: User entity id
          schema:
            type: integer
            format: int64
        - name: userIdentifier
          in: query
          description: User identifier
          schema:
            type: string
        - name: includeInactiveWorkspaces
          in: query
          description: Include inactive workspaces
          schema:
            type: boolean
            default: false
        - name: subjects
          in: query
          description: Subjects
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: educationTypes
          in: query
          description: Education types
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: curriculums
          in: query
          description: Curriculums
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: organizations
          in: query
          description: Organizations
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: minVisits
          in: query
          description: Min visits
          schema:
            type: integer
            format: int64
        - name: publicity
          in: query
          description: Publicity restriction
          schema:
            allOf:
              - $ref: "#/components/schemas/PublicityRestriction"
            default: ONLY_PUBLISHED
        - name: templates
          in: query
          description: Template restriction
          schema:
            allOf:
              - $ref: "#/components/schemas/TemplateRestriction"
            default: ONLY_WORKSPACES
        - name: orderBy
          in: query
          description: Order by
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Workspaces results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnyValue"
                  #$ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createWorkspace
      summary: Create and returns workspace
      tags:
        - Workspace
      parameters:
        - name: sourceWorkspaceEntityId
          in: query
          description: Source workspace entity id
          schema:
            type: integer
            format: int64
        - name: sourceWorkspaceIdentifier
          in: query
          description: Source workspace identifier
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceCreateRequestBody"
      responses:
        "200":
          description: Workspace created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}:
    get:
      operationId: getWorkspace
      summary: Returns workspace by id. Note returned item is typed as any.
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error
    put:
      operationId: updateWorkspace
      summary: Update and returns workspace
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceUpdateRequestBody"
      responses:
        "200":
          description: Workspace updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error
    delete:
      operationId: deleteWorkspace
      summary: Deletes workspace
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
      #FIX
      #requestBody:
      #  content:
      #    application/json:
      #      schema:
      #        type: string
      responses:
        "204":
          description: Workspace deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/settings:
    get:
      operationId: getWorkspaceSettings
      summary: Returns workspace settings by id.
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceSettings"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error
    put:
      operationId: updateWorkspaceSettings
      summary: Updates and returns workspace settings
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceSettingsUpdateRequestBody"
      responses:
        "200":
          description: Workspace updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceSettings"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/additionalInfo:
    get:
      operationId: getWorkspaceAdditionalInfo
      summary: Returns workspace additional info
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace additional info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceAdditionalInfo"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/description:
    get:
      operationId: getWorkspaceDescription
      summary: Returns workspace description
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace description
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaterialContentNode"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/details:
    get:
      operationId: getWorkspaceDetails
      summary: Returns workspace details
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceDetails"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    put:
      operationId: updateWorkspaceDetails
      summary: Update and returns workspace details.
      description: Update and returns workspace details. Look for websocket responses "chat:room-created" (when chat is enabled) , "chat:room-deleted" (when chat is disabled), "chat:room-updated" (when room info has changed). Note that websocket responses are sent only for users that have enabled chat
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceDetailsUpdateRequestBody"
      responses:
        "200":
          description: Workspace details updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceDetails"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/help:
    get:
      operationId: getWorkspaceHelp
      summary: Returns material content nodes of workspace help
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: includeHidden # <-- ????
          in: query
          description: Include hidden
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Workspace help
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MaterialContentNode"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{urlName}/basicInfo:
    get:
      operationId: getWorkspaceBasicInfo
      summary: Returns workspace basic info
      tags:
        - Workspace
      parameters:
        - name: urlName
          in: path
          description: Workspace URL name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Workspace basic info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceBasicInfo"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/amIMember:
    get:
      operationId: amIMember
      summary: Returns boolean value indicating whether user is member of workspace
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Am I member
          content:
            application/json:
              schema:
                type: boolean
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/workspacefilecopy/{toWorkspaceId}:
    post:
      operationId: copyWorkspaceFile
      summary: Copies workspace file to another workspace
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
            format: int64
        - name: toWorkspaceId
          in: path
          description: To workspace id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace file copied successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyValue"
        "204":
          description: Workspace file copied successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/asContentNode/{workspaceMaterialNodeId}:
    get:
      operationId: getWorkspaceAsContentNode
      summary: Returns workspace material node as content node
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
            format: int64
        - name: workspaceMaterialNodeId
          in: path
          description: Workspace node id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace as content node
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaterialContentNode"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/compositeReplies:
    get:
      operationId: getWorkspaceCompositeReplies
      summary: Returns list of workspace composite replies
      description: Get workspace composite replies
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
            format: int64
        - name: userEntityId
          in: query
          description: User entity id
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace composite replies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MaterialCompositeReply"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/materialContentNodes/:
    get:
      operationId: getWorkspaceMaterialContentNodes
      summary: Returns list of workspace material content nodes
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
            format: int64
        - name: includeHidden
          in: query
          description: Include hidden
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Workspace material content nodes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MaterialContentNode"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/materialProducers:
    get:
      operationId: getWorkspaceMaterialProducers
      summary: Returns list of workspace material producers list
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace material producers results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceMaterialProducer"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createWorkspaceMaterialProducers
      summary: Creates and returns workspace material producers list
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceMaterialProducersCreateRequestBody"
      responses:
        "200":
          description: Workspace material producer created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceMaterialProducer"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/materials/:
    get:
      operationId: getWorkspaceMaterials
      summary: Returns list of workspace materials
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: parentId
          in: query
          description: Parent id
          schema:
            type: integer
            format: int64
        - name: assignmentType
          in: query
          description: Include hidden
          schema:
            $ref: "#/components/schemas/MaterialAssigmentType"
      responses:
        "200":
          description: Workspace materials results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceMaterial"
        "204":
          description: No workspace materials found
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error
    post:
      operationId: createWorkspaceMaterial
      summary: Creates and returns workspace material
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: sourceNodeId
          in: query
          description: Source node id
          schema:
            type: integer
            format: int64
        - name: targetNodeId
          in: query
          description: Target node id
          schema:
            type: integer
            format: int64
        - name: sourceWorkspaceEntityId
          in: query
          description: Source workspace entity id
          schema:
            type: integer
            format: int64
        - name: targetWorkspaceEntityId
          in: query
          description: Target workspace entity id
          schema:
            type: integer
            format: int64
        - name: copyOnlyChildren
          in: query
          description: Copy only children
          schema:
            type: boolean
            default: false
        - name: cloneMaterials
          in: query
          description: Clone materials
          schema:
            type: boolean
            default: false
        - name: updateLinkedMaterials
          in: query
          description: Update linked materials
          schema:
            type: boolean
            default: false
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceMaterialCreateRequestBody"
      responses:
        "200":
          description: Workspace material assignment created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceMaterial"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/materials/{workspaceMaterialId}:
    put:
      operationId: updateWorkspaceMaterial
      summary: Updates workspace material and returns updated workspace material
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: workspaceMaterialId
          in: path
          description: Workspace material id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceMaterialUpdateRequestBody"
      responses:
        "200":
          description: Workspace material updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceMaterial"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error
    delete:
      operationId: deleteWorkspaceMaterial
      summary: Deletes workspace material
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: workspaceMaterialId
          in: path
          description: Workspace material id
          required: true
          schema:
            type: integer
            format: int64
        - name: removeAnswers
          in: query
          description: Remove answers
          schema:
            type: boolean
            default: false
        - name: updateLinkedMaterials
          in: query
          description: Update linked materials
          schema:
            type: boolean
            default: false
      responses:
        "204":
          description: Workspace material deleted successfully
        "400":
          description: Invalid request was sent to the server
        "409":
          description: Material contains answers
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    description: Reason what caused conflict
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/materials/{workspaceMaterialId}/compositeMaterialReplies:
    get:
      operationId: getWorkspaceCompositeMaterialReplies
      summary: Returns one workspace composite material reply
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: workspaceMaterialId
          in: path
          description: Workspace material id
          required: true
          schema:
            type: integer
            format: int64
        - name: userEntityId
          in: query
          description: User entity id
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace composite material replies results object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaterialCompositeReply"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/materials/{workspaceMaterialId}/replies:
    get:
      operationId: getWorkspaceMaterialReplies
      summary: Returns list of workspace material replies
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: workspaceMaterialId
          in: path
          description: Workspace material id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace material replies results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MaterialReply"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createWorkspaceMaterialReply
      summary: Create and returns workspace material reply
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: workspaceMaterialId
          in: path
          description: Workspace material id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/MaterialReplyCreateRequestBody"
      responses:
        "200":
          description: Workspace material reply created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaterialReply"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/materials/{workspaceMaterialId}/replies/{replyId}:
    put:
      operationId: updateWorkspaceMaterialReply
      summary: Updates and returns workspace material reply
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: workspaceMaterialId
          in: path
          description: Workspace material id
          required: true
          schema:
            type: integer
            format: int64
        - name: replyId
          in: path
          description: Reply id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/MaterialReplyUpdateRequestBody"
      responses:
        "200":
          description: Workspace material reply updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaterialReply"
        "204":
          description: Workspace material reply updated successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/permissions:
    get:
      operationId: getWorkspacePermissions
      summary: Returns list of workspace permissions
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace permissions results list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/students:
    get:
      operationId: getWorkspaceStudents
      summary: Returns search result of workspace students
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: q
          in: query
          description: Search string
          required: true
          schema:
            type: string
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
        - name: active
          in: query
          description: Active
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Workspace students results object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceStudentSearchResult"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/students/{studentId}:
    get:
      operationId: getWorkspaceStudent
      summary: Returns workspace student
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace student
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceStudent"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    put:
      operationId: updateWorkspaceStudent
      summary: Update workspace student
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceStudentUpdateRequestBody"
      responses:
        "204":
          description: Workspace student updated successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/user/{userEntityId}/workspacematerial/{workspaceMaterialId}/compositeReply:
    get:
      operationId: getWorkspaceUserCompositeReply
      summary: Returns workspace material composite reply by user
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
            format: int64
        - name: userEntityId
          in: path
          description: User entity id
          required: true
          schema:
            type: integer
            format: int64
        - name: workspaceMaterialId
          in: path
          description: Workspace material id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace user composite reply
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaterialCompositeReply"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/folders/:
    post:
      operationId: createWorkspaceFolder
      summary: Creates and returns workspace folder
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceFolderCreateRequestBody"
      responses:
        "200":
          description: Workspace folder created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceFolder"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/folders/{workspaceFolderId}:
    put:
      operationId: updateWorkspaceFolder
      summary: Updates and returns workspace folder
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
            format: int64
        - name: workspaceFolderId
          in: path
          description: Folder id aka "workspaceMaterialId"
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceFolderUpdateRequestBody"
      responses:
        "200":
          description: Workspace folder updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceFolder"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error
    delete:
      operationId: deleteWorkspaceFolder
      summary: Deletes workspace folder
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
            format: int64
        - name: workspaceFolderId
          in: path
          description: Folder id aka "workspaceMaterialId"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Workspace folder deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/journal:
    get:
      operationId: getWorkspaceJournals
      summary: Get workspace journal
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 25
        - name: userEntityId
          in: query
          description: User entity id
          schema:
            type: integer
            format: int64
        - name: workspaceStudentId
          in: query
          description: Workspace student id
          schema:
            type: string
      responses:
        "200":
          description: Workspace journal
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceJournal"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createWorkspaceJournal
      summary: Create workspace journal
      description: Create workspace journal
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceJournalCreateRequestBody"
      responses:
        "200":
          description: Workspace journal created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceJournal"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/journal/{journalEntryId}:
    put:
      operationId: updateWorkspaceJournal
      summary: Update workspace journal
      description: Update workspace journal
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: journalEntryId
          in: path
          description: Journal entry id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceJournalUpdateRequestBody"
      responses:
        "200":
          description: Workspace journal updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceJournal"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    delete:
      operationId: deleteWorkspaceJournal
      summary: Delete workspace journal
      description: Delete workspace journal
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: journalEntryId
          in: path
          description: Journal entry id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Workspace journal deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/journal/{journalEntryId}/comments:
    get:
      operationId: getWorkspaceJournalComments
      summary: Get workspace journal comments
      description: Get workspace journal comments
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: journalEntryId
          in: path
          description: Journal entry id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace journal comments results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceJournalComment"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createWorkspaceJournalComment
      summary: Create workspace journal comment
      description: Create workspace journal comment
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: journalEntryId
          in: path
          description: Journal entry id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceJournalCommentCreateRequestBody"
      responses:
        "200":
          description: Workspace journal comment created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceJournalComment"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/journal/{journalEntryId}/comments/{journalCommentId}:
    put:
      operationId: updateWorkspaceJournalComment
      summary: Update workspace journal comment
      description: Update workspace journal comment
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: journalEntryId
          in: path
          description: Journal entry id
          required: true
          schema:
            type: integer
            format: int64
        - name: journalCommentId
          in: path
          description: Journal comment id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceJournalCommentUpdateRequestBody"
      responses:
        "200":
          description: Workspace journal comment updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceJournalComment"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error
    delete:
      operationId: deleteWorkspaceJournalComment
      summary: Delete workspace journal comment
      description: Delete workspace journal comment
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: journalEntryId
          in: path
          description: Journal entry id
          required: true
          schema:
            type: integer
            format: int64
        - name: journalCommentId
          in: path
          description: Journal comment id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Workspace journal comment deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/workspacefile/:
    post:
      operationId: createWorkspaceFile
      summary: Create and returns workspace file
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceFileCreateRequestBody"
      responses:
        "200":
          description: Workspace file created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceEntityFile"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/workspacefile/{fileIdentifier}:
    delete:
      operationId: deleteWorkspaceFile
      summary: Delete workspace file
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: fileIdentifier
          in: path
          description: File identifier
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Workspace file deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #WORKSPACENOTES
  /rest/workspacenotes/owner/{owner}:
    get:
      operationId: getAllWorkspaceNotes
      summary: Returns all notes from every workspace
      tags:
        - WorkspaceNotes
      parameters:
        - name: owner
          in: path
          description: Owner identifier
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace notes results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceNote"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspacenotes/workspace/{workspaceId}/owner/{owner}:
    get:
      operationId: getWorkspaceNotes
      summary: Returns all notes from selected workspace
      tags:
        - WorkspaceNotes
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
            format: int64
        - name: owner
          in: path
          description: Owner identifier
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Workspace notes results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceNote"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspacenotes/workspacenote:
    post:
      operationId: createWorkspaceNote
      summary: Creates new workspace note
      tags:
        - WorkspaceNotes
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceNoteCreateRequestBody"
      responses:
        "200":
          description: Workspace note created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceNote"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspacenotes/workspacenote/{id}:
    put:
      operationId: updateWorkspaceNote
      summary: Updates workspace note
      tags:
        - WorkspaceNotes
      parameters:
        - name: id
          in: path
          description: Workspace note id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceNoteUpdateRequestBody"
      responses:
        "200":
          description: Workspace note updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceNote"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Bad request if userEntityId is null
        "404":
          description: Workspace note not found
        "500":
          description: Internal server error
    delete:
      operationId: archiveWorkspaceNote
      summary: Archives selected workspace note
      tags:
        - WorkspaceNotes
      parameters:
        - name: id
          in: path
          description: Workspace note id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Workspace note deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

#COMPONENTS
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  #REQUEST BODIES
  requestBodies:
    AnnouncementCreateRequestBody:
      description: Announcement object
      required: true
      content:
        application/json:
          schema:
            type: object
            description: AnnouncementCreateRequestBody object
            required:
              - caption
              - content
              - startDate
              - endDate
              - publiclyVisible
              - userGroupEntityIds
              - workspaceEntityIds
            properties:
              caption:
                type: string
              content:
                type: string
              endDate:
                type: string
              publiclyVisible:
                type: boolean
              startDate:
                type: string
              temporalStatus:
                type: string
              userGroupEntityIds:
                type: array
                items:
                  type: integer
                  format: int64
              workspaceEntityIds:
                type: array
                items:
                  type: integer
                  format: int64

    AnnouncementUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: AnnouncementUpdateRequestBody object
            properties:
              archived:
                type: boolean
              caption:
                type: string
              content:
                type: string
              created:
                type: string
              endDate:
                type: string
              id:
                type: integer
                format: int64
              publiclyVisible:
                type: boolean
              publisherUserEntityId:
                type: integer
                format: int64
              startDate:
                type: string
              temporalStatus:
                type: string
              userGroupEntityIds:
                type: array
                items:
                  type: integer
                  format: int64
              workspaceEntityIds:
                type: array
                items:
                  type: integer
                  format: int64
              workspaces:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceBasicInfo"

    AssessmentRequestCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: AssessmentRequestCreateBody object
            required:
              - requestText
            properties:
              requestText:
                type: string

    ChatMessageCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: ChatMessageCreateRequestBody object
            required:
              - message
            properties:
              message:
                type: string

    ChatMessageUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: ChatMessageUpdateRequestBody object
            required:
              - message
            properties:
              message:
                type: string

    ChatRoomCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: ChatRoomCreateRequestBody object
            required:
              - name
              - description
            properties:
              name:
                type: string
              description:
                type: string

    ChatRoomUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: ChatRoomUpdateRequestBody object
            required:
              - name
              - description
            properties:
              name:
                type: string
              description:
                type: string

    ChatPublicMessageCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: ChatPublicMessageCreateRequestBody object
            required:
              - message
            properties:
              message:
                type: string

    ChatPrivateMessageCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: ChatPrivateMessageCreateRequestBody object
            required:
              - message
            properties:
              message:
                type: string

    ChatSettingsUpdateRequestBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ChatUser"

    CeeposOrderCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: CeeposOrderCreateRequestBody object
            required:
              - studentIdentifier
              - product
            properties:
              studentIdentifier:
                type: string
              product:
                $ref: "#/components/schemas/CeeposPurchaseProduct"

    CommunicatorMessageCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: CommunicatorMessageCreateRequestBody object
            required:
              - caption
              - categoryName
              - content
              - recipientIds
              - recipientGroupIds
              - recipientStudentsWorkspaceIds
              - recipientTeachersWorkspaceIds
            properties:
              caption:
                type: string
              categoryName:
                type: string
              content:
                type: string
              recipientIds:
                type: array
                items:
                  type: integer
                  format: int64
              recipientGroupIds:
                type: array
                items:
                  type: integer
                  format: int64
              recipientStudentsWorkspaceIds:
                type: array
                items:
                  type: integer
                  format: int64
              recipientTeachersWorkspaceIds:
                type: array
                items:
                  type: integer
                  format: int64

    CommunicatorMessageUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: CommunicatorMessageCreateRequestBody object
            required:
              - caption
              - categoryName
              - content
              - recipientIds
              - recipientGroupIds
              - recipientStudentsWorkspaceIds
              - recipientTeachersWorkspaceIds
            properties:
              caption:
                type: string
              categoryName:
                type: string
              content:
                type: string
              recipientIds:
                type: array
                items:
                  type: integer
                  format: int64
              recipientGroupIds:
                type: array
                items:
                  type: integer
                  format: int64
              recipientStudentsWorkspaceIds:
                type: array
                items:
                  type: integer
                  format: int64
              recipientTeachersWorkspaceIds:
                type: array
                items:
                  type: integer
                  format: int64

    CommunicatorMessageLabelRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: CommunicatorMessageLabelRequestBody object
            required:
              - labelId
            properties:
              labelId:
                type: integer
                format: int64

    CommunicatorSignatureCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: CommunicatorSignatureCreateRequestBody object
            required:
              - name
              - signature
            properties:
              name:
                type: string
              signature:
                type: string

    CommunicatorSignatureUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: CommunicatorSignatureUpdateRequestBody object
            required:
              - id
              - name
              - signature
            properties:
              id:
                type: integer
                format: int64
              name:
                type: string
              signature:
                type: string

    CommunicatorCreateLabelRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: CommunicatorCreateLabelRequestBody object
            required:
              - color
              - name
            properties:
              name:
                type: string
              color:
                type: integer
                format: int64

    CommunicatorUpdateLabelRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: CommunicatorUpdateLabelRequestBody object
            required:
              - id
              - color
              - name
            properties:
              id:
                type: integer
                format: int64
              name:
                type: string
              color:
                type: integer
                format: int64

    InterimEvaluationRequestCreateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: InterimEvaluationRequestCreateRequestBody object
            required:
              - workspaceMaterialId
              - requestText
            properties:
              workspaceMaterialId:
                type: integer
                format: int64
              requestText:
                type: string

    EvaluationSaveAssignmentAssessmentRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: EvaluationAssignmentAssessment object
            required:
              - evaluationType
              - assessorIdentifier
              - verbalAssessment
              - assessmentDate
              - audioAssessments
            properties:
              identifier:
                type: string
              evaluationType:
                $ref: "#/components/schemas/EvaluationType"
              assessorIdentifier:
                type: string
              gradingScaleIdentifier:
                type: string
              gradeIdentifier:
                type: string
              verbalAssessment:
                type: string
              assessmentDate:
                description: Unix timestamp
                type: integer
              points:
                type: number
                format: double
              audioAssessments:
                type: array
                items:
                  $ref: "#/components/schemas/AudioAssessment"

    EvaluationUpdateAssignmentAssessmentRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: EvaluationAssignmentAssessment object
            required:
              - identifier
              - evaluationType
              - assessorIdentifier
              - gradingScaleIdentifier
              - gradeIdentifier
              - verbalAssessment
              - assessmentDate
              - audioAssessments
            properties:
              identifier:
                type: string
              evaluationType:
                $ref: "#/components/schemas/EvaluationType"
              assessorIdentifier:
                type: string
              gradingScaleIdentifier:
                type: string
              gradeIdentifier:
                type: string
              verbalAssessment:
                type: string
              assessmentDate:
                description: Unix timestamp
                type: integer
              points:
                type: number
                format: double
              audioAssessments:
                type: array
                items:
                  $ref: "#/components/schemas/AudioAssessment"

    EvaluationCreateJournalFeedbackRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: EvaluationCreateJournalFeedbackRequestBody object
            required:
              - feedback
            properties:
              feedback:
                type: string

    EvaluationSaveWorkspaceUserAssessmentRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: EvaluationSaveWorkspaceUserAssessmentRequestBody object
            required:
              - assessorIdentifier
              - gradingScaleIdentifier
              - gradeIdentifier
              - assessmentDate
              - verbalAssessment
              - workspaceSubjectIdentifier
            properties:
              assessorIdentifier:
                type: string
              gradingScaleIdentifier:
                type: string
              gradeIdentifier:
                type: string
              assessmentDate:
                type: string
              verbalAssessment:
                type: string
              workspaceSubjectIdentifier:
                type: string

    EvaluationUpdateWorkspaceUserAssessmentRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: EvaluationUpdateWorkspaceUserAssessmentRequestBody object
            required:
              - identifier
              - assessorIdentifier
              - gradingScaleIdentifier
              - gradeIdentifier
              - assessmentDate
              - verbalAssessment
              - workspaceSubjectIdentifier
            properties:
              identifier:
                type: string
              assessorIdentifier:
                type: string
              gradingScaleIdentifier:
                type: string
              gradeIdentifier:
                type: string
              assessmentDate:
                type: string
              verbalAssessment:
                type: string
              workspaceSubjectIdentifier:
                type: string

    EvaluationUpdateLockAssessmentRequestBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/EvaluationAssessmentRequest"

    EvaluationSaveSupplementationRequestRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: EvaluationSaveSupplementationRequestRequestBody object
            required:
              - workspaceSubjectIdentifier
              - requestDate
              - requestText
            properties:
              requestDate:
                type: string
              requestText:
                type: string
              workspaceSubjectIdentifier:
                type: string

    EvaluationUpdateSupplementationRequestRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: EvaluationUpdateSupplementationRequestRequestBody object
            required:
              - id
              - workspaceSubjectIdentifier
              - requestDate
              - requestText
            properties:
              id:
                type: string
              requestDate:
                type: string
              requestText:
                type: string
              workspaceSubjectIdentifier:
                type: string

    DiscussionAreaCreateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: DiscussionAreaCreateRequestBody object
            required:
              - name
              - description
            properties:
              name:
                type: string
              description:
                type: string

    DiscussionWorkspaceAreaCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: DiscussionWorkspaceAreaCreateRequestBody object
            required:
              - name
              - description
            properties:
              name:
                type: string
              description:
                type: string

    DiscussionAreaUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: DiscussionAreaUpdateRequestBody object
            required:
              - name
              - description
            properties:
              name:
                type: string
              description:
                type: string

    DiscussionThreadCreateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: DiscussionThreadCreateRequestBody object
            required:
              - title
              - message
              - sticky
              - lock
              - forumAreaId
            properties:
              title:
                type: string
              message:
                type: string
              sticky:
                type: boolean
              lock:
                $ref: "#/components/schemas/DiscussionThreadLock"
              forumAreaId:
                type: integer
                format: int64

    DiscussionThreadUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/DiscussionThread"

    DiscussionThreadReplyCreateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: DiscussionThreadReplyCreateRequestBody object
            required:
              - message
            properties:
              message:
                type: string
              parentReplyId:
                type: integer
                format: int64

    DiscussionThreadReplyUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/DiscussionThreadReply"

    ContactLogCreateEventRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: GuiderContactLogCreateEventRequestBody object
            required:
              - type
              - text
              - entryDate
            properties:
              type:
                $ref: "#/components/schemas/ContactType"
              text:
                type: string
              entryDate:
                type: string

    ContactLogCreateMultipleEventRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: MultipleContactLogCreateEventRequestBody object
            required:
              - recipients
              - contactLogEntry
            properties:
              recipients:
                $ref: "#/components/schemas/ContactLogRecipientList"
              contactLogEntry:
                $ref: "#/components/schemas/ContactLogMultipleEvents"

    ContactLogUpdateEventRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: GuiderContactLogUpdateEventRequestBody object
            required:
              - type
              - text
              - entryDate
              - creatorId
            properties:
              type:
                $ref: "#/components/schemas/ContactType"
              text:
                type: string
              entryDate:
                type: string
              creatorId:
                type: integer
                format: int64

    ContactLogEventCommentCreateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: GuiderContactLogEventCommentCreateRequestBody object
            required:
              - text
              - commentDate
            properties:
              text:
                type: string
              commentDate:
                type: string

    ContactLogEventCommentUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: GuiderContactLogEventCommentUpdateRequestBody object
            required:
              - text
              - commentDate
              - creatorId
            properties:
              text:
                type: string
              commentDate:
                type: string
              creatorId:
                type: integer
                format: int64

    CredentialsUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: CredentialsUpdateRequestBody object
            required:
              - password
              - username
              - secret
            properties:
              password:
                type: string
              username:
                type: string
              secret:
                type: string

    HopsSaveRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: HopsSaveRequestBody object
            required:
              - formData
              - historyDetails
            properties:
              formData:
                description: Hops form data. Stringified JSON object.
                type: string
              historyDetails:
                description: Hops history details.
                type: string
              historyChanges:
                description: Hops history changes.
                type: string

    HopsUpdateLockRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: HopsLockRequestBody object
            required:
              - locked
            properties:
              locked:
                type: boolean

    HopsHistoryEntryUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: HopsHistoryEntryUpdateRequestBody object
            required:
              - details
            properties:
              details:
                type: string
              changes:
                type: string

    HopsGoalsUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/HopsGoals"

    AlternativeStudyOptionSaveRequestBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/AlternativeStudyOption"

    OptionalSuggestionCreateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: OptionalSuggestionCreateRequestBody object
            required:
              - subject
              - courseNumber
            properties:
              subject:
                type: string
              courseNumber:
                type: integer

    StudentCourseChoiceSaveRequestBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/StudentCourseChoice"

    StudentStudyHoursSaveRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: StudentStudyHoursSaveRequestBody object
            required:
              - studyHours
            properties:
              studyHours:
                type: integer

    ToggleSuggestionCreateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: ToggleSuggestionCreateRequestBody object
            required:
              - courseId
              - subject
              - courseNumber
            properties:
              courseId:
                type: integer
                format: int64
              subject:
                type: string
              courseNumber:
                type: integer

    ToggleSuggestionUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: ToggleSuggestionUpdateRequestBody object
            required:
              - courseId
              - subject
              - courseNumber
            properties:
              courseId:
                type: integer
                format: int64
              subject:
                type: string
              courseNumber:
                type: integer

    BinaryMaterialCreateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: BinaryMaterialCreateRequestBody object
            required:
              - title
              - contentType
              - fileId
            properties:
              title:
                type: string
              contentType:
                $ref: "#/components/schemas/AnyValue"
              fileId:
                $ref: "#/components/schemas/AnyValue"

    HtmlMaterialCreateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: HtmlMaterialCreateRequestBody object
            required:
              - title
              - contentType
            properties:
              title:
                type: string
              contentType:
                type: string

    MaterialContentUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: MaterialContentUpdateRequestBody object
            required:
              - content
              - removeAnswers
            properties:
              content:
                type: string
              removeAnswers:
                type: boolean

    MaterialUpdateRequestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AnyValue"

    MaterialProducerCreateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: MaterialProducerCreateRequestBody object
            required:
              - name
            properties:
              name:
                type: string

    MatriculationPlanUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/MatriculationPlan"

    MatriculationEnrollmentsCreateRequestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MatriculationExamEnrollment"

    MatriculationEnrollmentDraftUpdateRequestBody:
      content:
        application/json:
          schema:
            type: string

    LocalizationSetRequestBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/LocalizationLocale"

    NoteCreateRequestBody:
      required: true
      description: NoteCreateRequestBody object
      content:
        application/json:
          schema:
            type: object
            required:
              - note
              - pinned
              - recipients
            properties:
              note:
                $ref: "#/components/schemas/NoteCreationObject"
              pinned:
                type: boolean
              recipients:
                $ref: "#/components/schemas/NoteRecipientList"

    NoteUpdateRequestBody:
      required: true
      description: NoteUpdateRequestBody object
      content:
        application/json:
          schema:
            type: object
            required:
              - note
              - recipients
            properties:
              note:
                $ref: "#/components/schemas/NoteCreationObject"
              recipients:
                $ref: "#/components/schemas/NoteRecipientList"

    NoteReceiverUpdateRequestBody:
      required: true
      description: NoteReceiverUpdateRequestBody object
      content:
        application/json:
          schema:
            type: object
            required:
              - pinned
              - status
            properties:
              pinned:
                type: boolean
              status:
                $ref: "#/components/schemas/NoteStatusType"

    OrganizationAddStaffToWorkspaceRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: OrganizationAddStaffToWorkspaceRequestBody object
            properties:
              staffMemberIdentifiers:
                type: array
                items:
                  $ref: "#/components/schemas/AnyValue"

    OrganizationAddStudentsToWorkspaceRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: OrganizationAddStudentsToWorkspaceRequestBody object
            required:
              - studentIdentifiers
              - studentGroupIds
            properties:
              studentIdentifiers:
                type: array
                items:
                  type: string
              studentGroupIds:
                type: array
                items:
                  type: integer
                  format: int64

    PaidAssessmentRequestCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: PaidAssessmentRequestCreateRequestBody object
            required:
              - requestText
            properties:
              requestText:
                type: string

    PedagogyFormCreateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: PedagogyFormCreateRequestBody object
            required:
              - formData
            properties:
              formData:
                type: string

    PedagogyFormDataUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: PedagogyFormDataUpdateRequestBody object
            required:
              - formData
              - fields
              - details
            properties:
              formData:
                type: string
              fields:
                nullable: true
                type: array
                items:
                  type: string
              details:
                nullable: true
                type: string

    PedagogyFormStateUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: PedagogyFormStateUpdateRequestBody object
            required:
              - state
            properties:
              state:
                $ref: "#/components/schemas/PedagogyFormState"

    HopsUppersecondaryUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/HopsUppersecondary"

    SignupStudentToWorkspaceRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: SignupStudentToWorkspaceRequestBody object
            required:
              - message
            properties:
              id:
                type: integer
              message:
                type: string
              date:
                type: string
                format: date-time
              workspaceId:
                type: integer
              userId:
                type: integer

    UpdateCredentialsBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Credentials"

    UserCredentialUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: UserCredentialUpdateRequestBody object
            required:
              - oldPassword
              - username
              - newPassword
            properties:
              oldPassword:
                type: string
              newPassword:
                type: string
              username:
                type: string

    UserFlagCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: UserFlagCreateRequestBody object
            required:
              - name
              - color
              - description
              - ownerIdentifier
            properties:
              name:
                type: string
              color:
                type: string
              description:
                type: string
              ownerIdentifier:
                type: string

    UserFlagUpdateRequestBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/UserFlag"

    UserSharedFlagCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: UserSharedFlagCreateRequestBody object
            required:
              - flagId
              - userIdentifier
            properties:
              flagId:
                type: integer
                format: int64
              userIdentifier:
                type: string

    SetUserPropertyValueRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: SetUserPropertyValueRequestBody object
            required:
              - key
              - value
            properties:
              key:
                type: string
              value:
                $ref: "#/components/schemas/AnyValue"
              userEntityId:
                type: integer
                format: int64

    UserStaffCreateRequestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserStaffCreatePayload"

    UserStaffUpdateRequestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserStaffCreatePayload"

    UserStudentCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: UserStudentCreateRequestBody object
            required:
              - firstName
              - lastName
              - email
              - studyProgrammeIdentifier
            properties:
              firstName:
                type: string
              lastName:
                type: string
              email:
                type: string
              studyProgrammeIdentifier:
                type: string
              role:
                type: string
              ssn:
                type: string

    UserStudentUpdateRequestBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/UserWithSchoolData"

    UserStudentBasicInfoUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: UserStudentBasicInfoUpdateRequestBody object
            required:
              - identifier
              - firstName
              - lastName
              - email
            properties:
              identifier:
                type: string
              firstName:
                type: string
              lastName:
                type: string
              email:
                type: string
              ssn:
                type: string
              role:
                type: string
              studyProgrammeIdentifier:
                type: string

    UserStudentAddressUpdateRequestBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/UserStudentAddress"

    GuiderStudentFlagCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: GuiderStudentFlagCreateRequestBody object
            required:
              - flagId
              - studentIdentifier
            properties:
              flagId:
                type: integer
                format: int64
              studentIdentifier:
                type: string

    UserFileCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: UserFileCreateRequestBody object
            required:
              - name
              - contentType
              - base64Data
              - identifier
              - visibility
            properties:
              name:
                type: string
              contentType:
                type: string
              base64Data:
                type: string
              identifier:
                type: string
              visibility:
                $ref: "#/components/schemas/UserEntityFileVisibility"

    UsergroupCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: UsergroupCreateRequestBody object
            required:
              - name
              - isGuidanceGroup
            properties:
              name:
                type: string
              isGuidanceGroup:
                type: boolean

    UsergroupUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: UsergroupUpdateRequestBody object
            required:
              - identifier
              - name
              - isGuidanceGroup
            properties:
              identifier:
                type: string
              name:
                type: string
              isGuidanceGroup:
                type: boolean

    UsergroupUpdateAddUsersRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: UsergroupUpdateAddUsersRequestBody object
            required:
              - groupIdentifier
              - userIdentifiers
            properties:
              groupIdentifier:
                type: string
              userIdentifiers:
                type: array
                items:
                  type: string

    UsergroupUpdateRemoveUsersRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: UsergroupUpdateRemoveUsersRequestBody object
            required:
              - groupIdentifier
              - userIdentifiers
            properties:
              groupIdentifier:
                type: string
              userIdentifiers:
                type: array
                items:
                  type: string

    WorkspaceChatStatusUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: WorkspaceChatStatusUpdateRequestBody object
            required:
              - chatStatus
              - workspaceEntityId
            properties:
              chatStatus:
                $ref: "#/components/schemas/WorkspaceChatStatus"
              workspaceEntityId:
                type: integer
                format: int64

    WorkspaceSignUpRequestBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string

    WorkspaceStudentUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/WorkspaceStudent"

    BilledPriceUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - assessmentIdentifier
              - price
            properties:
              assessmentIdentifier:
                type: string
              price:
                type: string

    WorklistItemsStateUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: WorklistItemsStateUpdateRequestBody object
            required:
              - userIdentifier
              - beginDate
              - endDate
              - state
            properties:
              userIdentifier:
                type: string
              beginDate:
                description: Local date in ISO format (YYYY-MM-DD)
                type: string
              endDate:
                description: Local date in ISO format (YYYY-MM-DD)
                type: string
              state:
                $ref: "#/components/schemas/WorklistBillingStateType"

    WorklistItemCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: WorklistItemCreateRequestBody object
            required:
              - templateId
              - entryDate
              - description
              - price
              - factor
              - billingNumber
            properties:
              templateId:
                type: integer
                format: int64
              entryDate:
                type: string
              description:
                type: string
              price:
                type: number
                format: double
              factor:
                type: number
                format: double
              billingNumber:
                type: integer

    WorklistItemUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: WorklistItemUpdateRequestBody object
            required:
              - id
              - entryDate
              - description
              - price
              - factor
              - billingNumber
            properties:
              id:
                type: integer
                format: int64
              templateId:
                type: integer
                format: int64
              entryDate:
                description: Local date in ISO format (YYYY-MM-DD)
                type: string
              description:
                type: string
              price:
                type: number
                format: double
              factor:
                type: number
                format: double
              billingNumber:
                type: integer

    WorkspaceMaterialUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AnyValue"

    WorkspaceFolderUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AnyValue"

    WorkspaceFolderCreateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: WorkspaceFolderCreateRequestBody object
            required:
              - parentId
              - nextSiblingId
            properties:
              parentId:
                type: integer
                format: int64
              nextSiblingId:
                type: integer
                format: int64

    WorkspaceNoteCreateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: WorkspaceNoteCreateRequestBody object
            required:
              - title
              - workspaceNote
              - workspaceEntityId
            properties:
              title:
                type: string
              workspaceNote:
                type: string
              workspaceEntityId:
                type: integer
                format: int64
              nextSiblingId:
                description: Optional given to determine place in the list. if not given, the note is added to the end of the list
                type: integer
                format: int64
                nullable: true

    WorkspaceNoteUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/WorkspaceNote"

    WorkspaceJournalCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: WorkspaceJournalCreateRequestBody object
            required:
              - title
              - content
            properties:
              title:
                type: string
              content:
                type: string

    WorkspaceJournalCommentCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: WorkspaceJournalCommentCreateRequestBody object
            required:
              - journalEntryId
              - comment
            properties:
              journalEntryId:
                type: integer
                format: int64
              comment:
                type: string

    WorkspaceJournalCommentUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: WorkspaceJournalCommentUpdateRequestBody object
            required:
              - id
              - journalEntryId
              - comment
            properties:
              id:
                type: integer
                format: int64
              journalEntryId:
                type: integer
                format: int64
              comment:
                type: string

    WorkspaceJournalUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: WorkspaceJournalUpdateRequestBody object
            required:
              - id
              - title
              - content
              - workspaceEntityId
            properties:
              id:
                type: integer
                format: int64
              title:
                type: string
              content:
                type: string
              workspaceEntityId:
                type: integer
                format: int64

    WorkspaceMaterialProducersCreateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              type: string

    WorkspaceHelpCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: WorkspaceHelpCreateRequestBody object
            required:
              - materialId
              - parentId
              - nextSiblingId
            properties:
              materialId:
                type: integer
                format: int64
              parentId:
                type: integer
                format: int64
              nextSiblingId:
                type: integer
                format: int64

    WorkspaceMaterialCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: WorkspaceMaterialCreateRequestBody object
            required:
              - parentId
            properties:
              materialId:
                type: integer
                format: int64
              parentId:
                type: integer
                format: int64
              nextSiblingId:
                type: integer
                format: int64

    WorkspaceDetailsUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/WorkspaceDetails"

    WorkspaceUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AnyValue"

    WorkspaceSettingsUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/WorkspaceSettings"

    WorkspaceCreateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: WorkspaceCreateRequestBody object
            required:
              - name
            properties:
              name:
                type: string
              nameExtension:
                type: string
              description:
                type: string
              access:
                $ref: "#/components/schemas/WorkspaceAccess"

    WorkspaceFileCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: WorkspaceFileCreateRequestBody object
            required:
              - fileIdentifier
              - contentType
              - base64Data
            properties:
              fileIdentifier:
                type: string
              contentType:
                type: string
              base64Data:
                type: string

    MaterialReplyCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: MaterialReplyCreateRequestBody object
            required:
              - state
            properties:
              state:
                $ref: "#/components/schemas/MaterialCompositeReplyStateType"

    MaterialReplyUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: MaterialReplyUpdateRequestBody object
            required:
              - state
            properties:
              state:
                $ref: "#/components/schemas/MaterialCompositeReplyStateType"

    MatriculationEnrollmentStateUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: MatriculationEnrollmentStateUpdateRequestBody object
            required:
              - state
            properties:
              state:
                $ref: "#/components/schemas/MatriculationExamStudentStatus"

  #SCHEMAS
  schemas:
    AnyValue:
      description: Can be any value - string, number, boolean, array or object.

    #Null_type:
    #title: "OpenAPI 3.0 null-type ref"
    #description: "for adding nullability to a ref"
    #enum:
    #  - null

    ActivityLogType:
      type: string
      enum:
        - EVALUATION_REQUESTED
        - EVALUATION_GOTINCOMPLETED
        - EVALUATION_GOTFAILED
        - EVALUATION_GOTPASSED
        - SESSION_LOGGEDIN
        - WORKSPACE_VISIT
        - MATERIAL_EXERCISEDONE
        - MATERIAL_ASSIGNMENTDONE
        - FORUM_NEWMESSAGE
        - FORUM_NEWTHREAD
        - NOTIFICATION_ASSESMENTREQUEST
        - NOTIFICATION_NOPASSEDCOURSES
        - NOTIFICATION_SUPPLEMENTATIONREQUEST
        - NOTIFICATION_STUDYTIME
        - NOTIFICATION_NEVERLOGGEDIN
        - NOTIFICATION_NOLOGGEDINFORTWOMONTHS
        - EVALUATION_REQUEST_CANCELLED

    ActivityLogHash:
      type: object
      description: Hashmap containing activity log entries list for each key value and general list for all other entries
      required:
        - general
      properties:
        general:
          type: array
          items:
            $ref: "#/components/schemas/ActivityLogEntry"
      additionalProperties:
        type: array
        items:
          $ref: "#/components/schemas/ActivityLogEntry"

    ActivityLogEntry:
      type: object
      description: ActivityLogEntry object
      required:
        - type
        - timestamp
        - contextId
      properties:
        type:
          $ref: "#/components/schemas/ActivityLogType"
        timestamp:
          type: string
          format: date-time
        contextId:
          type: integer
          format: int64
          nullable: true

    AlternativeStudyOption:
      type: object
      description: Alternative study option
      required:
        - nativeLanguageSelection
        - religionSelection
      properties:
        nativeLanguageSelection:
          nullable: true
          type: string
        religionSelection:
          nullable: true
          type: string

    Assessment:
      type: object
      description: Assessment object
      required:
        - identifier
        - assessorIdentifier
        - gradingScaleIdentifier
        - gradeIdentifier
        - assessmentDate
        - passing
        - verbalAssessment
      properties:
        identifier:
          type: string
        assessorIdentifier:
          type: string
        gradingScaleIdentifier:
          type: string
        gradeIdentifier:
          type: string
        assessmentDate:
          type: string
        passing:
          type: boolean
        verbalAssessment:
          type: string

    AssessmentWithAudio:
      allOf:
        - $ref: "#/components/schemas/Assessment"
        - type: object
          required:
            - audioAssessments
          properties:
            audioAssessments:
              type: array
              items:
                $ref: "#/components/schemas/AudioAssessment"

    AudioAssessment:
      type: object
      description: AudioAssessment object
      required:
        - id
        - name
        - contentType
      properties:
        id:
          type: string
        name:
          type: string
        contentType:
          type: string

    Announcement:
      type: object
      description: Announcement object
      required:
        - id
        - caption
        - content
        - created
        - endDate
        - publiclyVisible
        - publisherUserEntityId
        - startDate
        - temporalStatus
        - userGroupEntityIds
        - workspaceEntityIds
        - workspaces
      properties:
        archived:
          type: boolean
        caption:
          type: string
        content:
          type: string
        created:
          type: string
        endDate:
          type: string
        id:
          type: integer
          format: int64
        publiclyVisible:
          type: boolean
        publisherUserEntityId:
          type: integer
          format: int64
        startDate:
          type: string
        temporalStatus:
          type: string
        userGroupEntityIds:
          type: array
          items:
            type: integer
            format: int64
        workspaceEntityIds:
          type: array
          items:
            type: integer
            format: int64
        workspaces:
          type: array
          items:
            $ref: "#/components/schemas/WorkspaceBasicInfo"

    AssessmentRequest:
      type: object
      description: AssessmentRequest object
      required:
        - id
        - userEntityId
        - userIdentifier
        - workspaceUserIdentifier
        - workspaceEntityId
        - requestText
        - date
        - locked
      properties:
        id:
          type: integer
          format: int64
        userEntityId:
          type: integer
          format: int64
        userIdentifier:
          type: string
        workspaceUserIdentifier:
          type: string
        workspaceEntityId:
          type: integer
          format: int64
        requestText:
          type: string
        date:
          type: string
          format: date-time
        locked:
          type: boolean

    BilledPrice:
      type: object
      required:
        - assessmentIdentifier
        - editable
        - price
      properties:
        assessmentIdentifier:
          type: string
        editable:
          type: boolean
        price:
          type: number
          format: double

    ChatActivity:
      type: object
      required:
        - targetIdentifier
        - latestMessage
      properties:
        targetIdentifier:
          description: Example "room-123" for rooms or "user-123" for private message etc.
          type: string
        latestMessage:
          description: Time when the message was sent. ISO 8601.
          type: string
          format: date-time
        unreadMessages:
          description: Number of unread messages with the user
          type: integer
          format: int64

    ChatMessage:
      type: object
      required:
        - id
        - sourceUserEntityId
        - targetIdentifier
        - targetRoomId
        - nick
        - message
        - sentDateTime
        - editedDateTime
        - archived
        - userType
      properties:
        id:
          description: Id of the message.
          type: integer
          format: int64
        sourceUserEntityId:
          description: Id of the user who sent the message.
          type: integer
          format: int64
        targetIdentifier:
          description: Example "room-123" for rooms or "user-123" for private message etc.
          type: string
        nick:
          description: Nickname of the user who sent the message.
          type: string
        hasImage:
          description: Does the user who sent the message have a profile image
          type: boolean
        message:
          description: Message content. Null if message is deleted.
          type: string
          nullable: true
        userType:
          description: Type of the user who sent the message.
          type: string
          enum:
            - STUDENT
            - STAFF
        sentDateTime:
          description: Time when the message was sent. ISO 8601.
          type: string
          format: date-time
        editedDateTime:
          description: Time when the message was edited. Null if message is not edited. ISO 8601.
          type: string
          format: date-time
          nullable: true
        archived:
          description: Whether the message is "deleted".
          type: boolean

    ChatRoom:
      type: object
      required:
        - identifier
        - name
        - description
        - type
        - workspaceEntityId
      properties:
        identifier:
          description: Identifier of the room. Example "room-123"
          type: string
        name:
          description: Name of the room. Unique.
          type: string
        description:
          description: Description of the room.
          type: string
          nullable: true
        type:
          description: Type of the room.
          type: string
          enum:
            - PUBLIC
            - WORKSPACE
        workspaceEntityId:
          description: Id of the workspace the room belongs to. Otherwise null.
          type: integer
          format: int64
          nullable: true

    ChatUser:
      type: object
      required:
        - id
        - identifier
        - nick
        - name
        - type
        - visibility
        - hasImage
        - presence
      properties:
        id:
          description: Id of the user.
          type: integer
          format: int64
        identifier:
          description: Identifier of the user. Example "user-123"
          type: string
        nick:
          description: Nickname of the user.
          type: string
          nullable: true
        name:
          description: Full name of the user with studyprogramme in parentheses.
          type: string
          nullable: true
        type:
          description: Type of the user.
          type: string
          enum:
            - STUDENT
            - STAFF
        visibility:
          description: Visibility of the user
          type: string
          enum:
            - NONE
            - STAFF
            - ALL
        hasImage:
          description: Whether the user has an image.
          type: boolean
        presence:
          description: Presence of the user
          type: string
          enum:
            - ONLINE
            - OFFLINE
            - DISABLED

    CeeposOrderStateType:
      type: string
      enum:
        - CREATED
        - CANCELLED
        - ERRORED
        - ONGOING
        - PAID
        - COMPLETE

    CeeposPurchaseCreator:
      type: object
      description: CeeposPurchaseCreator object
      required:
        - id
        - userEntityId
        - firstName
        - lastName
        - email
      properties:
        id:
          type: integer
          format: int64
        userEntityId:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string

    CeeposReturnLink:
      type: object
      description: CeeposReturnLink object
      required:
        - path
        - text
      properties:
        path:
          type: string
        text:
          type: string

    CeeposPurchaseProduct:
      type: object
      description: CeeposPurchaseProduct object. Property first letter is capital because reasons...
      required:
        - Code
        - Description
        - Price
      properties:
        Code:
          description: Product code. Note that this is with uppercase lettering cause its 3rd party API related.
          type: string
        Description:
          description: Product description. Note that this is with uppercase lettering cause its 3rd party API related.
          type: string
        Price:
          description: Product price. Note that this is with uppercase lettering cause its 3rd party API related.
          type: integer

    CeeposOrder:
      type: object
      description: CeeposOrder object
      required:
        - id
        - paid
        - created
        - product
        - state
        - studentEmail
        - studentIdentifier
        - creator
      properties:
        id:
          type: integer
          format: int64
        paid:
          type: string
          format: date-time
          nullable: true
        created:
          type: string
          format: date-time
        product:
          $ref: "#/components/schemas/CeeposPurchaseProduct"
        state:
          $ref: "#/components/schemas/CeeposOrderStateType"
        studentEmail:
          type: string
        studentIdentifier:
          type: string
        creator:
          $ref: "#/components/schemas/CeeposPurchaseCreator"

    CommunicatorSignature:
      type: object
      description: Communicator signature object
      required:
        - id
        - name
        - signature
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        signature:
          type: string

    ContactType:
      type: string
      enum:
        - OTHER
        - LETTER
        - EMAIL
        - PHONE
        - CHATLOG
        - FACE2FACE
        - ABSENCE
        - MUIKKU

    ContactLog:
      type: object
      description: GuiderContactLog object
      required:
        - totalHitCount
        - allPrivileges
        - firstResult
        - results
      properties:
        totalHitCount:
          type: integer
        allPrivileges:
          type: boolean
        firstResult:
          type: integer
        results:
          type: array
          items:
            $ref: "#/components/schemas/ContactLogEvent"

    ContactLogEvent:
      type: object
      description: GuiderContactLogEvent object
      required:
        - id
        - entryDate
        - type
        - creatorId
        - creatorName
        - hasImage
        - text
      properties:
        id:
          type: integer
          format: int64
        entryDate:
          type: string
        type:
          $ref: "#/components/schemas/ContactType"
        creatorId:
          type: integer
          format: int64
        creatorName:
          type: string
        hasImage:
          type: boolean
        text:
          type: string
        comments:
          type: array
          items:
            $ref: "#/components/schemas/ContactLogEventComment"

    ContactLogMultipleEvents:
      type: object
      description: GuiderContactLogMultipleEvents object
      required:
        - entryDate
        - type
        - text
      properties:
        entryDate:
          type: string
        type:
          $ref: "#/components/schemas/ContactType"
        text:
          type: string

    ContactLogEventComment:
      type: object
      description: GuiderContactLogEventComment object
      required:
        - id
        - entry
        - commentDate
        - creatorId
        - creatorName
        - hasImage
        - text
      properties:
        id:
          type: integer
          format: int64
        entry:
          type: integer
          format: int64
        commentDate:
          type: string
          format: date-time
        creatorId:
          type: integer
          format: int64
        creatorName:
          type: string
        text:
          type: string
        hasImage:
          type: boolean

    ContactLogRecipientList:
      type: object
      description: ContactLogRecipientList
      required:
        - recipientIds
        - recipientGroupIds
        - recipientStudentsWorkspaceIds
      properties:
        recipientIds:
          description: The list of userEntityIds
          type: array
          items:
            type: integer
        recipientGroupIds:
          description: The list of studentGroupIds
          type: array
          items:
            type: integer
        recipientStudentsWorkspaceIds:
          description: The list of workspaceIds
          type: array
          items:
            type: integer

    Curriculum:
      type: object
      description: Curriculum object
      required:
        - identifier
        - name
      properties:
        identifier:
          type: string
        name:
          type: string

    Credentials:
      type: object
      description: Credentials object
      required:
        - secret
        - username
        - password
      properties:
        secret:
          nullable: true
          type: string
        username:
          nullable: true
          type: string
        password:
          nullable: true
          type: string

    DiscussionArea:
      type: object
      description: DiscussionArea area information
      required:
        - id
        - name
        - description
        - groupId
        - numThreads
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        groupId:
          type: integer
          format: int64
        numThreads:
          type: integer

    DiscussionThread:
      type: object
      description: Thread information
      required:
        - id
        - message
        - numReplies
        - sticky
        - title
        - updated
        - lastModified
        - forumAreaId
        - entryPoint
        - creator
        - created
      properties:
        id:
          type: integer
          format: int64
        message:
          type: string
        numReplies:
          type: integer
        sticky:
          type: boolean
        title:
          type: string
        updated:
          type: string
        lastModified:
          type: string
          format: date-time
        forumAreaId:
          type: integer
          format: int64
        entryPoint:
          type: boolean
        creator:
          $ref: "#/components/schemas/DiscussionUser"
        created:
          type: string
          format: date-time
        lock:
          $ref: "#/components/schemas/DiscussionThreadLock"
        lockBy:
          description: User id of the user who locked the thread.
          nullable: true
          type: integer
        lockDate:
          description: Date when the thread was locked. Backend updates this field
          nullable: true
          type: string
          format: date-time

    DiscussionThreadReply:
      type: object
      description: DiscussionThreadReply object
      required:
        - id
        - created
        - creator
        - childReplyCount
        - deleted
        - forumAreaId
        - lastModified
        - message
        - parentReplyId
      properties:
        id:
          type: integer
          format: int64
        created:
          type: string
          format: date-time
        creator:
          $ref: "#/components/schemas/DiscussionUser"
        childReplyCount:
          type: integer
        deleted:
          type: boolean
        forumAreaId:
          type: integer
          format: int64
        lastModified:
          type: string
          format: date-time
        message:
          type: string
        parentReplyId:
          type: integer
          format: int64

    DiscussionSubscribedThread:
      type: object
      description: DiscussionSubscribedThread object
      required:
        - userEntityId
        - threadId
        - thread
      properties:
        userEntityId:
          description: Id of the user
          type: integer
          format: int64
        threadId:
          description: Id of the thread
          type: integer
          format: int64
        thread:
          $ref: "#/components/schemas/DiscussionThread"
        workspaceId:
          description: Id of the workspace
          type: integer
          format: int64
        workspaceName:
          description: Name of the workspace
          type: string
        workspaceUrlName:
          description: Url name of the workspace
          type: string

    DiscussionSubscribedArea:
      type: object
      description: DiscussionSubscribedArea object
      required:
        - userEntityId
        - areaId
        - area
      properties:
        userEntityId:
          description: Id of the user
          type: integer
          format: int64
        areaId:
          description: Id of the area
          type: integer
          format: int64
        area:
          $ref: "#/components/schemas/DiscussionArea"
        workspaceId:
          description: Id of the workspace
          type: integer
          format: int64
        workspaceName:
          description: Name of the workspace. Includes the name extension if it has one.
          type: string
        workspaceUrlName:
          description: Url name of the workspace
          type: string

    DiscussionUser:
      type: object
      description: DiscussionUser object
      required:
        - id
        - firstName
        - lastName
        - nickname
        - hasImage
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        nickname:
          type: string
        hasImage:
          type: boolean

    DiscussionThreadLock:
      type: string
      enum:
        - ALL
        - STUDENTS

    DiscussionWorkspaceStatistic:
      type: object
      description: DiscussionWorkspaceStatistic object
      required:
        - messageCount
        - latestMessage
      properties:
        messageCount:
          type: integer
        latestMessage:
          type: string
          nullable: true

    EducationType:
      type: object
      description: EducationType object
      required:
        - identifier
        - name
      properties:
        identifier:
          type: string
        name:
          type: string

    EvaluationJournalFeedback:
      type: object
      description: EvaluationJournalFeedback object
      required:
        - id
        - student
        - workspaceEntityId
        - created
        - creator
        - creatorName
        - feedback
      properties:
        id:
          description: Id of feedback
          type: integer
          format: int64
        student:
          description: userEntityId of student
          type: integer
          format: int64
        workspaceEntityId:
          type: integer
          format: int64
        created:
          type: string
        creator:
          description: id of creator
          type: integer
          format: int64
        creatorName:
          type: string
        feedback:
          type: string

    EvaluationAssessmentRequest:
      type: object
      description: EvaluationAssessmentRequest object
      required:
        - id
        - identifier
        - subjects
        - enrollmentDate
        - evaluationDate
        - assessmentRequestDate
        - assignmentsDone
        - assignmentsTotal
        - userEntityId
        - firstName
        - lastName
        - studyProgramme
        - workspaceEntityId
        - workspaceName
        - workspaceNameExtension
        - workspaceUrlName
        - workspaceUserEntityId
        - workspaceUserIdentifier
        - hasPedagogyForm
        - u18Compulsory
        - state
        - locked
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        identifier:
          type: string
          nullable: true
        subjects:
          type: array
          items:
            $ref: "#/components/schemas/WorkspaceSubject"
        enrollmentDate:
          type: string
          format: date-time
          nullable: true
        evaluationDate:
          type: string
          format: date-time
          nullable: true
        assessmentRequestDate:
          type: string
          format: date-time
          nullable: true
        assignmentsDone:
          type: integer
          nullable: true
        assignmentsTotal:
          type: integer
        userEntityId:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        studyProgramme:
          type: string
        workspaceEntityId:
          type: integer
          format: int64
        workspaceName:
          type: string
        workspaceNameExtension:
          type: string
          nullable: true
        workspaceUrlName:
          type: string
        workspaceUserEntityId:
          type: integer
          format: int64
        workspaceUserIdentifier:
          type: string
        hasPedagogyForm:
          type: boolean
        u18Compulsory:
          description: Is the student under 18yo and part of compulsory education program
          type: boolean
        state:
          $ref: "#/components/schemas/WorkspaceAssessmentStateType"
        locked:
          type: boolean

    EvaluationSupplementationRequest:
      type: object
      description: EvaluationSupplementationRequest object
      required:
        - id
        - userEntityId
        - studentEntityId
        - workspaceEntityId
        - workspaceSubjectIdentifier
        - requestDate
        - requestText
      properties:
        id:
          type: integer
          format: int64
        userEntityId:
          type: integer
          format: int64
        studentEntityId:
          type: integer
          format: int64
        workspaceEntityId:
          type: integer
          format: int64
        workspaceSubjectIdentifier:
          type: string
        requestDate:
          type: string
        requestText:
          type: string

    EvaluationEventType:
      type: string
      enum:
        - EVALUATION_PASS
        - EVALUATION_FAIL
        - EVALUATION_IMPROVED
        - EVALUATION_REQUEST
        - SUPPLEMENTATION_REQUEST
        - EVALUATION_REQUEST_CANCELLED
        - INTERIM_EVALUATION_REQUEST
        - INTERIM_EVALUATION_REQUEST_CANCELLED
        - INTERIM_EVALUATION

    EvaluationEvent:
      type: object
      description: EvaluationEvent object
      required:
        - identifier
        - author
        - date
        - grade
        - gradeIdentifier
        - student
        - text
        - type
        - workspaceSubjectIdentifier
      properties:
        identifier:
          type: string
        author:
          type: string
        date:
          type: string
          nullable: true
        grade:
          type: string
        gradeIdentifier:
          type: string
          nullable: true
        student:
          type: string
        text:
          type: string
          nullable: true
        type:
          $ref: "#/components/schemas/EvaluationEventType"
        workspaceSubjectIdentifier:
          type: string
          nullable: true

    EvaluationGradeScale:
      type: object
      description: EvaluationGradeScale object
      required:
        - id
        - name
        - passing
        - grades
        - dataSource
        - active
      properties:
        id:
          type: string
        name:
          type: string
        active:
          type: boolean
        dataSource:
          type: string
        grades:
          type: array
          items:
            $ref: "#/components/schemas/EvaluationGrade"

    EvaluationGrade:
      type: object
      description: EvaluationGrade object
      required:
        - id
        - name
        - dataSource
      properties:
        id:
          type: string
        name:
          type: string
        dataSource:
          type: string

    EvaluationType:
      type: string
      description: Evaluation type enum
      enum:
        - GRADED
        - POINTS
        - SUPPLEMENTATIONREQUEST

    FeedEntry:
      type: object
      description: FeedEntry object
      required:
        - title
        - link
        - author
        - description
        - publicationDate
        - image
        - feed
      properties:
        title:
          description: Title of the feed entry
          type: string
        link:
          description: Link to the feed entry
          type: string
        description:
          description: Description of the feed entry
          type: string
        publicationDate:
          description: Publication date of the feed entry
          type: string
          format: date-time
        image:
          description: Image url of the feed entry
          type: string
        feed:
          type: string

    UserStudentFlag:
      type: object
      description: UserStudentFlag object
      required:
        - id
        - flagId
        - flagName
        - flagColor
        - studentIdentifier
      properties:
        id:
          type: integer
          format: int64
        flagId:
          type: integer
          format: int64
        flagName:
          type: string
        flagColor:
          type: string
        studentIdentifier:
          type: string

    UserFlag:
      type: object
      description: UserFlag object
      required:
        - id
        - name
        - color
        - description
        - ownerIdentifier
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        color:
          type: string
        description:
          type: string
        ownerIdentifier:
          type: string

    UserSharedFlag:
      type: object
      description: UserSharedFlag object
      required:
        - flagId
        - id
        - user
        - userIdentifier
      properties:
        flagId:
          type: integer
          format: int64
        id:
          type: integer
          format: int64
        user:
          type: object
          required:
            - firstName
            - lastName
            - hasImage
            - nickName
            - userEntityId
            - userIdentifier
          properties:
            firstName:
              type: string
            lastName:
              type: string
            hasImage:
              type: boolean
            nickName:
              type: string
            userEntityId:
              type: integer
              format: int64
            userIdentifier:
              type: string
        userIdentifier:
          type: string

    GuidanceCounselorContact:
      type: object
      description: GuidanceCounselorContact object
      required:
        - id
        - email
        - userEntityId
        - firstName
        - lastName
        - hasImage
        - groupAdvisor
        - studyAdvisor
        - properties
      properties:
        id:
          type: string
        email:
          type: string
        userEntityId:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        hasImage:
          type: boolean
        groupAdvisor:
          type: boolean
        studyAdvisor:
          type: boolean
        properties:
          $ref: "#/components/schemas/AnyValue"

    GuiderStudentNotification:
      type: object
      description: GuiderStudentNotification object
      properties:
        studytime:
          type: string
        nopassedcourses:
          type: string
        assessmentrequest:
          type: string

    HopsLocked:
      type: object
      description: Gives information about whether the Hops is locked and who locked it.
      required:
        - locked
        - userEntityId
        - userName
      properties:
        locked:
          type: boolean
        userEntityId:
          type: integer
          format: int64
        userName:
          type: string

    HopsHistoryEntry:
      type: object
      description: HopsHistoryEntry object
      required:
        - id
        - details
        - changes
        - date
        - modifier
        - modifierId
        - modifierHasImage
      properties:
        id:
          type: integer
          format: int64
        details:
          type: string
          nullable: true
        changes:
          type: string
        date:
          type: string
          format: date-time
        modifier:
          type: string
        modifierId:
          type: integer
          format: int64
        modifierHasImage:
          type: boolean

    HopsUppersecondary:
      type: object
      description: HopsUppersecondary object
      required:
        - goalSecondarySchoolDegree
        - goalMatriculationExam
        - vocationalYears
        - goalJustMatriculationExam
        - justTransferCredits
        - transferCreditYears
        - completionYears
        - mathSyllabus
        - finnish
        - swedish
        - english
        - german
        - french
        - italian
        - spanish
        - science
        - religion
        - studentMatriculationSubjects
        - optedIn
      properties:
        goalSecondarySchoolDegree:
          type: string
          enum:
            - "yes"
            - "no"
            - "maybe"
        goalMatriculationExam:
          type: string
          enum:
            - "yes"
            - "no"
            - "maybe"
        vocationalYears:
          description: defined as a string, but this is actually a number
          type: string
        goalJustMatriculationExam:
          type: string
          enum:
            - "yes"
            - "no"
        justTransferCredits:
          description: defined as a string, but this is actually a number
          type: string
        transferCreditYears:
          description: defined as a string, but this is actually a number
          type: string
        completionYears:
          description: defined as a string, but this is actually a number
          type: string
        mathSyllabus:
          type: string
          enum:
            - MAA
            - MAB
        finnish:
          type: string
          enum:
            - AI
            - S2
        swedish:
          type: boolean
        english:
          type: boolean
        german:
          type: boolean
        french:
          type: boolean
        italian:
          type: boolean
        spanish:
          type: boolean
        science:
          type: string
          enum:
            - BI
            - FY
            - KE
            - GE
        religion:
          type: string
          enum:
            - UE
            - ET
            - UX
        studentMatriculationSubjects:
          type: array
          items:
            type: string
        optedIn:
          type: boolean
        additionalInfo:
          type: string

    HopsEligibility:
      type: object
      description: HopsEligibility object
      required:
        - upperSecondarySchoolCurriculum
      properties:
        upperSecondarySchoolCurriculum:
          type: boolean

    HopsGoals:
      type: object
      description: HopsGoals object
      required:
        - graduationGoal
        - followUpGoal
      properties:
        graduationGoal:
          nullable: true
          type: string
          format: date-time
        followUpGoal:
          type: string
        followUpStudies:
          type: string
        followUpStudiesElse:
          type: string
        studySector:
          type: string
        studySectorElse:
          type: string
        followUpPlanExtraInfo:
          type: string

    InterimEvaluationRequest:
      type: object
      description: InterimEvaluationRequest object
      required:
        - id
        - userEntityId
        - workspaceEntityId
        - workspaceMaterialId
        - requestDate
        - cancellationDate
        - requestText
        - archived
      properties:
        id:
          type: integer
          format: int64
        userEntityId:
          type: integer
          format: int64
        workspaceEntityId:
          type: integer
          format: int64
        workspaceMaterialId:
          type: integer
          format: int64
        requestDate:
          type: string
          format: date-time
        cancellationDate:
          type: string
          format: date-time
        requestText:
          type: string
        archived:
          type: boolean

    LocaleType:
      type: string
      enum:
        - en
        - fi

    LocalizationLocale:
      type: object
      description: LocalizationLocale object
      required:
        - lang
      properties:
        lang:
          $ref: "#/components/schemas/LocaleType"

    MatriculationEligibilityStatus:
      type: string
      enum:
        - ELIGIBLE
        - NOT_ELIGIBLE

    MatriculationEligibility:
      type: object
      description: MatriculationEligibility object
      required:
        - status
        - coursesCompleted
        - coursesRequired
        - creditPoints
        - creditPointsRequired
        - personHasCourseAssessments
      properties:
        status:
          $ref: "#/components/schemas/MatriculationEligibilityStatus"
        coursesCompleted:
          type: integer
        coursesRequired:
          type: integer
        creditPoints:
          type: number
        creditPointsRequired:
          type: number
        personHasCourseAssessments:
          description: True, if the person has ever completed a course
          type: boolean

    MatriculationSubjectEligibilityOPS2021:
      type: object
      description: Matriculation eligibility by subject
      required:
        - eligible
        - requiredPassingGradeCourseCreditPoints
        - passingGradeCourseCreditPoints
      properties:
        eligible:
          description: If the subject is eligible for matriculation exam
          type: boolean
        requiredPassingGradeCourseCreditPoints:
          description: Number of required passing credit points for the subject
          type: number
          format: double
          nullable: true
        passingGradeCourseCreditPoints:
          description: Number of passing credit points for the subject the student has
          type: number
          format: double
          nullable: true

    MatriculationSubject:
      type: object
      description: MatriculationSubject object
      required:
        - code
        - subjectCode
      properties:
        code:
          type: string
        subjectCode:
          type: string

    MatriculationExamDegreeType:
      type: string
      enum:
        - MATRICULATIONEXAMINATION
        - MATRICULATIONEXAMINATIONSUPPLEMENT
        - SEPARATEEXAM

    MatriculationExamDegreeStructure:
      type: string
      enum:
        - PRE2022
        - POST2022

    MatriculationExamSchoolType:
      type: string
      enum:
        - UPPERSECONDARY
        - VOCATIONAL
        - UPPERSECONDARYANDVOCATIONAL
        - UNKNOWN

    MatriculationExamEnrollment:
      type: object
      description: MatriculationExamEnrollment object
      required:
        - examId
        - studentIdentifier
        - guider
        - enrollAs
        - degreeType
        - restartExam
        - numMandatoryCourses
        - location
        - contactInfoChange
        - message
        - degreeStructure
        - canPublishName
        - state
        - attendances
      properties:
        id:
          type: integer
          format: int64
        examId:
          type: integer
          format: int64
        studentIdentifier:
          type: string
        guider:
          type: string
        enrollAs:
          $ref: "#/components/schemas/MatriculationExamSchoolType"
        degreeType:
          $ref: "#/components/schemas/MatriculationExamDegreeType"
        restartExam:
          type: boolean
        numMandatoryCourses:
          type: integer
        location:
          type: string
        contactInfoChange:
          type: string
        message:
          type: string
        degreeStructure:
          $ref: "#/components/schemas/MatriculationExamDegreeStructure"
        canPublishName:
          type: boolean
        state:
          $ref: "#/components/schemas/MatriculationExamStudentStatus"
        attendances:
          type: array
          items:
            $ref: "#/components/schemas/MatriculationExamAttendance"
        enrollmentDate:
          type: string
          format: date-time

    MatriculationExamStudentStatus:
      description: Status of a student in relation to an matriculation exam
      type: string
      enum:
        - NOT_ELIGIBLE
        - ELIGIBLE
        - PENDING
        - SUPPLEMENTATION_REQUEST
        - SUPPLEMENTED
        - APPROVED
        - REJECTED
        - CONFIRMED

    MatriculationExamTerm:
      description: Matriculation exam term, either autumn or spring
      type: string
      enum:
        - AUTUMN
        - SPRING

    MatriculationExamListFilter:
      type: string
      enum:
        - ALL
        - ELIGIBLE
        - PAST

    MatriculationExamEnrollmentChangeLogType:
      type: string
      enum:
        - ENROLLMENT_CREATED
        - ENROLLMENT_UPDATED
        - STATE_CHANGED

    MatriculationExam:
      type: object
      description: MatriculationExam object
      required:
        - id
        - starts
        - ends
        - compulsoryEducationEligible
        - studentStatus
      properties:
        id:
          type: integer
          format: int64
        year:
          type: integer
        term:
          $ref: "#/components/schemas/MatriculationExamTerm"
        starts:
          type: string
        ends:
          type: string
        compulsoryEducationEligible:
          type: boolean
        studentStatus:
          $ref: "#/components/schemas/MatriculationExamStudentStatus"
        enrollment:
          $ref: "#/components/schemas/MatriculationExamEnrollment"

    MatriculationExamChangeLogEntry:
      type: object
      description: MatriculationExamChangeLogEntry object
      required:
        - timestamp
        - changeType
        - newState
        - message
      properties:
        modifier:
          $ref: "#/components/schemas/UserBasicInfo"
        timestamp:
          type: string
          format: date-time
        changeType:
          $ref: "#/components/schemas/MatriculationExamEnrollmentChangeLogType"
        newState:
          $ref: "#/components/schemas/MatriculationExamStudentStatus"
          nullable: true
        message:
          type: string
          nullable: true

    MatriculationStudent:
      type: object
      description: MatriculationStudent object
      required:
        - address
        - email
        - guidanceCounselor
        - locality
        - name
        - phone
        - postalCode
        - studentIdentifier
      properties:
        address:
          type: string
        email:
          type: string
        guidanceCounselor:
          description: Name of the student's guidance counselor
          type: string
        locality:
          type: string
        name:
          type: string
        phone:
          type: string
        postalCode:
          type: string
        studentIdentifier:
          type: string
        completedCreditPointsCount:
          description: Number of completed credit points
          type: number
          format: double

    MatriculationAttendanceStatusType:
      type: string
      enum:
        - ENROLLED
        - FINISHED
        - PLANNED

    MatriculationExamFundingType:
      type: string
      enum:
        - SELF_FUNDED
        - COMPULSORYEDUCATION_FREE
        - COMPULSORYEDUCATION_FREE_RETRY

    MatriculationExamGrade:
      type: string
      enum:
        - IMPROBATUR
        - APPROBATUR
        - LUBENTER_APPROBATUR
        - CUM_LAUDE_APPROBATUR
        - MAGNA_CUM_LAUDE_APPROBATUR
        - EXIMIA_CUM_LAUDE_APPROBATUR
        - LAUDATUR
        - UNKNOWN
        - NO_RIGHT_TO_PARTICIPATE
        - INVALIDATED
        - K

    MatriculationGrade:
      type: object
      description: MatriculationEvaluatedSubject object
      required:
        - subject
        - grade
        - gradeDate
        - term
        - year
      properties:
        subject:
          type: string
          description: Subject code. Example "AI" etc...
        grade:
          $ref: "#/components/schemas/MatriculationExamGrade"
        gradeDate:
          type: string
          format: date
        term:
          $ref: "#/components/schemas/MatriculationExamTerm"
        year:
          type: integer

    MatriculationExamEnrolledSubject:
      type: object
      description: MatriculationExamEnrolledSubject object
      required:
        - subject
        - mandatory
        - repeat
        - status
        - funding
      properties:
        id:
          type: integer
          format: int64
          description: Id of the subject.
        subject:
          type: string
          description: Subject code. Example "AI" etc...
        mandatory:
          type: boolean
          description: Is the subject mandatory.
        repeat:
          type: boolean
          description: If exam for that specific subject is already done before.
        status:
          $ref: "#/components/schemas/MatriculationAttendanceStatusType"
        funding:
          $ref: "#/components/schemas/MatriculationExamFundingType"

    MatriculationExamFinishedSubject:
      type: object
      description: MatriculationExamFinishedSubject object
      required:
        - term
        - year
        - subject
        - mandatory
        - grade
        - status
      properties:
        id:
          type: integer
          format: int64
          description: Id of the subject.
        term:
          type: string
          description: Term of the exam. Example "AUTUMN" or "SPRING"
        year:
          type: integer
          description: Year of the exam.
        subject:
          type: string
          description: Subject code. Example "AI" etc...
        mandatory:
          type: boolean
          description: Is the subject mandatory.
        grade:
          type: string
          description: Grade of the exam.
        status:
          $ref: "#/components/schemas/MatriculationAttendanceStatusType"
        funding:
          $ref: "#/components/schemas/MatriculationExamFundingType"

    MatriculationExamPlannedSubject:
      type: object
      description: MatriculationExamPlannedSubject object
      required:
        - term
        - year
        - subject
        - mandatory
        - status
      properties:
        id:
          type: integer
          format: int64
          description: Id of the subject.
        term:
          type: string
          description: Term of the exam. Example "AUTUMN" or "SPRING"
        year:
          type: integer
          description: Year of the exam.
        subject:
          type: string
          description: Subject code. Example "AI" etc...
        mandatory:
          type: boolean
          description: Is the subject mandatory.
        status:
          $ref: "#/components/schemas/MatriculationAttendanceStatusType"
        funding:
          $ref: "#/components/schemas/MatriculationExamFundingType"

    MatriculationExamAttendance:
      discriminator:
        propertyName: status
        mapping:
          ENROLLED: "#/components/schemas/MatriculationExamEnrolledSubject"
          FINISHED: "#/components/schemas/MatriculationExamFinishedSubject"
          PLANNED: "#/components/schemas/MatriculationExamPlannedSubject"
      oneOf:
        - $ref: "#/components/schemas/MatriculationExamEnrolledSubject"
        - $ref: "#/components/schemas/MatriculationExamFinishedSubject"
        - $ref: "#/components/schemas/MatriculationExamPlannedSubject"

    MatriculationPlan:
      type: object
      description: MatriculationPlan object
      required:
        - goalMatriculationExam
        - plannedSubjects
      properties:
        goalMatriculationExam:
          type: boolean
        plannedSubjects:
          type: array
          items:
            $ref: "#/components/schemas/MatriculationPlanSubject"

    MatriculationPlanSubject:
      type: object
      description: MatriculationPlanSubject object
      required:
        - subject
      properties:
        subject:
          type: string
        term:
          $ref: "#/components/schemas/MatriculationExamTerm"
        year:
          type: integer

    MatriculationResults:
      type: object
      description: MatriculationResults object
      required:
        - subjectCode
        - grades
      properties:
        subjectCode:
          type: string
        grades:
          type: array
          items:
            $ref: "#/components/schemas/MatriculationGrade"

    MaterialReply:
      type: object
      description: MaterialReply object
      required:
        - id
        - state
      properties:
        id:
          description: The id of the material reply
          type: integer
          format: int64
        state:
          description: State of the material assignment
          $ref: "#/components/schemas/MaterialCompositeReplyStateType"

    MaterialEvaluationGradeType:
      description: Material evaluation grade type enum
      type: string
      enum:
        - PASSED
        - INCOMPLETE
        - FAILED

    MaterialEvaluationInfo:
      type: object
      description: Evaluation info of the material assignments
      required:
        - id
        - type
        - evaluationType
        - text
        - grade
        - date
        - audioAssessments
      properties:
        id:
          description: The id of the evaluation
          type: integer
          format: int64
        type:
          description: Type of grade given
          $ref: "#/components/schemas/MaterialEvaluationGradeType"
        evaluationType:
          description: Type of the evaluation
          $ref: "#/components/schemas/EvaluationType"
        text:
          description: Verbal assessment of the student's material assignment
          type: string
          nullable: true
        grade:
          description: Grade that is used in the evaluation
          type: string
          nullable: true
        date:
          description: Date when the evaluation was done
          type: string
          format: date-time
        points:
          description: Points given for the assignment
          type: number
          format: double
          nullable: true
        audioAssessments:
          description: Audio assessments of the material
          type: array
          items:
            $ref: "#/components/schemas/AudioAssessment"

    MaterialAnswer:
      type: object
      description: MaterialAnswer object
      required:
        - embedId
        - fieldName
        - materialId
        - value
        - workspaceMaterialId
      properties:
        embedId:
          description: Id of the answer field
          type: string
        fieldName:
          description: Name of the answer field
          type: string
        materialId:
          description: The id of the material
          type: integer
          format: int64
        value:
          description: Value of the answer
          type: string
        workspaceMaterialId:
          description: The id of the workspace material
          type: integer
          format: int64

    MaterialCompositeReplyStateType:
      description: Material composite reply state type enum
      type: string
      enum:
        - UNANSWERED
        - ANSWERED
        - SUBMITTED
        - WITHDRAWN
        - PASSED
        - FAILED
        - INCOMPLETE

    MaterialCompositeReply:
      type: object
      description: MaterialCompositeReply object
      required:
        - answers
        - state
        - created
        - lastModified
        - submitted
        - workspaceMaterialId
        - workspaceMaterialReplyId
      properties:
        answers:
          description: Answers of the material assignment
          type: array
          items:
            $ref: "#/components/schemas/MaterialAnswer"
        state:
          description: State of the material assignment
          $ref: "#/components/schemas/MaterialCompositeReplyStateType"
        evaluationInfo:
          description: Evaluation info of the material assignments
          $ref: "#/components/schemas/MaterialEvaluationInfo"
          nullable: true
        created:
          description: Date when the material assignment was created
          type: string
          format: date-time
        lastModified:
          description: Date when the material assignment was last modified
          type: string
          format: date-time
        submitted:
          description: Date when the material assignment was submitted
          type: string
          format: date-time
          nullable: true
        withdrawn:
          description: Date when the material assignment was withdrawn
          type: string
          format: date-time
        workspaceMaterialId:
          description: The id of the workspace material
          type: integer
          format: int64
        workspaceMaterialReplyId:
          description: The id of the workspace material reply
          type: integer
          format: int64

    MaterialAssigmentType:
      description: Material assignment type enum
      type: string
      enum:
        - EXERCISE
        - EVALUATED
        - JOURNAL
        - INTERIM_EVALUATION

    MaterialViewRestriction:
      description: Material view restriction enum
      type: string
      enum:
        - NONE
        - LOGGED_IN
        - WORKSPACE_MEMBERS

    MaterialAnswersType:
      description: Material answers type enum
      type: string
      enum:
        - ALWAYS
        - ON_REQUEST
        - NEVER

    MaterialEvaluation:
      type: object
      description: MaterialEvaluation object
      required:
        - id
        - evaluated
        - assessorEntityId
        - studentEntityId
        - workspaceMaterialId
        - gradingScaleIdentifier
        - gradingScaleSchoolDataSource
        - grade
        - gradeIdentifier
        - gradeSchoolDataSource
        - gradingScale
        - verbalAssessment
        - passed
        - audioAssessments
      properties:
        id:
          description: The id of the evaluation
          type: integer
          format: int64
        evaluated:
          description: Date when the evaluation was done
          type: string
        assessorEntityId:
          description: The id of the assessor
          type: integer
          format: int64
        studentEntityId:
          description: The id of the student
          type: integer
          format: int64
        workspaceMaterialId:
          description: The id of the workspace material
          type: integer
          format: int64
        gradingScaleIdentifier:
          description: Grading scale identifier that is used in the evaluation
          type: string
        gradingScaleSchoolDataSource:
          description: Grading scale school data source
          nullable: true
          type: string
        grade:
          description: Grade that is used in the evaluation
          nullable: true
          type: string
        gradeIdentifier:
          description: Grade identifier that is used in the evaluation
          nullable: true
          type: string
        gradeSchoolDataSource:
          description: Grade school data source
          nullable: true
          type: string
        gradingScale:
          description: Grading scale that is used in the evaluation
          nullable: true
          type: string
        verbalAssessment:
          description: Verbal assessment of the student's material assignment
          type: string
        passed:
          description: Whether the student passed evaluation
          type: boolean
        audioAssessments:
          description: Audio assessments of the material
          type: array
          items:
            $ref: "#/components/schemas/AudioAssessment"

    MaterialProducer:
      type: object
      description: MaterialProducer information
      required:
        - id
        - name
        - materialId
      properties:
        id:
          description: The id of the producer
          type: integer
          format: int64
        name:
          description: The name of the producer
          type: string
        materialId:
          description: The id of the material
          type: integer
          format: int64

    Material:
      type: object
      description: Material is the representation of one Material
      properties:
        id:
          description: The id of the material
          type: integer
          format: int64
        title:
          description: The title of the material
          type: string
        license:
          description: The license of the material
          type: string
        viewRestrict:
          description: The view restriction of the material
          $ref: "#/components/schemas/MaterialViewRestriction"

    MaterialHtml:
      type: object
      description: MaterialHtml is the representation of a Material content, that contains html
      required:
        - id
        - title
        - license
        - viewRestrict
        - html
        - contentType
      properties:
        id:
          description: The id of the material
          type: integer
          format: int64
        title:
          description: The title of the material
          type: string
        license:
          description: The license of the material
          type: string
        viewRestrict:
          description: The view restriction of the material
          $ref: "#/components/schemas/MaterialViewRestriction"
        html:
          description: HTML content of the material
          type: string
        contentType:
          description: The content type of the html
          type: string

    MaterialBinary:
      type: object
      description: MaterialBinary is the representation of a Material content, that contaings binary data
      required:
        - id
        - title
        - license
        - viewRestrict
        - fileId
        - contentType
      properties:
        id:
          description: The id of the material
          type: integer
          format: int64
        title:
          description: The title of the material
          type: string
        license:
          description: The license of the material
          type: string
        viewRestrict:
          description: The view restriction of the material
          $ref: "#/components/schemas/MaterialViewRestriction"
        fileId:
          description: The id of the file
          type: string
        contentType:
          description: The content type of the binary data
          type: string

    MaterialContentNode:
      type: object
      description: Holds all the information about one material page.
      required:
        - title
        - license
        - viewRestrict
        - html
        - contentType
        - contentHiddenForUser
        - assignmentType
      properties:
        title:
          description: The title of the material
          type: string
        license:
          description: The license of the material
          type: string
        viewRestrict:
          description: The view restriction of the material
          $ref: "#/components/schemas/MaterialViewRestriction"
        html:
          description: HTML content of the page
          type: string
        contentType:
          description: The content type of the page
          type: string
        contentHiddenForUser:
          description: Is the content hidden for the user
          type: boolean
        titleLanguage:
          description: The language of the title
          allOf:
            - $ref: "#/components/schemas/Language"
        type:
          description: The type of the page
          type: string
        children:
          description: The children of the page.
          type: array
          items:
            $ref: "#/components/schemas/MaterialContentNode"
        workspaceMaterialId:
          description: The id of the workspace material
          type: integer
          format: int64
        materialId:
          description: The id of the material
          type: integer
          format: int64
        level:
          description: The level of the node in the tree construct
          type: integer
        assignmentType:
          description: The type of the assignment
          allOf:
            - $ref: "#/components/schemas/MaterialAssigmentType"
          nullable: true
        correctAnswers:
          description: The correct answers of the assignment
          $ref: "#/components/schemas/MaterialAnswersType"
        hidden:
          description: Is the page hidden
          type: boolean
        parentId:
          description: The id of the parent node
          type: integer
          format: int64
        nextSiblingId:
          description: The id of the next sibling node
          type: integer
          format: int64
        path:
          description: The path of the node
          type: string
        producers:
          description: The producers of the material
          type: array
          items:
            $ref: "#/components/schemas/MaterialProducer"
        maxPoints:
          type: number
          format: double

    Message:
      type: object
      description: Message object
      required:
        - id
        - senderId
        - communicatorMessageId
        - caption
        - categoryName
        - content
        - created
        - recipientCount
        - recipients
        - sender
        - tags
        - userGroupRecipients
        - workspaceRecipients
      properties:
        id:
          type: integer
          format: int64
        senderId:
          type: integer
          format: int64
        communicatorMessageId:
          type: integer
          format: int64
        caption:
          type: string
        categoryName:
          type: string
        content:
          type: string
        created:
          type: string
        recipientCount:
          type: integer
        recipients:
          type: array
          items:
            $ref: "#/components/schemas/CommunicatorUserBasicInfo"
        sender:
          $ref: "#/components/schemas/CommunicatorUserBasicInfo"
        tags:
          $ref: "#/components/schemas/AnyValue"
        userGroupRecipients:
          type: array
          items:
            $ref: "#/components/schemas/UserGroup"
        workspaceRecipients:
          type: array
          items:
            $ref: "#/components/schemas/MessageRecipientWorkspace"

    MessageThread:
      type: object
      description: Message thread object
      required:
        - id
        - senderId
        - communicatorMessageId
        - caption
        - categoryName
        - created
        - sender
        - tags
        - threadLatestMessageDate
        - messageCountInThread
        - labels
      properties:
        id:
          type: integer
          format: int64
        senderId:
          type: integer
          format: int64
        communicatorMessageId:
          type: integer
          format: int64
        caption:
          type: string
        categoryName:
          type: string
        created:
          type: string
        sender:
          $ref: "#/components/schemas/CommunicatorUserBasicInfo"
        tags:
          $ref: "#/components/schemas/AnyValue"
        unreadMessagesInThread:
          type: boolean
        threadLatestMessageDate:
          type: string
        messageCountInThread:
          type: integer
        labels:
          type: array
          items:
            $ref: "#/components/schemas/MessageThreadLabel"
        recipients:
          type: array
          items:
            $ref: "#/components/schemas/CommunicatorUserBasicInfo"
        userGroupRecipients:
          type: array
          items:
            $ref: "#/components/schemas/UserGroup"
        workspaceRecipients:
          type: array
          items:
            $ref: "#/components/schemas/MessageRecipientWorkspace"

    MessageThreadExpanded:
      type: object
      description: Message thread expanded object
      required:
        - messages
        - labels
      properties:
        olderThreadId:
          type: integer
          format: int64
        newerThreadId:
          type: integer
          format: int64
        messages:
          type: array
          items:
            $ref: "#/components/schemas/Message"
        labels:
          type: array
          items:
            $ref: "#/components/schemas/MessageThreadLabel"

    MessageThreadLabel:
      type: object
      description: Message thread label object
      required:
        - id
        - labelName
        - labelColor
        - labelId
        - messageThreadId
        - userEntityId
      properties:
        id:
          type: integer
          format: int64
        labelName:
          type: string
        labelColor:
          type: integer
        labelId:
          type: integer
          format: int64
        messageThreadId:
          type: integer
          format: int64
        userEntityId:
          type: integer
          format: int64

    MessageRecipientWorkspace:
      type: object
      description: RecipientWorkspace object
      required:
        - workspaceName
        - workspaceEntityId
        - archetype
      properties:
        workspaceName:
          type: string
        workspaceEntityId:
          type: integer
          format: int64
        archetype:
          type: string
        workspaceExtension:
          type: string

    MessageSearchResult:
      type: object
      description: Message search result object
      required:
        - id
        - senderId
        - communicatorMessageId
        - caption
        - created
        - readByReceiver
        - folder
        - labels
        - sender
        - tags
        - recipients
        - userGroupRecipients
        - workspaceRecipients
      properties:
        id:
          type: integer
          format: int64
        senderId:
          type: integer
          format: int64
        communicatorMessageId:
          type: integer
          format: int64
        caption:
          type: string
        created:
          type: string
        readByReceiver:
          type: boolean
        folder:
          $ref: "#/components/schemas/MessageFolder"
        labels:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
              labelName:
                type: string
              labelColor:
                type: integer
                format: int64
        sender:
          $ref: "#/components/schemas/CommunicatorUserBasicInfo"
        tags:
          $ref: "#/components/schemas/AnyValue"
        recipients:
          type: array
          items:
            $ref: "#/components/schemas/CommunicatorUserBasicInfo"
        userGroupRecipients:
          type: array
          items:
            $ref: "#/components/schemas/UserGroup"
        workspaceRecipients:
          type: array
          items:
            $ref: "#/components/schemas/MessageRecipientWorkspace"

    MessageFolder:
      type: string
      enum:
        - INBOX
        - SENT
        - TRASH

    Note:
      type: object
      description: Note object
      required:
        - title
        - description
        - type
        - priority
        - isActive
        - isArchived
        - creator
        - creatorName
        - created
        - startDate
        - dueDate
        - recipients
        - multiUserNote
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        type:
          $ref: "#/components/schemas/NoteCreationType"
        priority:
          $ref: "#/components/schemas/NotePriorityType"
        isActive:
          type: boolean
        isArchived:
          type: boolean
        creator:
          type: integer
          format: int64
        creatorName:
          type: string
        created:
          type: string
        startDate:
          type: string
        dueDate:
          type: string
        recipients:
          type: array
          items:
            $ref: "#/components/schemas/NoteReceiver"
        multiUserNote:
          type: boolean

    NoteCreationObject:
      type: object
      description: Note object
      required:
        - title
        - type
        - description
        - priority
        - startDate
      properties:
        title:
          type: string
        description:
          type: string
        type:
          $ref: "#/components/schemas/NoteCreationType"
        priority:
          $ref: "#/components/schemas/NotePriorityType"
        startDate:
          type: string
          format: date-time
        dueDate:
          type: string
          format: date-time
          nullable: true

    NoteCreationReceiver:
      type: object
      description: NoteReceiver object
      required:
        - pinned
        - status
      properties:
        pinned:
          type: boolean
        status:
          $ref: "#/components/schemas/NoteStatusType"

    NoteReceiver:
      type: object
      description: NoteReceiver object
      required:
        - id
        - noteId
        - pinned
        - recipientId
        - recipientName
        - status
        - userGroupId
        - userGroupName
        - workspaceId
        - workspaceName
        - hasImage
      properties:
        id:
          type: integer
          format: int64
        noteId:
          type: integer
          format: int64
        pinned:
          type: boolean
        recipientId:
          type: integer
          format: int64
        recipientName:
          type: string
        status:
          $ref: "#/components/schemas/NoteStatusType"
        userGroupId:
          type: integer
          format: int64
        userGroupName:
          type: string
        workspaceId:
          type: integer
          format: int64
        workspaceName:
          type: string
        hasImage:
          type: boolean

    NoteRecipientList:
      type: object
      description: NoteRecipientList
      required:
        - recipientIds
        - recipientGroupIds
        - recipientStudentsWorkspaceIds
      properties:
        recipientIds:
          description: The list of userEntityIds
          type: array
          items:
            type: integer
        recipientGroupIds:
          description: The list of studentGroupIds
          type: array
          items:
            type: integer
        recipientStudentsWorkspaceIds:
          description: The list of workspaceIds
          type: array
          items:
            type: integer

    NoteCreationType:
      description: NoteCreationType enum type
      type: string
      enum:
        - MANUAL
        - AUTOMATIC

    NotePriorityType:
      description: NotePriorityType enum type
      type: string
      enum:
        - OWN
        - LOW
        - NORMAL
        - HIGH

    NoteStatusType:
      description: NoteStatusType enum type
      type: string
      enum:
        - ONGOING
        - APPROVAL_PENDING
        - APPROVED

    Label:
      type: object
      description: Label object
      required:
        - id
        - name
        - color
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        color:
          type: integer
          format: int64

    Course:
      type: object
      description: Course object
      required:
        - subject
        - courseNumber
      properties:
        subject:
          description: Subject of the course
          type: string
        courseNumber:
          description: Number of the course
          type: integer

    Organization:
      type: object
      description: Organization object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string

    OrganizationWorkspaceSummary:
      type: object
      description: OrganizationWorkspaceSummary object
      required:
        - unpublishedCount
        - publishedCount
      properties:
        unpublishedCount:
          type: integer
        publishedCount:
          type: integer

    OrganizationStudentsSummary:
      type: object
      description: OrganizationStudentsSummary object
      required:
        - activeStudents
        - inactiveStudents
      properties:
        inactiveStudents:
          type: integer
        activeStudents:
          type: integer

    OrganizationContact:
      type: object
      description: OrganizationContact object
      required:
        - id
        - type
        - name
        - phone
        - email
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
        name:
          type: string
        phone:
          type: string
        email:
          type: string

    OptionalCourseSuggestion:
      allOf:
        - $ref: "#/components/schemas/Course"

    PedagogyFormAccess:
      type: object
      description: PedagogyFormAccess object
      required:
        - accessible
        - courseTeacher
        - specEdTeacher
        - guidanceCounselor
      properties:
        accessible:
          type: boolean
        courseTeacher:
          type: boolean
        specEdTeacher:
          type: boolean
        guidanceCounselor:
          type: boolean
        studentParent:
          type: boolean

    PedagogyFormState:
      type: string
      enum:
        - PENDING
        - APPROVED
        - ACTIVE
        - INACTIVE

    PedagogyHistoryEntryType:
      type: string
      enum:
        - VIEW
        - EDIT

    PedagogyHistoryEntry:
      type: object
      description: PedagogyHistoryEntry object
      required:
        - modifierId
        - modifierName
        - modifierHasAvatar
        - date
      properties:
        modifierId:
          description: Id of the user who made the update
          type: integer
          format: int64
        modifierName:
          description: The user who made the update
          type: string
        modifierHasAvatar:
          description: If the user who made the update has an avatar
          type: boolean
        date:
          description: The date when the update was made
          type: string
          format: date-time
        editedFields:
          description: Fields that were edited in the update
          type: array
          items:
            type: string
        details:
          description: The description or details of the update what was done
          type: string
        type:
          description: The type of the update
          $ref: "#/components/schemas/PedagogyHistoryEntryType"

    PedagogyUserInfo:
      type: object
      description: PedagogyUserInfo object
      required:
        - firstName
        - lastName
      properties:
        firstName:
          description: The first name of the student. Include the middle names if the student has one
          example: "Matti Johannes"
          type: string
        lastName:
          description: The last name of the student
          example: "Meikäläinen"
          type: string
        dateOfBirth:
          description: The date of birth of the student
          type: string
        phoneNumber:
          description: Phone number of the student
          type: string
          nullable: true
        city:
          description: The city where the student lives
          type: string
          nullable: true
        country:
          description: The country where the student lives
          type: string
          nullable: true
        email:
          description: Email of the student
          type: string
          nullable: true
        streetAddress:
          description: The street address of the student
          type: string
          nullable: true
        addressName:
          description: The address of the student
          type: string
          nullable: true
        zipCode:
          description: The postal code of the student
          type: string
          nullable: true

    PedagogyForm:
      type: object
      description: PedagogyForm object
      required:
        - userEntityId
        - ownerId
        - ownerInfo
        - id
        - state
        - studentInfo
        - history
        - visibility
        - formData
        - created
      properties:
        userEntityId:
          description: The id of the student
          type: integer
          format: int64
        ownerId:
          description: Id of the user who created the document
          type: integer
          format: int64
          nullable: true
        ownerInfo:
          description: Info of the user who created the document
          allOf:
            - $ref: "#/components/schemas/PedagogyUserInfo"
          nullable: true
        id:
          description: The id of the form
          type: integer
          format: int64
          nullable: true
        state:
          description: State of the form
          example: "PENDING | APPROVED | NOT_SENT | INACTIVE"
          allOf:
            - $ref: "#/components/schemas/PedagogyFormState"
        studentInfo:
          description: Student information. Data is automatically filled in from the student's profile and can not be changed in the form
          allOf:
            - $ref: "#/components/schemas/PedagogyUserInfo"
        history:
          description: Update history of the form
          type: array
          items:
            $ref: "#/components/schemas/PedagogyHistoryEntry"
        formData:
          description: The data of the form
          example: "JSON object"
          nullable: true
          type: string
        created:
          description: The date when the form was created
          type: string
          format: date-time
          nullable: true

    PedagogyWorkspace:
      type: object
      description: Only basic informations of the workspace for pedagogy form use
      required:
        - id
        - name
        - nameExtension
        - urlName
      properties:
        id:
          description: The id of the workspace
          type: integer
          format: int64
        name:
          description: The name of the workspace
          type: string
        nameExtension:
          description: The name extension of the workspace
          type: string
        urlName:
          description: The url of the workspace
          type: string

    RecordsWorkspace:
      allOf:
        - $ref: "#/components/schemas/Workspace"
        - type: object
          properties:
            subjects:
              type: array
              items:
                $ref: "#/components/schemas/WorkspaceSubject"
            activity:
              $ref: "#/components/schemas/WorkspaceActivity"

    PublicityRestriction:
      type: string
      enum:
        - LIST_ALL
        - ONLY_PUBLISHED
        - ONLY_UNPUBLISHED

    Role:
      type: string
      enum:
        - TEACHER
        - STUDENT
        - STUDENT_PARENT
        - ADMINISTRATOR
        - MANAGER
        - STUDY_PROGRAMME_LEADER
        - STUDY_GUIDER
        - CUSTOM

    Subject:
      type: object
      description: Subject object
      required:
        - identifier
        - name
        - code
      properties:
        identifier:
          type: string
        name:
          type: string
        code:
          type: string

    Student:
      type: object
      required:
        - id
        - email
        - firstName
        - hasImage
        - updatedByStudent
        - userEntityId
        - ceeposLine
        - hasPedagogyForm
        - curriculumIdentifier
        - studyProgrammeIdentifier
        - studyProgrammeName
        - studyStartDate
        - studyEndDate
        - studyTimeEnd
        - lastLogin
        - organization
      properties:
        curriculumIdentifier:
          type: string
          nullable: true
        email:
          type: string
        firstName:
          type: string
        hasImage:
          type: boolean
        id:
          description: The "identifier" of the student. Form "PYRAMUS-X" despite name refrencing to integer
          type: string
        language:
          nullable: true
          type: string
        lastName:
          type: string
        municipality:
          nullable: true
          type: string
        nationality:
          nullable: true
          type: string
        nickName:
          nullable: true
          type: string
        school:
          nullable: true
          type: string
        studyEndDate:
          nullable: true
          type: string
          format: date-time
        studyProgrammeIdentifier:
          type: string
        studyProgrammeName:
          type: string
        studyStartDate:
          nullable: true
          type: string
          format: date-time
        studyTimeEnd:
          nullable: true
          type: string
          format: date-time
        lastLogin:
          nullable: true
          type: string
          format: date-time
        updatedByStudent:
          type: boolean
        userEntityId:
          type: integer
          format: int64
        ceeposLine:
          type: string
          nullable: true
        hasPedagogyForm:
          type: boolean
        organization:
          $ref: "#/components/schemas/Organization"
          nullable: true

    FlaggedStudent:
      allOf:
        - $ref: "#/components/schemas/Student"
        - type: object
          required:
            - flags
            - u18Compulsory
          properties:
            flags:
              nullable: true
              type: array
              items:
                $ref: "#/components/schemas/UserStudentFlag"
            u18Compulsory:
              description: Is the student under 18yo and part of the compulsory education system
              type: boolean

    GuiderStudent:
      allOf:
        - $ref: "#/components/schemas/FlaggedStudent"
        - type: object
          required:
            - curriculumName
            - matriculationEligibility
          properties:
            curriculumName:
              type: string
              nullable: true
            matriculationEligibility:
              type: boolean
            permissions:
              type: object
              required:
                - canViewDetails
                - canEdit
                - isAvailable
              properties:
                isAvailable:
                  type: boolean
                canViewDetails:
                  type: boolean
                canEdit:
                  type: boolean
            guidanceCounselors:
              type: array
              items:
                $ref: "#/components/schemas/GuidanceCounselorContact"

    StudentInfo:
      type: object
      description: StudentInfo object
      required:
        - id
        - firstName
        - lastName
        - studyTimeEnd
        - studyProgrammeEducationType
        - curriculumName
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        studyTimeEnd:
          nullable: true
          type: string
        studyProgrammeEducationType:
          type: string
        counselorList:
          nullable: true
          type: array
          items:
            type: string
        curriculumName:
          type: string
          nullable: true

    StudentStudyActivity:
      type: object
      description: StudentStudyActivity object
      required:
        - subjectName
        - subject
        - courseId
        - courseNumber
        - courseName
        - grade
        - passing
        - status
        - date
        - transferCreditMandatory
        - id
      properties:
        subjectName:
          type: string
          nullable: true
        subject:
          type: string
        courseId:
          type: integer
          format: int64
          nullable: true
        courseNumber:
          type: integer
        courseName:
          type: string
        grade:
          type: string
        passing:
          type: boolean
        status:
          $ref: "#/components/schemas/CourseStatus"
        date:
          type: string
          format: date-time
        transferCreditMandatory:
          type: boolean
          nullable: true
        id:
          type: integer
          format: int64

    StudentCourseChoice:
      allOf:
        - $ref: "#/components/schemas/Course"

    StudyProgramme:
      type: object
      description: StudyProgramme object
      required:
        - identifier
        - name
      properties:
        identifier:
          type: string
        name:
          type: string

    StudentCard:
      type: object
      description: StudentCard object
      required:
        - id
        - userEntityId
        - firstName
        - lastName
        - studyProgramme
        - expiryDate
        - activity
        - type
      properties:
        id:
          type: integer
          format: int64
        userEntityId:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        studyProgramme:
          type: string
          nullable: true
        expiryDate:
          type: string
          format: date-time
        activity:
          description: The activity of the card. ACTIVE, INACTIVE or CANCELLED
          type: string
        type:
          description: The type of the card. GREEN or BLUE
          type: string

    TemplateRestriction:
      type: string
      enum:
        - LIST_ALL,
        - ONLY_TEMPLATES
        - ONLY_WORKSPACES

    UserCredential:
      type: object
      description: UserCredential object
      required:
        - oldPassword
        - newPassword
        - username
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
        username:
          type: string

    OrganizationStaffMemberSearchResult:
      description: OrganizationStaffMemberSearchResult object. Holding the search results of staff search and the total hit count.
      type: object
      required:
        - results
        - totalHitCount
        - firstResult
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/StaffMember"
        totalHitCount:
          type: integer
        firstResult:
          type: integer

    OrganizationStudentSearchResult:
      description: OrganizationStudentSearchResult object. Holding the search results of student search and the total hit count.
      type: object
      required:
        - results
        - totalHitCount
        - firstResult
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/Student"
        totalHitCount:
          type: integer
        firstResult:
          type: integer

    UserInfo:
      type: object
      description: Info data. Some of the fields are boolean, but are returned as string by the API. Everyvalue is optional and can be null. Values are returned if they are defined in the API call.
      required:
        - userId
        - schoolDataIdentifier
        - isStudent
        - moreInfoForLoggedUser
        - firstName
        - lastName
      properties:
        userId:
          description: The id of the user
          example: "1"
          type: string
        schoolDataIdentifier:
          description: The id of the user in the school data
          type: string
          example: "PYRAMUS-XX | PYRAMUS-STAFF-XX"
        isStudent:
          description: If the user is a student. Api returns this as string, but it is boolean
          example: "true | false"
          type: string
        moreInfoForLoggedUser:
          description: If logged user has permissions to see student in the guider. Used in conjunction with isStudent. Api returns this as string, but it is boolean.
          example: "true | false"
          type: string
        firstName:
          description: The first name of the user. Include the middle names if the user has one
          example: "Matti Johannes"
          type: string
        lastName:
          description: The last name of the user
          example: "Meikäläinen"
          type: string
        email:
          description: Email of the user
          type: string
          nullable: true
        phoneNumber:
          description: Phone number of the user
          type: string
          nullable: true
        vacationEnd:
          description: The date when the user's vacation ends
          type: string
          nullable: true
        vacationStart:
          description: The date when the user's vacation starts
          type: string
          nullable: true
        extraInfo:
          description: Extra info of the user
          type: string
          nullable: true
        hasAvatar:
          description: If the user has an avatar. Api returns this as string, but it is boolean and can be converted to boolean later.
          type: string
          example: "true | false"
          nullable: true
        whatsapp:
          description: If the user has enabled whatsapp. Api returns this as string, but it is boolean and can be converted to boolean later.
          type: string
          example: "true | false"
          nullable: true
        appointmentCalendar:
          description: Appointment calendar href. If the loaded user has enabled and set appointment calendar and logged user has permissions to use this feature.
          type: string
          nullable: true

    UserStudentAddress:
      type: object
      description: UserStudentAddress object
      required:
        - identifier
        - studentIdentifier
        - street
        - postalCode
        - city
        - region
        - country
        - type
        - defaultAddress
      properties:
        identifier:
          type: string
        studentIdentifier:
          type: string
        street:
          type: string
        postalCode:
          type: string
        city:
          type: string
        region:
          type: string
        country:
          type: string
        type:
          type: string
        defaultAddress:
          type: boolean

    UserStudentEmail:
      type: object
      description: UserStudentEmail object
      required:
        - studentIdentifier
        - type
        - address
        - defaultAddress
      properties:
        studentIdentifier:
          type: string
        type:
          type: string
        address:
          type: string
        defaultAddress:
          type: boolean

    UserStudentPhoneNumber:
      type: object
      description: UserStudentPhoneNumber object
      required:
        - studentIdentifier
        - type
        - number
        - defaultNumber
      properties:
        studentIdentifier:
          type: string
        type:
          type: string
        number:
          type: string
        defaultNumber:
          type: boolean

    UserGroup:
      type: object
      description: UserGroup object
      required:
        - id
        - name
        - userCount
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        userCount:
          type: integer
        identifier:
          type: string
        organization:
          $ref: "#/components/schemas/Organization"
        isGuidanceGroup:
          type: boolean

    UserEntityFile:
      type: object
      description: UserEntityFile object
      required:
        - id
        - name
        - contentType
        - fileId
        - base64Data
        - identifier
        - userEntityId
        - visibility
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        contentType:
          type: string
        fileId:
          type: string
        base64Data:
          type: string
        identifier:
          type: string
        userEntityId:
          type: integer
          format: int64
        visibility:
          $ref: "#/components/schemas/UserEntityFileVisibility"

    UserFile:
      type: object
      description: UserFile object
      required:
        - id
        - userEntityId
        - fileName
        - contentType
        - title
        - description
        - archived
      properties:
        id:
          type: integer
          format: int64
        userEntityId:
          type: integer
          format: int64
        fileName:
          type: string
        contentType:
          type: string
        title:
          type: string
        description:
          type: string
        archived:
          type: boolean
        size:
          type: integer

    UserEntityFileVisibility:
      type: string
      enum:
        - PUBLIC
        - PRIVATE
        - STAFF

    UserStaffSearchResult:
      type: object
      description: UserStaffSearchResult object
      required:
        - results
        - totalHitCount
        - firstResult
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/StaffMember"
        totalHitCount:
          type: integer
        firstResult:
          type: integer

    UserBasicInfo:
      type: object
      description: User object
      required:
        - id
        - identifier
        - firstName
        - lastName
        - hasImage
      properties:
        id:
          type: integer
          format: int64
        identifier:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        nickName:
          type: string
        hasImage:
          type: boolean

    User:
      type: object
      description: User object
      required:
        - id
        - firstName
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        nickName:
          type: string
        studyProgrammeName:
          type: string
        hasImage:
          type: boolean
        email:
          type: string

    CommunicatorUserBasicInfo:
      type: object
      description: User object
      required:
        - userEntityId
        - firstName
      properties:
        userEntityId:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        nickName:
          type: string
          nullable: true
        studyProgrammeName:
          type: string
          nullable: true
        archived:
          type: boolean
        studiesEnded:
          type: boolean

    StaffMember:
      type: object
      description: StaffMember object
      required:
        - id
        - userEntityId
        - firstName
        - lastName
        - email
        - properties
        - hasImage
        - roles
      properties:
        id:
          description: Staff member identifier. Format is PYRAMUS-STAFF-XX even if id refers to number
          type: string
        userEntityId:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          nullable: true
        properties:
          type: object
          additionalProperties:
            type: string
        organization:
          $ref: "#/components/schemas/Organization"
          nullable: true
        roles:
          type: array
          uniqueItems: true
          items:
            $ref: "#/components/schemas/Role"
        hasImage:
          type: boolean

    UserStaffCreatePayload:
      type: object
      description: UserStaffCreatePayload object
      required:
        - firstName
        - lastName
        - email
      properties:
        identifier:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        roles:
          type: array
          uniqueItems: true
          items:
            $ref: "#/components/schemas/Role"

    UserGuardiansDependant:
      type: object
      description: User Guardians Dependant object
      required:
        - userEntityId
        - identifier
        - firstName
        - lastName
        - hasImage
      properties:
        userEntityId:
          type: integer
        identifier:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        nickName:
          type: string
          nullable: true
        studyProgrammeName:
          type: string
        hasImage:
          type: boolean
        email:
          type: string
          nullable: true
        phoneNumber:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        latestLogin:
          type: string
          format: date-time
          nullable: true
        studyStartDate:
          type: string
          format: date
          nullable: true
        studyTimeEnd:
          type: string
          format: date
          nullable: true
        studyEndDate:
          type: string
          format: date
          nullable: true

    UserGuardiansDependantWorkspace:
      type: object
      description: User Guardians Dependant Workspace object
      required:
        - name
      properties:
        name:
          type: string
        nameExtension:
          type: string
          nullable: true
        enrollmentDate:
          type: string
          format: date-time
          nullable: true
        latestAssessmentRequestDate:
          type: string
          format: date-time
          nullable: true

    UserWithSchoolData:
      type: object
      description: UserWithSchoolData object
      required:
        - id
        - firstName
        - email
        - hasImage
        - updatedByStudent
        - userEntityId
        - matriculationEligibility
        - ceeposLine
      properties:
        id:
          type: string
        userEntityId:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        nickName:
          type: string
        email:
          type: string
        hasImage:
          type: boolean
        updatedByStudent:
          type: boolean
        matriculationEligibility:
          type: string
        ceeposLine:
          type: string
          nullable: true
        curriculumName:
          type: string
        curriculumIdentifier:
          type: string
        language:
          type: string
        municipality:
          type: string
        nationality:
          type: string
        school:
          type: string
        studyEndDate:
          type: string
        studyStartDate:
          type: string
        studyTimeEnd:
          type: string
        lastLogin:
          type: string
        studyProgrammeName:
          type: string

    UserWhoAmI:
      type: object
      description: This is whoAmI object returned by whoAmI endpoint. It contains basic information about the user.
      required:
        - id
        - identifier
        - organizationIdentifier
        - isActive
        - firstName
        - lastName
        - displayName
        - nickName
        - phoneNumbers
        - addresses
        - emails
        - hasImage
        - roles
        - permissions
        - curriculumName
        - curriculumIdentifier
        - studyTimeEnd
        - studyTimeLeftStr
        - studyStartDate
        - studyEndDate
        - studyProgrammeName
        - studyProgrammeIdentifier
        - locale
        - hasEvaluationFees
        - isDefaultOrganization
        - services
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        identifier:
          type: string
          description: PYRAMUS-STAFF-XX or PYRAMUS-STUDENT-XX type identifier
          nullable: true
        organizationIdentifier:
          type: string
          nullable: true
        isActive:
          type: boolean
          description: Whether user is active
          nullable: true
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        displayName:
          type: string
          nullable: true
        nickName:
          type: string
          nullable: true
        phoneNumbers:
          type: array
          nullable: true
          items:
            type: string
        addresses:
          type: array
          nullable: true
          items:
            type: string
        emails:
          type: array
          nullable: true
          items:
            type: string
        hasImage:
          type: boolean
          nullable: true
        roles:
          type: array
          uniqueItems: true
          items:
            $ref: "#/components/schemas/Role"
        permissions:
          type: array
          nullable: true
          uniqueItems: true
          items:
            type: string
        curriculumName:
          type: string
          nullable: true
        curriculumIdentifier:
          type: string
          nullable: true
        studyTimeEnd:
          type: string
          format: date-time
          nullable: true
        studyTimeLeftStr:
          type: string
          nullable: true
        studyStartDate:
          type: string
          format: date-time
          nullable: true
        studyEndDate:
          type: string
          format: date-time
          nullable: true
        studyProgrammeName:
          type: string
          nullable: true
        studyProgrammeIdentifier:
          type: string
          nullable: true
        locale:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/LocaleType"
        hasEvaluationFees:
          type: boolean
          nullable: true
        isDefaultOrganization:
          type: boolean
          nullable: true
        services:
          $ref: "#/components/schemas/UserWhoAmIServices"

    UserWhoAmIServices:
      type: object
      description: WhoAmIServices object
      required:
        - chat
        - environmentForum
        - hops
        - worklist
      properties:
        chat:
          type: object
          required:
            - isAvailable
          properties:
            isAvailable:
              type: boolean
        environmentForum:
          type: object
          required:
            - isAvailable
          properties:
            isAvailable:
              type: boolean
        hops:
          type: object
          required:
            - isAvailable
          properties:
            isAvailable:
              type: boolean
        worklist:
          type: object
          required:
            - isAvailable
          properties:
            isAvailable:
              type: boolean

    Language:
      description: Language enum
      type: string
      enum:
        - fi
        - sv
        - en
        - de
        - ru
        - ja
        - es

    WorkspaceMandatority:
      description: WorkspaceMandatority enum
      type: string
      enum:
        - MANDATORY
        - SCHOOL_LEVEL_OPTIONAL
        - NATIONAL_LEVEL_OPTIONAL
        - UNSPECIFIED_OPTIONAL

    WorkspaceAccess:
      description: WorkspaceAccess enum
      type: string
      enum:
        - MEMBERS_ONLY
        - LOGGED_IN
        - ANYONE

    WorkspaceAdditionalInfo:
      type: object
      description: WorkspaceAdditionalInfo object
      required:
        - beginDate
        - endDate
        - viewLink
        - subjects
        - signupStart
        - signupEnd
        - workspaceTypeId
        - workspaceType
      properties:
        beginDate:
          description: The date when the workspace begins
          type: string
          format: date-time
          nullable: true
        endDate:
          description: The date when the workspace ends
          type: string
          format: date-time
          nullable: true
        signupStart:
          description: The date when the workspace signup opens
          type: string
          format: date-time
          nullable: true
        signupEnd:
          description: The date when the workspace signup closes
          type: string
          format: date-time
          nullable: true
        viewLink:
          description: Link to the workspace
          type: string
        workspaceTypeId:
          description: The id of the workspace type
          type: integer
          format: int64
          nullable: true
        workspaceType:
          description: Workspace type of the workspace
          type: string
          nullable: true
        educationType:
          description: Education type of the workspace
          type: object
          properties:
            identifier:
              type: object
              properties:
                identifier:
                  type: string
                dataSource:
                  type: string
            name:
              type: string
            schoolDataSource:
              type: string
        subjects:
          description: Subjectlist of the workspace
          type: array
          items:
            $ref: "#/components/schemas/WorkspaceSubject"

    Workspace:
      type: object
      description: Workspace object
      required:
        - id
        - name
        - description
        - published
        - archived
        - hasCustomImage
        - lastVisit
        - materialDefaultLicense
        - numVisits
        - subjectIdentifier
        - urlName
        - curriculumIdentifiers
        - organizationEntityId
        - language
      properties:
        id:
          description: The id of the workspace
          type: integer
          format: int64
        name:
          description: The name of the workspace
          type: string
        nameExtension:
          description: The name extension of the workspace
          type: string
          nullable: true
        description:
          description: The description of the workspace
          type: string
        published:
          description: If the workspace is published
          type: boolean
        numVisits:
          description: The number of visits
          type: integer
        subjectIdentifier:
          description: The identifier of the subject
          type: string
        materialDefaultLicense:
          description: The default license of the workspace
          type: string
        lastVisit:
          description: The date of the last visit
          type: string
        hasCustomImage:
          description: If the workspace has a custom image
          type: boolean
        curriculumIdentifiers:
          description: The identifiers of the curriculums
          type: array
          items:
            type: string
        archived:
          description: If the workspace is archived
          type: boolean
        organizationEntityId:
          description: The id of the organization
          type: integer
          format: int64
        urlName:
          description: The url name of the workspace
          type: string
        language:
          description: Main language of the workspace
          $ref: "#/components/schemas/Language"
        mandatority:
          description: Mandatority value of the workspace
          allOf:
            - $ref: "#/components/schemas/WorkspaceMandatority"
          nullable: true
        access:
          description: Access level of the workspace
          $ref: "#/components/schemas/WorkspaceAccess"

    WorkspaceOrganization:
      type: object
      description: WorkspaceOrganization object
      required:
        - identifier
        - name
      properties:
        identifier:
          type: string
        name:
          type: string

    WorkspaceBasicInfo:
      type: object
      description: WorkspaceBasicInfo object
      required:
        - id
        - name
        - urlName
      properties:
        id:
          description: The id of the workspace
          type: integer
          format: int64
        name:
          description: The name of the workspace
          type: string
        urlName:
          description: The url name of the workspace
          type: string
        nameExtension:
          description: The name extension of the workspace
          type: string
          nullable: true

    WorkspaceSubject:
      type: object
      description: Information about the subject of the workspace
      required:
        - identifier
      properties:
        identifier:
          description: The identifier of the subject
          type: string
        subject:
          description: Subject data
          $ref: "#/components/schemas/Subject"
        courseNumber:
          description: The number of the course
          type: integer
        courseLength:
          description: The length value of the course
          type: string
        courseLengthSymbol:
          description: The symbol data related to course length
          $ref: "#/components/schemas/WorkspaceLengthSymbol"

    WorkspaceLengthSymbol:
      type: object
      description: WorkspaceLengthSymbol object
      required:
        - id
        - name
        - symbol
      properties:
        id:
          description: The id of the length
          type: string
        name:
          description: The name of the length
          type: string
        symbol:
          description: The symbol of the length
          type: string

    WorkspaceActivity:
      type: object
      description: Contains activity information of the workspace
      required:
        - id
        - name
        - assessmentStates
        - evaluablesAnswered
        - evaluablesAnsweredLastDate
        - evaluablesDonePercent
        - evaluablesFailed
        - evaluablesIncomplete
        - evaluablesPassed
        - evaluablesSubmitted
        - evaluablesWithdrawn
        - evaluablesTotal
        - evaluablesUnanswered
        - exercisesAnswered
        - exercisesAnsweredLastDate
        - exercisesDonePercent
        - exercisesTotal
        - exercisesUnanswered
        - journalEntryCount
        - numVisits
      properties:
        id:
          description: The id of the workspace
          type: integer
          format: int64
        name:
          description: The name of the workspace
          type: string
          nullable: true
        assessmentStates:
          description: Assessment states of the workspace
          type: array
          items:
            $ref: "#/components/schemas/WorkspaceAssessmentState"
        evaluablesAnswered:
          description: The number of answered evaluables
          type: integer
          nullable: true
        evaluablesAnsweredLastDate:
          description: The date of the last answered evaluable
          type: string
          format: date-time
          nullable: true
        evaluablesDonePercent:
          description: The percentage of answered evaluables
          type: integer
          nullable: true
        evaluablesFailed:
          description: The number of failed evaluables
          type: integer
          nullable: true
        evaluablesFailedLastDate:
          description: The date of the last failed evaluable
          type: string
          format: date-time
          nullable: true
        evaluablesIncomplete:
          description: The number of incomplete evaluables
          type: integer
          nullable: true
        evaluablesIncompleteLastDate:
          description: The date of the last incomplete evaluable
          type: string
          nullable: true
        evaluablesPassed:
          description: The number of passed evaluables
          type: integer
          nullable: true
        evaluablesPassedLastDate:
          description: The date of the last passed evaluable
          type: string
          format: date-time
          nullable: true
        evaluablesSubmitted:
          description: The number of submitted evaluables
          type: integer
        evaluablesSubmittedLastDate:
          description: The date of the last submitted evaluable
          type: string
          format: date-time
          nullable: true
        evaluablesWithdrawn:
          description: The number of withdrawn evaluables
          type: integer
          nullable: true
        evaluablesWithdrawnLastDate:
          description: The date of the last withdrawn evaluable
          type: string
          format: date-time
          nullable: true
        evaluablesTotal:
          description: The number of evaluables
          type: integer
          nullable: true
        evaluablesUnanswered:
          description: The number of unanswered evaluables
          type: integer
          nullable: true
        exercisesAnswered:
          description: The number of answered exercises
          type: integer
          nullable: true
        exercisesAnsweredLastDate:
          description: The date of the last answered exercise
          type: string
          format: date-time
          nullable: true
        exercisesDonePercent:
          description: The percentage of answered exercises
          type: integer
          nullable: true
        exercisesTotal:
          description: The number of exercises
          type: integer
          nullable: true
        exercisesUnanswered:
          description: The number of unanswered exercises
          type: integer
          nullable: true
        journalEntryCount:
          description: The number of journal entries
          type: integer
          nullable: true
        lastJournalEntry:
          description: The date of the last journal entry
          type: string
          format: date-time
          nullable: true
        lastVisit:
          description: The date of the last visit to the workspace
          type: string
          format: date-time
          nullable: true
        numVisits:
          description: The number of visits to the workspace
          type: integer
          nullable: true
        subjects:
          description: The subjects of the workspace
          type: array
          items:
            $ref: "#/components/schemas/WorkspaceActivitySubject"
        curriculums:
          description: The curriculums of the workspace
          type: array
          items:
            $ref: "#/components/schemas/WorkspaceActivityCurriculum"

    WorkspaceActivityCurriculum:
      type: object
      description: WorkspaceActivityCurriculum object
      required:
        - identifier
        - name
      properties:
        identifier:
          description: The identifier of the curriculum
          type: string
        name:
          description: The name of the curriculum
          type: string

    WorkspaceActivitySubject:
      type: object
      description: WorkspaceActivitySubject object
      required:
        - identifier
        - subjectName
        - subjectCode
        - courseNumber
        - courseLength
        - courseLengthSymbol
      properties:
        identifier:
          description: The identifier of the subject
          type: string
        subjectName:
          description: The name of the subject
          type: string
        subjectCode:
          description: The code of the subject
          type: string
        courseNumber:
          description: The number of the course
          type: integer
          nullable: true
        courseLength:
          description: The length value of the course
          type: string
        courseLengthSymbol:
          description: The symbol data related to course length
          type: string

    WorkspaceAssessmentState:
      type: object
      description: WorkspaceAssessmentState object
      required:
        - date
        - state
        - grade
        - gradeDate
        - passingGrade
        - text
        - subject
      properties:
        date:
          description: The date of the assessment
          type: string
        state:
          description: The state of the assessment
          $ref: "#/components/schemas/WorkspaceAssessmentStateType"
        grade:
          description: The grade of the assessment
          type: string
          nullable: true
        gradeDate:
          description: The date of the grade
          type: string
          nullable: true
        passingGrade:
          description: If the assessment has a passing grade
          type: boolean
          nullable: true
        text:
          description: The text (description) of the assessment
          type: string
          nullable: true
        subject:
          description: The subject. Can be null.
          $ref: "#/components/schemas/WorkspaceActivitySubject"
          nullable: true

    WorkspaceAssessmentStateType:
      type: string
      enum:
        - transferred
        - unassessed
        - pending
        - pending_pass
        - pending_fail
        - pass
        - fail
        - incomplete
        - interim_evaluation_request
        - interim_evaluation

    CourseStatus:
      type: string
      enum:
        - ONGOING
        - GRADED
        - SUPPLEMENTATIONREQUEST
        - TRANSFERRED
        - SUGGESTED_NEXT
        - SUGGESTED_OPTIONAL

    CourseType:
      type: string
      enum:
        - Nonstop
        - Ryhmäkurssi

    WorkspaceSuggestion:
      type: object
      description: WorkspaceSuggestion object
      required:
        - id
        - name
        - subject
        - courseNumber
        - urlName
        - hasCustomImage
        - nameExtension
        - courseType
        - canSignup
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        subject:
          type: string
        courseNumber:
          type: integer
        urlName:
          type: string
        hasCustomImage:
          type: boolean
        nameExtension:
          nullable: true
          type: string
        type:
          $ref: "#/components/schemas/CourseType"
        description:
          type: string
          nullable: true
        canSignup:
          type: boolean
          description: If the student can signup to the course by themselves

    WorkspaceStudent:
      description: WorkspaceStudent object
      allOf: #extends WorkspaceUserBase object
        - $ref: "#/components/schemas/WorkspaceUserBase"
        - type: object
          description: WorkspaceUserRestModel object
          required:
            - nickname
            - studyProgrammeName
            - active
            - hasPedagogyForm
            - u18Compulsory
          properties:
            nickname:
              description: The nickname of the user
              type: string
            studyProgrammeName:
              description: The name of the study programme
              type: string
            active:
              description: If the user is active
              type: boolean
            hasPedagogyForm:
              type: boolean
            u18Compulsory:
              description: Is the student under 18yo and part of compulsory education program
              type: boolean

    WorkspaceUserBase:
      type: object
      description: WorkspaceUserBase object
      required:
        - workspaceUserEntityId
        - userIdentifier
        - userEntityId
        - firstName
        - lastName
        - hasImage
      properties:
        workspaceUserEntityId:
          description: The id of the workspace user entity
          type: integer
          format: int64
        userIdentifier:
          description: The identifier of the user
          type: string
        userEntityId:
          description: The id of the user entity
          type: integer
          format: int64
        firstName:
          description: The first name of the user
          type: string
        lastName:
          description: The last name of the user
          type: string
        hasImage:
          description: If the user has an image
          type: boolean

    WorkspaceType:
      type: object
      description: WorkspaceType object
      required:
        - identifier
        - name
      properties:
        identifier:
          description: The identifier of the workspace type
          type: string
        name:
          description: The name of the workspace type
          type: string

    WorkspaceDetails:
      type: object
      description: WorkspaceDetails object
      required:
        - beginDate
        - endDate
        - signupStart
        - signupEnd
        - externalViewUrl
        - typeId
        - rootFolderId
        - helpFolderId
        - indexFolderId
      properties:
        beginDate:
          description: OffSetDateTime format
          type: string
        endDate:
          description: OffSetDateTime format
          type: string
        signupStart:
          description: OffSetDateTime format
          type: string
        signupEnd:
          description: OffSetDateTime format
          type: string
        externalViewUrl:
          description: The external view url
          type: string
        typeId:
          description: The id of the workspace type
          type: string
        rootFolderId:
          description: The id of the root folder
          type: integer
          format: int64
        helpFolderId:
          description: The id of the help folder
          type: integer
          format: int64
        indexFolderId:
          description: The id of the index folder
          type: integer
          format: int64

    WorkspaceMaterialProducer:
      type: object
      description: WorkspaceMaterialProducer object
      required:
        - name
      properties:
        name:
          description: The name of the producer
          type: string
        id:
          description: The id of the producer
          type: integer
          format: int64

    WorkspaceSignupMessageGroup:
      type: object
      description: Usegroup of a signup message
      required:
        - userGroupEntityId
        - userGroupName
      properties:
        userGroupEntityId:
          description: The id of the user group
          type: integer
          format: int64
        userGroupName:
          description: The name of the user group
          type: string

    WorkspaceStudentSearchResult:
      type: object
      description: WorkspaceStudentSearchResult object
      required:
        - results
        - totalHitCount
        - firstResult
      properties:
        results:
          description: The results of the search
          type: array
          items:
            $ref: "#/components/schemas/WorkspaceStudent"
        totalHitCount:
          description: The total hit count
          type: integer
        firstResult:
          description: The first result
          type: integer

    WorkspaceJournal:
      type: object
      description: WorkspaceJournal object
      required:
        - id
        - workspaceEntityId
        - userEntityId
        - firstName
        - lastName
        - content
        - title
        - created
        - commentCount
        - isMaterialField
        - workspaceMaterialReplyState
      properties:
        id:
          type: integer
          format: int64
        workspaceEntityId:
          type: integer
          format: int64
        userEntityId:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        content:
          type: string
        title:
          type: string
        created:
          type: string
          format: date-time
        commentCount:
          type: integer
        isMaterialField:
          description: Whether journal is "mandatory" assignment and material field
          type: boolean
        workspaceMaterialReplyState:
          $ref: "#/components/schemas/MaterialCompositeReplyStateType"

    WorkspaceJournalComment:
      type: object
      description: WorkspaceJournalComment object
      required:
        - id
        - journalEntryId
        - parentCommentId
        - depth
        - authorId
        - firstName
        - lastName
        - comment
        - created
        - editable
        - archivable
      properties:
        id:
          type: integer
          format: int64
        journalEntryId:
          type: integer
          format: int64
        parentCommentId:
          type: integer
          format: int64
        depth:
          type: integer
        authorId:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        comment:
          type: string
        created:
          type: string
          format: date-time
        editable:
          type: boolean
        archivable:
          type: boolean

    WorkspaceNote:
      type: object
      description: WorkspaceNote object
      required:
        - id
        - owner
        - workspaceEntityId
        - title
        - workspaceNote
      properties:
        id:
          type: integer
          format: int64
        owner:
          description: The id of the user
          type: string
        workspaceEntityId:
          description: The id of the workspace
          type: integer
          format: int64
        title:
          type: string
        workspaceNote:
          type: string
        nextSiblingId:
          description: Backend uses this to determine the order of the notes. This is not used in the frontend
          type: integer
          format: int64
          nullable: true

    WorkspaceEntityFile:
      type: object
      description: WorkspaceEntityFile object
      properties:
        id:
          description: The id of the file
          type: integer
          format: int64
        fileIdentifier:
          description: The identifier of the file
          type: string
        tempFileId:
          description: The id of the temp file
          type: string
        contentType:
          description: The content type of the file
          type: string
        workspaceEntityId:
          description: The id of the workspace
          type: integer
          format: int64
        base64Data:
          description: The base64 encoded data of the file
          type: string

    WorkspaceMaterial:
      type: object
      description: WorkspaceMaterial is the representation of a Material that is being used within that workspace.
      required:
        - id
        - materialId
        - parentId
        - nextSiblingId
        - hidden
        - assignmentType
        - correctAnswers
        - path
        - title
      properties:
        id:
          description: The id of the material
          type: integer
          format: int64
        materialId:
          description: The id of the material
          type: integer
          format: int64
        parentId:
          description: The id of the parent material
          type: integer
          format: int64
        nextSiblingId:
          description: Next sibling id. Used to determine the order of the materials
          type: integer
          format: int64
        hidden:
          description: If the material is hidden
          type: boolean
        assignmentType:
          description: The type of the assignment
          $ref: "#/components/schemas/MaterialAssigmentType"
        correctAnswers:
          description: The correct answers of the material
          $ref: "#/components/schemas/MaterialAnswersType"
        path:
          description: The path of the material
          type: string
        title:
          description: The title of the material
          type: string
        titleLanguage:
          description: The language of the material
          $ref: "#/components/schemas/Language"
        maxPoints:
          type: number
          format: double

    WorkspaceFolder:
      type: object
      description: WorkspaceFolder is the representation of a Material that is being used within that workspace.
      properties:
        id:
          type: integer
          format: int64
        hidden:
          type: boolean
        orderNumber:
          type: integer
        title:
          type: string
        urlName:
          type: string
        path:
          type: string

    WorkspaceCansignup:
      type: object
      description: WorkspaceCansignup holding info if user can signup to workspace and whether there exists assessment events
      required:
        - canSignup
        - assessmentStates
      properties:
        canSignup:
          description: If the user can signup
          type: boolean
        assessmentStates:
          description: Assessment states of the workspace
          type: array
          items:
            $ref: "#/components/schemas/WorkspaceAssessmentState"

    WorklistEditableFieldType:
      type: string
      enum:
        - ENTRYDATE
        - DESCRIPTION
        - PRICE
        - FACTOR
        - BILLING_NUMBER

    WorklistBillingStateType:
      type: string
      enum:
        - ENTERED
        - PROPOSED
        - APPROVED
        - PAID

    WorklistTemplate:
      type: object
      description: WorklistTemplate object
      required:
        - id
        - description
        - price
        - factor
        - billingNumber
        - editableFields
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
        price:
          type: number
          format: double
        factor:
          type: number
          format: double
        billingNumber:
          nullable: true
          type: integer
        editableFields:
          type: array
          items:
            $ref: "#/components/schemas/WorklistEditableFieldType"

    WorklistItem:
      type: object
      description: WorklistItem object
      required:
        - id
        - templateId
        - state
        - entryDate
        - description
        - price
        - factor
        - billingNumber
        - courseAssessment
        - editableFields
        - removable
      properties:
        id:
          type: integer
          format: int64
        templateId:
          type: integer
          format: int64
        state:
          $ref: "#/components/schemas/WorklistBillingStateType"
        entryDate:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
        factor:
          type: number
          format: double
        billingNumber:
          type: integer
        courseAssessment:
          type: object
          properties:
            courseName:
              type: string
            studentName:
              type: string
            grade:
              type: integer
            raisedGrade:
              type: boolean
        editableFields:
          type: array
          items:
            $ref: "#/components/schemas/WorklistEditableFieldType"
        removable:
          type: boolean

    WorklistSummary:
      type: object
      description: WorklistSummary object
      required:
        - displayName
        - beginDate
        - endDate
        - count
      properties:
        displayName:
          type: string
        beginDate:
          description: Local date in ISO format (YYYY-MM-DD)
          type: string
        endDate:
          description: Local date in ISO format (YYYY-MM-DD)
          type: string
        count:
          type: integer

    WorkspaceChatStatus:
      type: string
      enum:
        - ENABLED
        - DISABLED

    WorkspaceActivityInfo:
      type: object
      description: Record workspace activity info with line and category, default line and activities
      required:
        - lineName
        - lineCategory
        - defaultLine
        - activities
        - completedCourseCredits
        - mandatoryCourseCredits
        - showCredits
      properties:
        lineName:
          description: Name of the "Studyprogramme"
          type: string
        lineCategory:
          description: Category of the "Studyprogramme"
          type: string
        defaultLine:
          description: Is the default line
          type: boolean
        activities:
          description: List of activities
          type: array
          items:
            $ref: "#/components/schemas/WorkspaceActivity"
        completedCourseCredits:
          description: Completed course credits. Is always at least 0.
          type: integer
        mandatoryCourseCredits:
          description: Mandatory course credits. Is always at least 0.
          type: integer
        showCredits:
          description: Should the credits be shown. Currently only OPS 2021 student will have this as true
          type: boolean

    WorkspaceSettings:
      type: object
      description: Workspace Settings object
      required:
        - id
        - name
        - description
        - published
        - hasCustomImage
        - chatEnabled
        - materialDefaultLicense
        - urlName
        - curriculumIdentifiers
        - organizationEntityId
        - language
      properties:
        id:
          description: The id of the workspace
          type: integer
          format: int64
        name:
          description: The name of the workspace
          type: string
        nameExtension:
          description: The name extension of the workspace
          type: string
          nullable: true
        description:
          description: The description of the workspace
          type: string
        beginDate:
          description: The date when the workspace begins
          type: string
          format: date-time
          nullable: true
        endDate:
          description: The date when the workspace ends
          type: string
          format: date-time
          nullable: true
        signupStart:
          description: The date when the workspace signup opens
          type: string
          format: date-time
          nullable: true
        signupEnd:
          description: The date when the workspace signup closes
          type: string
          format: date-time
          nullable: true
        published:
          description: If the workspace is published
          type: boolean
        chatEnabled:
          description: Is the workspace chat room enabled
          type: boolean
        externalViewLink:
          description: View the workspace in an external location
          type: string
        subjectIdentifier:
          description: The identifier of the subject
          type: string
        materialDefaultLicense:
          description: The default license of the workspace
          type: string
        hasCustomImage:
          description: If the workspace has a custom image
          type: boolean
        curriculumIdentifiers:
          description: The identifiers of the curriculums
          type: array
          items:
            type: string
        workspaceTypeIdentifier:
          description: The identifier of the workspace type
          type: string
        organizationEntityId:
          description: The id of the organization
          type: integer
          format: int64
        urlName:
          description: The url name of the workspace
          type: string
        language:
          description: Main language of the workspace
          $ref: "#/components/schemas/Language"
        mandatority:
          description: Mandatority value of the workspace
          allOf:
            - $ref: "#/components/schemas/WorkspaceMandatority"
          nullable: true
        access:
          description: Access level of the workspace
          $ref: "#/components/schemas/WorkspaceAccess"
        defaultSignupMessage:
          description: Default sign up greeting of the workspace
          $ref: "#/components/schemas/WorkspaceSignupMessage"
        signupGroups:
          description: Sign up groups and their settings
          type: array
          items:
            $ref: "#/components/schemas/WorkspaceSettingsSignupGroup"
        signupMessages:
          description: Sign up messages and their settings
          type: array
          items:
            $ref: "#/components/schemas/WorkspaceSignupMessage"

    WorkspaceSignupMessage:
      type: object
      description: Workspace sign up message, a message that is sent to student when they sign up to a workspace
      required:
        - enabled
        - caption
        - content
      properties:
        id:
          description: The id of the message
          type: integer
          format: int64
        enabled:
          type: boolean
        caption:
          type: string
        content:
          type: string
        signupGroups:
          description: Sign up groups and their settings
          type: array
          items:
            $ref: "#/components/schemas/WorkspaceSignupMessageGroup"

    WorkspaceSettingsSignupGroup:
      type: object
      description: WorkspaceSignupGroup object
      required:
        - userGroupEntityId
        - userGroupName
        - canSignup
      properties:
        userGroupEntityId:
          description: The id of the user group
          type: integer
          format: int64
        userGroupName:
          description: The name of the user group
          type: string
        canSignup:
          description: If the user can signup
          type: boolean

    HopsFormSaveResponse:
      type: object
      required:
        - formData
        - latestChange
      properties:
        formData:
          $ref: "#/components/schemas/AnyValue"
        latestChange:
          $ref: "#/components/schemas/HopsHistoryEntry"

    ErrorModel:
      type: object
      description: ErrorModel object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
