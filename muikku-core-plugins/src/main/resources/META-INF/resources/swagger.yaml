openapi: 3.0.3
info:
  version: 1.0.0
  title: mApi API-spec
security:
  - bearerAuth: []
servers:
  - url: /
paths:
  #/rest/example/examples/:
  #get:
  #  operationId: getExamples
  #  summary: Get examples
  #  description: Get examples
  #  tags:
  #    - YourTag
  #  responses:
  #    "200":
  #      description: ""
  #      content:
  #        application/json:
  #          schema:
  #            type: array
  #            items:
  #              $ref: "#/components/schemas/Example"
  #    "400":
  #      description: Invalid request was sent to the server
  #    "403":
  #      description: Attempted to make a call with unauthorized client
  #    "500":
  #      description: Internal server error

  #post:
  #  operationId:
  #  summary:
  #  description:
  #  tags:
  #    - YourTag
  #  responses:
  #    "200":
  #      description: ""
  #    "400":
  #      description: Invalid request was sent to the server
  #    "403":
  #      description: Attempted to make a call with unauthorized client
  #    "500":
  #      description: Internal server error

  #put:
  #  operationId:
  #  summary:
  #  description:
  #  tags:
  #    - YourTag
  #  responses:
  #    "200":
  #      description: ""
  #    "400":
  #      description: Invalid request was sent to the server
  #    "403":
  #      description: Attempted to make a call with unauthorized client
  #    "500":
  #      description: Internal server error

  #delete:
  #  operationId:
  #  summary:
  #  description:
  #  tags:
  #    - YourTag
  #  responses:
  #    "200":
  #      description: ""
  #    "400":
  #      description: Invalid request was sent to the server
  #    "403":
  #      description: Attempted to make a call with unauthorized client
  #    "500":
  #      description: Internal server error

  #ANNNOUNCER
  /rest/announcer/announcements:
    get:
      operationId: getAnnouncements
      summary: Get announcements with defined parameters
      description: Get announcements with defined parameters. Depending on the parameters, the result can be filtered by workspace, archived, editable, time frame, etc.
      tags:
        - Announcer
      parameters:
        - name: hideEnvironmentAnnouncements
          in: query
          description: Hide environment announcements
          schema:
            type: boolean
            default: false
        - name: hideWorkspaceAnnouncements
          in: query
          description: Hide workspace announcements
          schema:
            type: boolean
            default: false
        - name: hideGroupAnnouncements
          in: query
          description: Hide group announcements
          schema:
            type: boolean
            default: false
        - name: workspaceEntityId
          in: query
          description: Workspace entity id
          schema:
            type: integer
        - name: onlyMine
          in: query
          description: Only mine
          schema:
            type: boolean
            default: false
        - name: onlyEditable
          in: query
          description: Only editable
          schema:
            type: boolean
            default: false
        - name: onlyArchived
          in: query
          description: Only archived
          schema:
            type: boolean
            default: false
        - name: timeFrame
          in: query
          description: Announcement time frame
          schema:
            type: string
            enum:
              - ALL
              - CURRENT
              - EXPIRED
              - UPCOMING
              - CURRENTANDEXPIRED
              - CURRENTANDUPCOMING
            default: CURRENT
      responses:
        "200":
          description: Fetch announcements successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Announcement"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

    post:
      operationId: createAnnouncement
      summary: Create announcement with defined request body
      tags:
        - Announcer
      requestBody:
        $ref: "#/components/requestBodies/AnnouncementCreateRequestBody"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Announcement"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  /rest/announcer/announcements/{announcementId}:
    get:
      operationId: getAnnouncement
      summary: Get announcement by id
      tags:
        - Announcer
      parameters:
        - name: announcementId
          in: path
          description: Announcement id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Announcement"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

    put:
      operationId: updateAnnouncement
      summary: Update announcement by id and with defined request body
      tags:
        - Announcer
      parameters:
        - name: announcementId
          in: path
          description: Announcement id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/AnnouncementUpdateRequestBody"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Announcement"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

    delete:
      operationId: deleteAnnouncement
      summary: Delete announcement by id
      tags:
        - Announcer
      parameters:
        - name: announcementId
          in: path
          description: Announcement id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Announcement deleted successfully"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  #ASSESSMENTREQUEST
  /rest/assessmentrequest/workspace/{workspaceEntityId}/assessmentRequests:
    get:
      operationId: getWorkspaceAssessmentRequests
      summary: Get assessment requests
      description: Get assessment requests
      tags:
        - AssessmentRequest
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: studentIdentifier
          in: query
          description: Student identifier
          schema:
            type: string
      responses:
        "200":
          description: "Assessment requests successfully retrieved"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AssessmentRequest"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

    post:
      operationId: createWorkspaceAssessmentRequest
      summary: Create assessment request
      description: Create assessment request
      tags:
        - AssessmentRequest
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/AssessmentRequestCreateRequestBody"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssessmentRequest"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  /rest/assessmentrequest/workspace/{workspaceEntityId}/assessmentRequests/{assessmentRequestId}:
    delete:
      operationId: deleteWorkspaceAssessmentRequest
      summary: Delete assessment request
      description: Delete assessment request
      tags:
        - AssessmentRequest
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: assessmentRequestId
          in: path
          description: Assessment request id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Assessment request deleted successfully"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  #CEEPOS
  /rest/ceepos/manualCompletion/{orderId}:
    post:
      operationId: createCeeposManualCompletion
      summary: Create manual completion
      description: Create manual completion
      tags:
        - Ceepos
      parameters:
        - name: orderId
          in: path
          description: Order id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CeeposPurchase"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/ceepos/order:
    post:
      operationId: createCeeposOrder
      summary: Create order
      description: Create order
      tags:
        - Ceepos
      requestBody:
        $ref: "#/components/requestBodies/CeeposOrderCreateRequestBody"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CeeposPurchase"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/ceepos/order/{orderId}:
    delete:
      operationId: deleteCeeposOrder
      summary: Delete order
      description: Delete order
      tags:
        - Ceepos
      parameters:
        - name: orderId
          in: path
          description: Order id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: "Order deleted successfully"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/ceepos/pay/{orderId}:
    post:
      operationId: createCeeposPay
      summary: Create pay
      description: Create pay
      tags:
        - Ceepos
      parameters:
        - name: orderId
          in: path
          description: Order id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Order created successfully
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/ceepos/products:
    get:
      operationId: getCeeposProducts
      summary: Get products
      description: Get products
      tags:
        - Ceepos
      responses:
        "200":
          description: Ceepos products list successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CeeposPurchaseProduct"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/ceepos/user/{userIdentifier}/order/{orderId}:
    get:
      operationId: getCeeposUserOrder
      summary: Get user order
      description: Get user order
      tags:
        - Ceepos
      parameters:
        - name: userIdentifier
          in: path
          description: User identifier
          required: true
          schema:
            type: string
        - name: orderId
          in: path
          description: Order id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Ceepos user order successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CeeposPurchase"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "404":
          description: Ceepos user order not found
        "500":
          description: Internal server error

  /rest/ceepos/user/{userIdentifier}/orders:
    get:
      operationId: getCeeposUserOrders
      summary: Get user orders
      description: Get user orders
      tags:
        - Ceepos
      parameters:
        - name: userIdentifier
          in: path
          description: User identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Ceepos user orders successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CeeposPurchase"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "404":
          description: Ceepos user orders not found
        "500":
          description: Internal server error

  #CHAT
  /rest/chat/workspaceChatSettings/{workspaceEntityId}:
    get:
      operationId: getWorkspaceChatSettings
      summary: Get workspace chat settings
      description: Get workspace chat settings
      tags:
        - Chat
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Workspace chat settings successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceChatStatus"
        "400":
          description: Invalid request was sent to the server
        "404":
          description: Workspace chat settings not found
        "500":
          description: Internal server error
    put:
      operationId: updateWorkspaceChatSettings
      summary: Update workspace chat settings
      description: Update workspace chat settings
      tags:
        - Chat
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceChatStatusUpdateRequestBody"
      responses:
        "200":
          description: Workspace chat settings successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceChatStatus"
        "204":
          description: Workspace chat settings successfully updated
        "400":
          description: Invalid request was sent to the server
        "404":
          description: Workspace chat settings not found
        "500":
          description: Internal server error

  #COMMUNICATOR
  /rest/communicator/communicatormessages/{messageId}:
    get:
      operationId: getCommunicatorMessage
      summary: Get communicator message
      description: Get communicator message
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/messages:
    post:
      operationId: createCommunicatorMessage
      summary: Create communicator message
      description: Create communicator message
      tags:
        - Communicator
      requestBody:
        $ref: "#/components/requestBodies/CommunicatorMessageCreateRequestBody"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/messages/{messageThreadId}:
    get:
      operationId: getCommunicatorMessageThread
      summary: Get communicator message thread
      description: Get communicator message thread
      tags:
        - Communicator
      parameters:
        - name: messageThreadId
          in: path
          description: Communicator message thread id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageThreadExpanded"
        "400":
          description: Invalid request was sent to the server
        "404":
          description: Communicator message thread not found
        "500":
          description: Internal server error

    post:
      operationId: createCommunicatorMessageToThread
      summary: Update communicator message
      description: Update communicator message
      tags:
        - Communicator
      parameters:
        - name: messageThreadId
          in: path
          description: Communicator message thread id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/CommunicatorMessageUpdateRequestBody"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/messages/{messageId}/labels:
    post:
      operationId: addCommunicatorMessageLabel
      summary: Add communicator message label
      description: Add communicator message label
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/CommunicatorMessageLabelRequestBody"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageThreadLabel"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "404":
          description: Communicator message not found
        "500":
          description: Internal server error

  /rest/communicator/messages/{messageId}/labels/{labelId}:
    delete:
      operationId: deleteCommunicatorMessageLabel
      summary: Delete communicator message label
      description: Delete communicator message label
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
        - name: labelId
          in: path
          description: Communicator message label id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: "Communicator message label deleted successfully"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "404":
          description: Communicator message not found

  /rest/communicator/receiveditemscount:
    get:
      operationId: getCommunicatorReceivedItemsCount
      summary: Get communicator received items count
      description: Get communicator received items count
      tags:
        - Communicator
      responses:
        "200":
          description: "Number of received items"
          content:
            application/json:
              schema:
                type: integer
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/recipientsUsersSearch:
    get:
      operationId: getCommunicatorRecipientsUserSearch
      summary: Get communicator recipients user search
      description: Get communicator recipients user search
      tags:
        - Communicator
      parameters:
        - name: q
          in: query
          description: Search string
          schema:
            type: string
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: "Message recipients search results"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/recipientsWorkspacesSearch:
    get:
      operationId: getCommunicatorRecipientsWorkspacesSearch
      summary: Get communicator recipients workspaces search
      description: Get communicator recipients workspaces search
      tags:
        - Communicator
      parameters:
        - name: q
          in: query
          description: Search string
          schema:
            type: string
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: "Workspace recipients search results"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceBasicInfo"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/items:
    get:
      operationId: getCommunicatorThreads
      summary: Get communicator threads
      description: Get communicator threads
      tags:
        - Communicator
      parameters:
        - name: labelId
          in: query
          description: Label id
          schema:
            type: integer
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
        - name: onlyUnread
          in: query
          description: Only unread
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: "Communicator threads"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MessageThread"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/items/{messageId}:
    delete:
      operationId: deleteCommunicatorMessage
      summary: Delete communicator message
      description: Delete communicator message
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: "Communicator message deleted successfully"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/items/{messageId}/markasread:
    post:
      operationId: markCommunicatorThreadAsRead
      summary: Mark communicator thread as read
      description: Mark communicator thread as read
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: "Communicator thread marked as read"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/items/{messageId}/markasunread:
    post:
      operationId: markCommunicatorThreadAsUnread
      summary: Mark communicator thread as unread
      description: Mark communicator thread as unread
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: "Communicator thread marked as unread"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/sentitems:
    get:
      operationId: getCommunicatorSentItems
      summary: Get communicator sent items
      description: Get communicator sent items
      tags:
        - Communicator
      parameters:
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: "Communicator sent items"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MessageThread"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/sentitems/{messageId}:
    get:
      operationId: getCommunicatorSentItem
      summary: Get communicator sent item
      description: Get communicator sent item
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Communicator sent item"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageThreadExpanded"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    delete:
      operationId: deleteCommunicatorSentItem
      summary: Delete communicator sent item
      description: Delete communicator sent item
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: "Communicator sent item deleted successfully"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/trash:
    get:
      operationId: getCommunicatorTrash
      summary: Get communicator trash
      description: Get communicator trash
      tags:
        - Communicator
      parameters:
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: "Communicator trash"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MessageThread"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/trash/{messageId}:
    get:
      operationId: getCommunicatorTrashItem
      summary: Get communicator trash item
      description: Get communicator trash item
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Communicator trash item"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageThreadExpanded"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    delete:
      operationId: deleteCommunicatorTrashItem
      summary: Delete communicator trash item
      description: Delete communicator trash item
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: "Communicator trash item deleted successfully"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/trash/{messageId}/markasread:
    post:
      operationId: markCommunicatorTrashItemAsRead
      summary: Mark communicator trash item as read
      description: Mark communicator trash item as read
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: "Communicator trash item marked as read"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/trash/{messageId}/markasunread:
    post:
      operationId: markCommunicatorTrashItemAsUnread
      summary: Mark communicator trash item as unread
      description: Mark communicator trash item as unread
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: "Communicator trash item marked as unread"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/trash/{messageId}/restore:
    put:
      operationId: restoreCommunicatorTrashItem
      summary: Restore communicator trash item
      description: Restore communicator trash item
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: "Communicator trash item restored successfully"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/unread/{messageId}:
    get:
      operationId: getCommunicatorUnread
      summary: Get communicator unread
      description: Get communicator unread
      tags:
        - Communicator
      parameters:
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Communicator unread"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageThreadExpanded"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/communicator/searchItems/:
    get:
      operationId: getCommunicatorSearchItems
      summary: Get communicator search items
      description: Get communicator search items
      tags:
        - Communicator
      parameters:
        - name: q
          in: query
          description: Search string
          schema:
            type: string
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: "Communicator search results"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MessageSearchResult"
        "400":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "403":
          description: Attempted to make a call with unauthorized client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "502":
          description: Bad gateway
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"

  /rest/communicator/signatures:
    get:
      operationId: getCommunicatorSignatures
      summary: Get communicator signatures
      description: Get communicator signatures
      tags:
        - Communicator
      responses:
        "200":
          description: Communicator signatures
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommunicatorSignature"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

    post:
      operationId: createCommunicatorSignature
      summary: Create communicator signature
      description: Create communicator signature
      tags:
        - Communicator
      requestBody:
        $ref: "#/components/requestBodies/CommunicatorSignatureCreateRequestBody"
      responses:
        "200":
          description: Communicator signature created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunicatorSignature"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/signatures/{signatureId}:
    put:
      operationId: updateCommunicatorSignature
      summary: Update communicator signature
      description: Update communicator signature
      tags:
        - Communicator
      parameters:
        - name: signatureId
          in: path
          description: Communicator signature id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/CommunicatorSignatureUpdateRequestBody"
      responses:
        "200":
          description: Communicator signature updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunicatorSignature"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

    delete:
      operationId: deleteCommunicatorSignature
      summary: Delete communicator signature
      description: Delete communicator signature
      tags:
        - Communicator
      parameters:
        - name: signatureId
          in: path
          description: Communicator signature id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Communicator signature deleted successfully
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/userLabels:
    get:
      operationId: getCommunicatorUserLabels
      summary: Get communicator user labels
      description: Get communicator user labels
      tags:
        - Communicator
      responses:
        "200":
          description: Communicator user labels
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Label"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

    post:
      operationId: createCommunicatorUserLabel
      summary: Create communicator user label
      description: Create communicator user label
      tags:
        - Communicator
      requestBody:
        $ref: "#/components/requestBodies/CommunicatorCreateLabelRequestBody"
      responses:
        "200":
          description: Communicator user label created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Label"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/userLabels/{labelId}:
    put:
      operationId: updateCommunicatorUserLabel
      summary: Update communicator user label
      description: Update communicator user label
      tags:
        - Communicator
      parameters:
        - name: labelId
          in: path
          description: Communicator user label id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/CommunicatorUpdateLabelRequestBody"
      responses:
        "200":
          description: Communicator user label updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Label"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

    delete:
      operationId: deleteCommunicatorUserLabel
      summary: Delete communicator user label
      description: Delete communicator user label
      tags:
        - Communicator
      parameters:
        - name: labelId
          in: path
          description: Communicator user label id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Communicator user label deleted successfully
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/userLabels/{labelId}/messages:
    get:
      operationId: getCommunicatorUserLabelMessages
      summary: Get communicator user label messages
      description: Get communicator user label messages
      tags:
        - Communicator
      parameters:
        - name: labelId
          in: path
          description: Communicator user label id
          required: true
          schema:
            type: integer
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Communicator user label messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MessageThread"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/communicator/userLabels/{labelId}/messages/{messageId}:
    get:
      operationId: getCommunicatorUserLabelMessage
      summary: Get communicator user label message
      description: Get communicator user label message
      tags:
        - Communicator
      parameters:
        - name: labelId
          in: path
          description: Communicator user label id
          required: true
          schema:
            type: integer
        - name: messageId
          in: path
          description: Communicator message id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Communicator user label message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageThreadExpanded"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  #COURSEPICKER
  /rest/coursepicker/curriculums:
    get:
      operationId: getCoursePickerCurriculums
      summary: Get course picker curriculums
      description: Get course picker curriculums
      tags:
        - Coursepicker
      responses:
        "200":
          description: Course picker curriculums
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Curriculum"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  /rest/coursepicker/organizations:
    get:
      operationId: getCoursePickerOrganizations
      summary: Get course picker organizations
      description: Get course picker organizations
      tags:
        - Coursepicker
      responses:
        "200":
          description: Course picker organizations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organization"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  /rest/coursepicker/workspaces:
    get:
      operationId: getCoursePickerWorkspaces
      summary: Get course picker workspaces
      description: Get course picker workspaces
      tags:
        - Coursepicker
      parameters:
        - name: q
          in: query
          description: Search string
          schema:
            type: string
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Course picker workspaces
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Workspace"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  /rest/coursepicker/workspaces/{workspaceId}:
    get:
      operationId: getCoursePickerWorkspace
      summary: Get course picker workspace
      description: Get course picker workspace
      tags:
        - Coursepicker
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Course picker workspace
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  /rest/coursepicker/workspaces/{workspaceId}/canSignup:
    get:
      operationId: workspaceCanSignUp
      summary: Can user signup to workspace
      description: Can user signup to workspace
      tags:
        - Coursepicker
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Course picker workspace can signup
          content:
            application/json:
              schema:
                type: boolean
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  /rest/coursepicker/workspaces/{workspaceId}/signup:
    post:
      operationId: workspaceSignUp
      summary: Signups user to workspace
      description: Signup user to workspace
      tags:
        - Coursepicker
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: User signed up to workspace successfully
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  #EVALUATION
  /rest/evaluation/compositeAssessmentRequests:
    get:
      operationId: getCompositeAssessmentRequests
      summary: Get composite assessment requests
      description: Get composite assessment requests
      tags:
        - Evaluation
      responses:
        "200":
          description: Composite assessment requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EvaluationAssessmentRequest"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/compositeGradingScales:
    get:
      operationId: getEvaluationGradingScales
      summary: Get evaluation grading systems
      description: Get evaluation grading systems
      tags:
        - Evaluation
      responses:
        "200":
          description: Grading systems
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EvaluationGradeScale"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/interimEvaluationRequest:
    post:
      operationId: createInterimEvaluationRequest
      summary: Create interim evaluation request
      description: Create interim evaluation request
      tags:
        - Evaluation
      requestBody:
        $ref: "#/components/requestBodies/InterimEvaluationRequestCreateRequestBody"
      responses:
        "200":
          description: Interim evaluation request created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InterimEvaluationRequest"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  /rest/evaluation/interimEvaluationRequest/{interimEvaluationRequestId}:
    delete:
      operationId: deleteInterimEvaluationRequest
      summary: Delete interim evaluation request
      description: Delete interim evaluation request
      tags:
        - Evaluation
      parameters:
        - name: interimEvaluationRequestId
          in: path
          description: Interim evaluation request id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Interim evaluation request deleted successfully
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  #/rest/evaluation/workspace/{workspaceId}/interimEvaluationRequest:
  /rest/evaluation/workspace/{workspaceId}/interimEvaluationRequests:
    get:
      operationId: getWorkspaceInterimEvaluationRequests
      summary: Get workspace interim evaluation requests
      description: Get workspace interim evaluation requests
      tags:
        - Evaluation
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Workspace interim evaluation requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InterimEvaluationRequest"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/workspace/{workspaceId}/user/{userEntityId}/workspacematerial/{workspaceMaterialId}/assessment:
    post:
      operationId: saveWorkspaceAssigmentAssessment
      summary: Save workspace material assessment
      description: Save workspace material assessment
      tags:
        - Evaluation
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: userEntityId
          in: path
          description: User entity id
          required: true
          schema:
            type: integer
        - name: workspaceMaterialId
          in: path
          description: Workspace material id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/EvaluationSaveAssignmentAssessmentRequestBody"
      responses:
        "200":
          description: Workspace material assessment created successfully
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: integer

        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/workspace/{workspaceId}/user/{userEntityId}/workspacematerial/{workspaceMaterialId}/assessment/{assessmentId}:
    put:
      operationId: updateWorkspaceAssigmentAssessment
      summary: Update workspace material assessment
      description: Update workspace material assessment
      tags:
        - Evaluation
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: userEntityId
          in: path
          description: User entity id
          required: true
          schema:
            type: integer
        - name: workspaceMaterialId
          in: path
          description: Workspace material id
          required: true
          schema:
            type: integer
        - name: assessmentId
          in: path
          description: Assessment id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/EvaluationUpdateAssignmentAssessmentRequestBody"
      responses:
        "200":
          description: Workspace material assessment updated successfully
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: integer

        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/workspaceMaterial/{workspaceMaterialId}/interimEvaluationRequest:
    get:
      operationId: getWorkspaceMaterialInterimEvaluationRequest
      summary: Get workspace material interim evaluation request
      description: Get workspace material interim evaluation request
      tags:
        - Evaluation
      parameters:
        - name: workspaceMaterialId
          in: path
          description: Workspace material id
          required: true
          schema:
            type: integer
        - name: userEntityId
          in: query
          description: User entity id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Workspace material interim evaluation request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InterimEvaluationRequest"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  /rest/evaluation/workspaces/{workspaceId}/materials/{workspaceMaterialId}/evaluations/:
    get:
      operationId: getWorkspaceMaterialEvaluations
      summary: Get workspace material evaluations
      description: Get workspace material evaluations
      tags:
        - Evaluation
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: workspaceMaterialId
          in: path
          description: Workspace material id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Workspace material evaluations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MaterialEvaluation"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/workspaces/{workspaceId}/students/{studentEntityId}/journalfeedback:
    get:
      operationId: getWorkspaceStudentJournalFeedback
      summary: Get workspace student journal feedback
      description: Get workspace student journal feedback
      tags:
        - Evaluation
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: studentEntityId
          in: path
          description: Student entity id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Workspace student journal feedback
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluationJournalFeedback"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

    post:
      operationId: saveWorkspaceStudentJournalFeedback
      summary: Create workspace student journal feedback
      description: Create workspace student journal feedback
      tags:
        - Evaluation
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: studentEntityId
          in: path
          description: Student entity id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/EvaluationCreateJournalFeedbackRequestBody"
      responses:
        "200":
          description: Workspace student journal feedback created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluationJournalFeedback"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/workspaces/{workspaceId}/students/{studentEntityId}/journalfeedback/{journalFeedbackId}:
    delete:
      operationId: deleteWorkspaceStudentJournalFeedback
      summary: Delete workspace student journal feedback
      description: Delete workspace student journal feedback
      tags:
        - Evaluation
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: studentEntityId
          in: path
          description: Student entity id
          required: true
          schema:
            type: integer
        - name: journalFeedbackId
          in: path
          description: Journal feedback id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Workspace student journal feedback deleted successfully
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/workspaces/{workspaceId}/students/{studentEntityId}/activity:
    get:
      operationId: getWorkspaceStudentActivity
      summary: Get workspace student activity
      description: Get workspace student activity
      tags:
        - Evaluation
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: studentEntityId
          in: path
          description: Student entity id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Workspace student activity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceActivity"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/workspaceuser/{workspaceUserEntityId}/assessment:
    post:
      operationId: saveWorkspaceUserAssessment
      summary: Save workspace user assessment
      description: Save workspace user assessment
      tags:
        - Evaluation
      parameters:
        - name: workspaceUserEntityId
          in: path
          description: Workspace user entity id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/EvaluationSaveWorkspaceUserAssessmentRequestBody"
      responses:
        "200":
          description: Workspace user assessment created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Assessment"

        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

    put:
      operationId: updateWorkspaceUserAssessment
      summary: Update workspace user assessment
      description: Update workspace user assessment
      tags:
        - Evaluation
      parameters:
        - name: workspaceUserEntityId
          in: path
          description: Workspace user entity id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/EvaluationUpdateWorkspaceUserAssessmentRequestBody"
      responses:
        "200":
          description: Workspace user assessment updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Assessment"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/workspaceuser/{workspaceUserEntityId}/evaluationrequestarchive:
    put:
      operationId: archiveWorkspaceUserEvaluationRequest
      summary: Archive workspace user evaluation request
      description: Archive workspace user evaluation request
      tags:
        - Evaluation
      parameters:
        - name: workspaceUserEntityId
          in: path
          description: Workspace user entity id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Workspace user evaluation request archived successfully
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/workspaceuser/{workspaceUserEntityId}/events:
    get:
      operationId: getWorkspaceUserEvents
      summary: Get workspace user events
      description: Get workspace user events
      tags:
        - Evaluation
      parameters:
        - name: workspaceUserEntityId
          in: path
          description: Workspace user entity id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Workspace user events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EvaluationEvent"
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client

  /rest/evaluation/workspaceuser/{workspaceUserEntityId}/supplementationrequest:
    post:
      operationId: saveWorkspaceUserSupplementationRequest
      summary: Create workspace user supplementation request
      description: Create workspace user supplementation request
      tags:
        - Evaluation
      parameters:
        - name: workspaceUserEntityId
          in: path
          description: Workspace user entity id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/EvaluationSaveSupplementationRequestRequestBody"
      responses:
        "200":
          description: Workspace user supplementation request created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluationSupplementationRequest"

        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

    put:
      operationId: updateWorkspaceUserSupplementationRequest
      summary: Update workspace user supplementation request
      description: Update workspace user supplementation request
      tags:
        - Evaluation
      parameters:
        - name: workspaceUserEntityId
          in: path
          description: Workspace user entity id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/EvaluationUpdateSupplementationRequestRequestBody"
      responses:
        "200":
          description: Workspace user supplementation request updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluationSupplementationRequest"

        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/workspaceuser/{workspaceUserEntityId}/supplementationrequest/{supplementationRequestId}:
    delete:
      operationId: deleteWorkspaceUserSupplementationRequest
      summary: Delete workspace user supplementation request
      description: Delete workspace user supplementation request
      tags:
        - Evaluation
      parameters:
        - name: workspaceUserEntityId
          in: path
          description: Workspace user entity id
          required: true
          schema:
            type: integer
        - name: supplementationRequestId
          in: path
          description: Supplementation request id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Workspace user supplementation request deleted successfully
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  /rest/evaluation/workspaceuser/{workspaceUserEntityId}/workspaceassessment/{workspaceAssessmentId}:
    delete:
      operationId: deleteWorkspaceUserWorkspaceAssessment
      summary: Delete workspace user workspace assessment
      description: Delete workspace user workspace assessment
      tags:
        - Evaluation
      parameters:
        - name: workspaceUserEntityId
          in: path
          description: Workspace user entity id
          required: true
          schema:
            type: integer
        - name: workspaceAssessmentId
          in: path
          description: Workspace assessment id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Workspace user workspace assessment deleted successfully
        "400":
          description: Invalid request was sent to the server
        "403":
          description: Attempted to make a call with unauthorized client
        "500":
          description: Internal server error

  #FEED
  /rest/feed/feeds/{feedReadTarget}:
    get:
      operationId: getFeeds
      summary: Get feeds
      description: Get feeds
      tags:
        - Feeds
      parameters:
        - name: feedReadTarget
          in: path
          description: Feed read target
          required: true
          schema:
            type: string
        - name: numItems
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Feeds
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #CREDENTIALS
  /rest/forgotpassword/credentialReset:
    post:
      operationId: updateCredentials
      summary: Reset password
      description: Reset password
      tags:
        - Credentials
      requestBody:
        $ref: "#/components/requestBodies/ResetPasswordRequestBody"
      responses:
        "204":
          description: Password reset successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forgotpassword/credentialReset/{hash}:
    get:
      operationId: loadCredentials
      summary: Get reset password
      description: Get reset password
      tags:
        - Credentials
      parameters:
        - name: hash
          in: path
          description: Reset password hash
          required: true
          schema:
            type: string
      responses:
        "200":
          description: load credentials
          content:
            application/json:
              schema:
                properties:
                  username:
                    type: string
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forgotpassword/reset:
    post:
      operationId: resetCredentials
      summary: Reset password
      description: Reset password
      tags:
        - Credentials
      requestBody:
        $ref: "#/components/requestBodies/ResetPasswordRequestBody"
      responses:
        "200":
          description: Password reset successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  # DISCUSSION
  /rest/forum/areas:
    get:
      operationId: getDiscussionAreas
      summary: Get discussion areas
      description: Get discussion areas
      tags:
        - Discussion
      responses:
        "200":
          description: discussion areas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DiscussionArea"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createDiscussionArea
      summary: Create discussion area
      description: Create discussion area
      tags:
        - Discussion
      requestBody:
        $ref: "#/components/requestBodies/DiscussionAreaCreateRequestBody"
      responses:
        "200":
          description: Discussion area created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionArea"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forum/areas/{areaId}:
    put:
      operationId: updateDiscussionArea
      summary: Update discussion area
      description: Update discussion area
      tags:
        - Discussion
      parameters:
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/DiscussionAreaUpdateRequestBody"
      responses:
        "200":
          description: Discussion area updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionArea"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    delete:
      operationId: deleteDiscussionArea
      summary: Delete discussion area
      description: Delete discussion area
      tags:
        - Discussion
      parameters:
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Discussion area deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forum/areas/{areaId}/threads:
    get:
      operationId: getDiscussionThreads
      summary: Get discussion threads
      description: Get discussion threads
      tags:
        - Discussion
      parameters:
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Discussion threads
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DiscussionThread"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createDiscussionThread
      summary: Create discussion thread
      description: Create discussion thread
      tags:
        - Discussion
      parameters:
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/DiscussionThreadCreateRequestBody"
      responses:
        "200":
          description: Discussion thread created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionThread"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forum/areas/{areaId}/threads/{threadId}:
    put:
      operationId: updateDiscussionThread
      summary: Update discussion thread
      description: Update discussion thread
      tags:
        - Discussion
      parameters:
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/DiscussionThreadUpdateRequestBody"
      responses:
        "200":
          description: Discussion thread updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionThread"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    delete:
      operationId: deleteDiscussionThread
      summary: Delete discussion thread
      description: Delete discussion thread
      tags:
        - Discussion
      parameters:
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Discussion thread deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forum/areas/{areaId}/threads/{threadId}/replies:
    get:
      operationId: getDiscussionThreadReplies
      summary: Get discussion thread replies
      description: Get discussion thread replies
      tags:
        - Discussion
      parameters:
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Discussion thread replies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DiscussionThreadReply"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createDiscussionThreadReply
      summary: Create discussion thread reply
      description: Create discussion thread reply
      tags:
        - Discussion
      parameters:
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/DiscussionThreadReplyCreateRequestBody"
      responses:
        "200":
          description: Discussion thread reply created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionThreadReply"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forum/areas/{areaId}/threads/{threadId}/replies/{replyId}:
    put:
      operationId: updateDiscussionThreadReply
      summary: Update discussion thread reply
      description: Update discussion thread reply
      tags:
        - Discussion
      parameters:
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
        - name: replyId
          in: path
          description: Discussion thread reply id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/DiscussionThreadReplyUpdateRequestBody"
      responses:
        "200":
          description: Discussion thread reply updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionThreadReply"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    delete:
      operationId: deleteDiscussionThreadReply
      summary: Delete discussion thread reply
      description: Delete discussion thread reply
      tags:
        - Discussion
      parameters:
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
        - name: replyId
          in: path
          description: Discussion thread reply id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Discussion thread reply deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forum/areas/{areaId}/threads/{threadId}/toggleSubscription:
    post:
      operationId: toggleDiscussionThreadSubscription
      summary: Toggle discussion thread subscription
      description: Toggle discussion thread subscription
      tags:
        - Discussion
      parameters:
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Discussion thread subscription toggled successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionSubscribedThread"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forum/areas/{areaId}/toggleSubscription:
    post:
      operationId: toggleDiscussionAreaSubscription
      summary: Toggle discussion area subscription
      description: Toggle discussion area subscription
      tags:
        - Discussion
      parameters:
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Discussion area subscription toggled successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionSubscribedArea"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forum/environmentAreaPermissions:
    get:
      operationId: getDiscussionEnvironmentAreaPermissions
      summary: Get discussion environment area permissions
      description: Get discussion environment area permissions
      tags:
        - Discussion
      responses:
        "200":
          description: Discussion environment area permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forum/isAvailable:
    get:
      operationId: isDiscussionAvailable
      summary: Is discussion available
      description: Is discussion available
      tags:
        - Discussion
      responses:
        "200":
          description: Discussion available
          content:
            application/json:
              schema:
                type: boolean
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forum/latest:
    get:
      operationId: getLatestDiscussionThreads
      summary: Get latest discussion threads
      description: Get latest discussion threads
      tags:
        - Discussion
      parameters:
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Latest discussion threads
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DiscussionThread"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forum/subscriptionAreas/{userId}:
    get:
      operationId: getDiscussionSubscribedAreas
      summary: Get discussion subscribed areas
      description: Get discussion subscribed areas
      tags:
        - Discussion
      parameters:
        - name: userId
          in: path
          description: User id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Discussion subscribed areas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DiscussionSubscribedArea"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/forum/subscriptionThreads/{userId}:
    get:
      operationId: getDiscussionSubscribedThreads
      summary: Get discussion subscribed threads
      description: Get discussion subscribed threads
      tags:
        - Discussion
      parameters:
        - name: userId
          in: path
          description: User id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Discussion subscribed threads
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DiscussionSubscribedThread"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #WORKSPACE DISCUSSION
  /rest/workspace/workspaces/{workspaceentityId}/forumAreas:
    get:
      operationId: getWorkspaceDiscussionAreas
      summary: Get workspace discussion areas
      description: Get workspace discussion areas
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceentityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Workspace discussion areas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DiscussionArea"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createWorkspaceDiscussionArea
      summary: Create workspace discussion area
      description: Create workspace discussion area
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceentityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/DiscussionAreaCreateRequestBody"
      responses:
        "200":
          description: Workspace discussion area created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionArea"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceentityId}/forumAreas/{areaId}:
    put:
      operationId: updateWorkspaceDiscussionArea
      summary: Update workspace discussion area
      description: Update workspace discussion area
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceentityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/DiscussionAreaUpdateRequestBody"
      responses:
        "200":
          description: Workspace discussion area updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionArea"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    delete:
      operationId: deleteWorkspaceDiscussionArea
      summary: Delete workspace discussion area
      description: Delete workspace discussion area
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceentityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Workspace discussion area deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceentityId}/forumAreas/{areaId}/threads:
    get:
      operationId: getWorkspaceDiscussionThreads
      summary: Get workspace discussion threads
      description: Get workspace discussion threads
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceentityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Workspace discussion threads
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DiscussionThread"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createWorkspaceDiscussionThread
      summary: Create workspace discussion thread
      description: Create workspace discussion thread
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceentityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/DiscussionThreadCreateRequestBody"
      responses:
        "200":
          description: Workspace discussion thread created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionThread"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceentityId}/forumAreas/{areaId}/threads/{threadId}:
    put:
      operationId: updateWorkspaceDiscussionThread
      summary: Update workspace discussion thread
      description: Update workspace discussion thread
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceentityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/DiscussionThreadUpdateRequestBody"
      responses:
        "200":
          description: Workspace discussion thread updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionThread"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    delete:
      operationId: deleteWorkspaceDiscussionThread
      summary: Delete workspace discussion thread
      description: Delete workspace discussion thread
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceentityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Workspace discussion thread deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceentityId}/forumAreas/{areaId}/threads/{threadId}/replies:
    get:
      operationId: getWorkspaceDiscussionThreadReplies
      summary: Get workspace discussion thread replies
      description: Get workspace discussion thread replies
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceentityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Workspace discussion thread replies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DiscussionThreadReply"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createWorkspaceDiscussionThreadReply
      summary: Create workspace discussion thread reply
      description: Create workspace discussion thread reply
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceentityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/DiscussionThreadReplyCreateRequestBody"
      responses:
        "200":
          description: Workspace discussion thread reply created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionThreadReply"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceentityId}/forumAreas/{areaId}/threads/{threadId}/replies/{replyId}:
    put:
      operationId: updateWorkspaceDiscussionThreadReply
      summary: Update workspace discussion thread reply
      description: Update workspace discussion thread reply
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceentityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
        - name: replyId
          in: path
          description: Discussion thread reply id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/DiscussionThreadReplyUpdateRequestBody"
      responses:
        "200":
          description: Workspace discussion thread reply updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionThreadReply"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    delete:
      operationId: deleteWorkspaceDiscussionThreadReply
      summary: Delete workspace discussion thread reply
      description: Delete workspace discussion thread reply
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceentityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: areaId
          in: path
          description: Discussion area id
          required: true
          schema:
            type: integer
        - name: threadId
          in: path
          description: Discussion thread id
          required: true
          schema:
            type: integer
        - name: replyId
          in: path
          description: Discussion thread reply id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Workspace discussion thread reply deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/forumStatistics:
    get:
      operationId: getWorkspaceDiscussionStatistics
      summary: Get workspace discussion statistics
      description: Get workspace discussion statistics
      tags:
        - WorkspaceDiscussion
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: userIdentifier
          in: query
          description: User identifier
          schema:
            type: string
      responses:
        "200":
          description: Workspace discussion statistics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscussionWorkspaceStatistic"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #GUIDER
  /rest/guider/student/{studentId}/contactLog:
    post:
      operationId: createContactLogEvents
      summary: Create contact log event
      description: Create contact log event
      tags:
        - Guider
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/ContactLogCreateEventRequestBody"
      responses:
        "200":
          description: Contact log event created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactLogEvent"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/guider/student/{studentId}/contactLog/{entryId}:
    put:
      operationId: updateContactLogEvent
      summary: Update contact log event
      description: Update contact log event
      tags:
        - Guider
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: integer
        - name: entryId
          in: path
          description: Contact log event id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/ContactLogUpdateEventRequestBody"
      responses:
        "200":
          description: Contact log event updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactLogEvent"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error
    delete:
      operationId: deleteContactLogEvent
      summary: Delete contact log event
      description: Delete contact log event
      tags:
        - Guider
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: integer
        - name: entryId
          in: path
          description: Contact log event id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Contact log event deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/guider/student/{studentId}/contactLog/{entryId}/comments:
    post:
      operationId: createContactLogEventComment
      summary: Create contact log event comment
      description: Create contact log event comment
      tags:
        - Guider
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: integer
        - name: entryId
          in: path
          description: Contact log event id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/ContactLogEventCommentCreateRequestBody"
      responses:
        "200":
          description: Contact log event comment created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactLogEventComment"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/guider/student/{studentId}/contactLog/{entryId}/comments/{commentId}:
    put:
      operationId: updateContactLogEventComment
      summary: Update contact log event comment
      description: Update contact log event comment
      tags:
        - Guider
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: integer
        - name: entryId
          in: path
          description: Contact log event id
          required: true
          schema:
            type: integer
        - name: commentId
          in: path
          description: Contact log event comment id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/ContactLogEventCommentUpdateRequestBody"
      responses:
        "200":
          description: Contact log event comment updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactLogEventComment"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    delete:
      operationId: deleteContactLogEventComment
      summary: Delete contact log event comment
      description: Delete contact log event comment
      tags:
        - Guider
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: integer
        - name: entryId
          in: path
          description: Contact log event id
          required: true
          schema:
            type: integer
        - name: commentId
          in: path
          description: Contact log event comment id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Contact log event comment deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/guider/students:
    get:
      operationId: getGuiderStudents
      summary: Get students
      description: Get students
      tags:
        - Guider
      parameters:
        - name: q
          in: query
          description: Search query
          schema:
            type: string
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
        - name: flags
          in: query
          description: Flags
          schema:
            type: array
            items:
              type: integer
        - name: workspaceIds
          in: query
          description: Workspace ids
          schema:
            type: array
            items:
              type: integer
        - name: userGroupIds
          in: query
          description: User group ids
          schema:
            type: array
            items:
              type: integer
        - name: flagOwnerIdentifier
          in: query
          description: Falg owner identifier
          schema:
            type: string
      responses:
        "200":
          description: Students
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GuiderStudent"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/guider/students/{studentId}:
    get:
      operationId: getGuiderStudent
      summary: Get student
      description: Get student
      tags:
        - Guider
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GuiderStudent"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/guider/students/{studentId}/workspaces:
    get:
      operationId: getStudentWorkspaces
      summary: Get student workspaces
      description: Get student workspaces
      tags:
        - Guider
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: string
        - name: active
          in: query
          description: Only active workspaces
          schema:
            type: boolean
      responses:
        "200":
          description: Student workspaces
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceWithAddons"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/guider/users/{identifier}/files:
    get:
      operationId: getGuiderUserFiles
      summary: Get guider user files
      description: Get guider user files
      tags:
        - Guider
      parameters:
        - name: identifier
          in: path
          description: User identifier
          required: true
          schema:
            type: string
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Guider user files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserFile"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/guider/users/{identifier}/latestNotifications:
    get:
      operationId: getGuiderUserLatestNotification
      summary: Get guider user latest notifications
      description: Get guider user latest notifications
      tags:
        - Guider
      parameters:
        - name: identifier
          in: path
          description: User identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Guider user latest notifications
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GuiderStudentNotification"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/guider/users/{userId}/contactLog:
    get:
      operationId: getGuiderUserContactLog
      summary: Get guider user contact log
      description: Get guider user contact log
      tags:
        - Guider
      parameters:
        - name: userId
          in: path
          description: User id
          required: true
          schema:
            type: integer
        - name: resultsPerPage
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
        - name: page
          in: query
          description: First result
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Guider user contact log
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ContactLog"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #HOPS
  /rest/hops/isHopsAvailable/{studentIdentifier}:
    get:
      operationId: isHopsAvailable
      summary: Is hops available
      description: Is hops available
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Hops available
          content:
            application/json:
              schema:
                type: boolean
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/listWorkspaceSuggestions:
    get:
      operationId: listWorkspaceSuggestions
      summary: List workspace suggestions
      description: List workspace suggestions
      tags:
        - Hops
      parameters:
        - name: subject
          in: query
          description: subject
          required: true
          schema:
            type: string
        - name: courseNumber
          in: query
          description: Workspace entity id
          required: true
          schema:
            type: integer
        - name: userEntityId
          required: true
          in: query
          description: userEntityId
          schema:
            type: integer
      responses:
        "200":
          description: Workspace suggestions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceSuggestion"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/student/{studentIdentifier}:
    get:
      operationId: getStudentHops
      summary: Get student
      description: Get student
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Hops of student. If no hops exists, empty hops is returned. Data is JSON object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: saveStudentHops
      summary: Save student's hops
      description: Save student's hops
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/HopsSaveRequestBody"
      responses:
        "200":
          description: Student created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/student/{studentIdentifier}/alternativeStudyOptions:
    get:
      operationId: getStudentAlternativeStudyOptions
      summary: Get student alternative study options
      description: Get student alternative study options
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student alternative study options
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlternativeStudyOption"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: saveStudentAlternativeStudyOptions
      summary: Save student alternative study options
      description: Save student alternative study options
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/AlternativeStudyOptionSaveRequestBody"
      responses:
        "200":
          description: Student alternative study options saved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AlternativeStudyOption"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/student/{studentIdentifier}/history:
    get:
      operationId: getStudentHopsHistoryEntries
      summary: Get student hops history entries
      description: Get student hops history entries
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Student hops history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HopsHistoryEntry"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/student/{studentIdentifier}/history/{entryId}:
    put:
      operationId: updateStudentHopsHistoryEntry
      summary: Update student hops history entry
      description: Update student hops history entry
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
        - name: entryId
          in: path
          description: Hops history entry id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/HopsHistoryEntryUpdateRequestBody"
      responses:
        "200":
          description: Student hops history entry updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HopsHistoryEntry"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/student/{studentIdentifier}/hopsGoals:
    get:
      operationId: getStudentHopsGoals
      summary: Get student hops goals
      description: Get student hops goals
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student hops goals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HopsGoals"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: saveStudentHopsGoals
      summary: Save student hops goals
      description: Save student hops goals
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/HopsGoalsUpdateRequestBody"
      responses:
        "200":
          description: Student hops goals saved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HopsGoals"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/student/{studentIdentifier}/optionalSuggestion:
    post:
      operationId: createOptionalSuggestion
      summary: Create optional suggestion for student
      description: Create optional suggestion for student
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/OptionalSuggestionCreateRequestBody"

      responses:
        "200":
          description: Student optional suggestion created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptionalCourseSuggestion"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/student/{studentIdentifier}/optionalSuggestions:
    get:
      operationId: getStudentOptionalSuggestions
      summary: Get student optional suggestions
      description: Get student optional suggestions
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student optional suggestions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OptionalCourseSuggestion"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/student/{studentIdentifier}/studentChoices:
    get:
      operationId: getStudentCourseChoices
      summary: Get student course choices
      description: Get student course choices
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student choices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StudentCourseChoice"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error
    post:
      operationId: saveStudentCourseChoices
      summary: Save student course choices
      description: Save student course choices
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/StudentCourseChoiceSaveRequestBody"
      responses:
        "200":
          description: Student course choices saved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StudentCourseChoice"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/student/{studentIdentifier}/studentInfo:
    get:
      operationId: getStudentInfo
      summary: Get student info
      description: Get student info
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudentInfo"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/student/{studentIdentifier}/studyActivity:
    get:
      operationId: getStudentStudyActivity
      summary: Get student study activity
      description: Get student study activity
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
        - name: startDate
          in: query
          description: Start date
          required: true
          schema:
            type: string
        - name: endDate
          in: query
          description: End date
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student study activity
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StudentStudyActivity"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/student/{studentIdentifier}/studyHours:
    get:
      operationId: getStudentStudyHours
      summary: Get student study hours
      description: Get student study hours
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student study hours
          content:
            application/json:
              schema:
                type: integer
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: saveStudentStudyHours
      summary: Save student study hours
      description: Save student study hours
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/StudentStudyHoursSaveRequestBody"
      responses:
        "200":
          description: Student study hours saved successfully
          content:
            application/json:
              schema:
                type: integer
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/hops/student/{studentIdentifier}/toggleSuggestion:
    post:
      operationId: toggleSuggestion
      summary: Toggle suggestion
      description: Toggle suggestion
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ToggleSuggestionCreateRequestBody"
      responses:
        "204":
          description: Suggestion toggled successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    #FIX
    delete:
      operationId: deleteToggleSuggestion
      summary: Delete toggle suggestion
      description: Delete toggle suggestion
      tags:
        - Hops
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      #requestBody:
      #  $ref: "#/components/requestBodies/ToggleSuggestionCreateRequestBody"
      responses:
        "204":
          description: Suggestion toggled successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #MATERIALS
  /rest/materials/binary:
    post:
      operationId: createBinaryMaterial
      summary: Create binary material
      description: Create binary material
      tags:
        - Materials
      requestBody:
        $ref: "#/components/requestBodies/BinaryMaterialCreateRequestBody"
      responses:
        "200":
          description: Binary material created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/materials/html:
    post:
      operationId: createHtmlMaterial
      summary: Create html material
      description: Create html material
      tags:
        - Materials
      requestBody:
        $ref: "#/components/requestBodies/HtmlMaterialCreateRequestBody"
      responses:
        "200":
          description: Html material created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/materials/html/{id}:
    get:
      operationId: getHtmlMaterial
      summary: Get html material
      description: Get html material
      tags:
        - Materials
      parameters:
        - name: id
          in: path
          description: Html material id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Html material
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaterialContentNode"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/materials/html/{id}/content:
    put:
      operationId: updateHtmlMaterialContent
      summary: Update html material content
      description: Update html material content
      tags:
        - Materials
      parameters:
        - name: id
          in: path
          description: Html material id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/MaterialContentUpdateRequestBody"
      responses:
        "204":
          description: Html material content updated successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/materials/material/{materialId}:
    put:
      operationId: updateMaterial
      summary: Update material
      description: Update material
      tags:
        - Materials
      parameters:
        - name: materialId
          in: path
          description: Material id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/MaterialUpdateRequestBody"
      responses:
        "204":
          description: Material updated successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/materials/material/{materialId}/workspaceMaterials:
    get:
      operationId: getWorkspaceMaterials
      summary: Get workspace materials
      description: Get workspace materials
      tags:
        - Materials
      parameters:
        - name: materialId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Workspace materials
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/materials/material/{materialId}/producers:
    post:
      operationId: createMaterialProducer
      summary: Create material producer
      description: Create material producer
      tags:
        - Materials
      parameters:
        - name: materialId
          in: path
          description: Material id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/MaterialProducerCreateRequestBody"
      responses:
        "200":
          description: Material producer created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaterialContentNodeProducer"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/materials/material/{materialId}/producers/{producerId}:
    delete:
      operationId: deleteMaterialProducer
      summary: Delete material producer
      description: Delete material producer
      tags:
        - Materials
      parameters:
        - name: materialId
          in: path
          description: Material id
          required: true
          schema:
            type: integer
        - name: producerId
          in: path
          description: Material producer id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Material producer deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #MATRICULATION
  /rest/matriculation/exams:
    get:
      operationId: getExams
      summary: Get exams
      description: Get exams
      tags:
        - Matriculation
      responses:
        "200":
          description: Exams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MatriculationEnrollemnt"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/matriculation/exams/{examId}/enrollments:
    post:
      operationId: createEnrollment
      summary: Create enrollment
      description: Create enrollment
      tags:
        - Matriculation
      parameters:
        - name: examId
          in: path
          description: Exam id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/MatriculationEnrollmentsCreateRequestBody"
      responses:
        "200":
          description: Enrollment created successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/matriculation/exams/{examId}/initialData/{userIdentifier}:
    get:
      operationId: getInitialData
      summary: Get initial data
      description: Get initial data
      tags:
        - Matriculation
      parameters:
        - name: examId
          in: path
          description: Exam id
          required: true
          schema:
            type: integer
        - name: userIdentifier
          in: path
          description: User id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Initial data in JSON format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatriculationStudentData"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/matriculation/exams/{examId}/savedEnrollments/{userIdentifier}:
    get:
      operationId: getSavedEnrollments
      summary: Get saved enrollments
      description: Get saved enrollments
      tags:
        - Matriculation
      parameters:
        - name: examId
          in: path
          description: Exam id
          required: true
          schema:
            type: integer
        - name: userIdentifier
          in: path
          description: identifier of user
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Saved enrollments
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatriculationStudentExamination"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #ME
  /rest/me/guidanceCounselors:
    get:
      operationId: getGuidanceCounselors
      summary: Get guidance counselors
      description: Get guidance counselors
      tags:
        - Me
      parameters:
        - name: properties
          in: query
          description: Properties
          schema:
            type: string
      responses:
        "200":
          description: Guidance counselors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GuidanceCouncelorContact"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/me/locale:
    get:
      operationId: getLocale
      summary: Get locale
      description: Get locale
      tags:
        - Me
      responses:
        "200":
          description: Locale
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocalizationLocale"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: setLocale
      summary: Set locale
      description: Set locale
      tags:
        - Me
      requestBody:
        $ref: "#/components/requestBodies/LocalizationSetRequestBody"
      responses:
        "204":
          description: Locale set successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #NOTES
  /rest/notes/note:
    post:
      operationId: createNote
      summary: Create note
      description: Create note
      tags:
        - Notes
      requestBody:
        $ref: "#/components/requestBodies/NoteCreateRequestBody"
      responses:
        "200":
          description: Note created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/notes/note/{noteId}:
    put:
      operationId: updateNote
      summary: Update note
      description: Update note
      tags:
        - Notes
      parameters:
        - name: noteId
          in: path
          description: Note id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/NoteUpdateRequestBody"
      responses:
        "200":
          description: Note updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/notes/note/{noteId}/toggleArchived:
    put:
      operationId: toggleNoteArchived
      summary: Toggle note archived
      description: Toggle note archived
      tags:
        - Notes
      parameters:
        - name: noteId
          in: path
          description: Note id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Note archived toggled successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest//notes/owner/{studentId}:
    get:
      operationId: getNotes
      summary: Get notes
      description: Get notes
      tags:
        - Notes
      parameters:
        - name: studentId
          in: path
          description: studentId
          required: true
          schema:
            type: integer
        - name: listArchived
          in: query
          description: List archived
          schema:
            type: boolean
      responses:
        "200":
          description: Notes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Note"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #ORGANIZATION
  /rest/organizationUserManagement/contactPersons:
    get:
      operationId: getContactPersons
      summary: Get contact persons
      description: Get contact persons
      tags:
        - Organization
      responses:
        "200":
          description: Contact persons
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrganizationContact"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/organizationUserManagement/staffMembers:
    get:
      operationId: getOrganizationStaffMembers
      summary: Get staff member
      description: Get staff member
      tags:
        - Organization
      parameters:
        - name: q
          in: query
          description: query string
          schema:
            type: string
        - name: properties
          in: query
          description: Properties
          schema:
            type: string
        - name: userGroupIds
          in: query
          description: User group ids
          schema:
            type: array
            items:
              type: integer
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Staff members object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSearchResult"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/organizationUserManagement/students:
    get:
      operationId: getOrganizationStudents
      summary: Get students
      description: Get students
      tags:
        - Organization
      parameters:
        - name: q
          in: query
          description: query string
          schema:
            type: string
        - name: userGroupIds
          in: query
          description: User group ids
          schema:
            type: array
            items:
              type: integer
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Students object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSearchResult"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/organizationUserManagement/studentsSummary:
    get:
      operationId: getOrganizationStudentsSummary
      summary: Get students summary
      description: Get students summary
      tags:
        - Organization
      responses:
        "200":
          description: Students summary
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationStudentsSummary"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/organizationWorkspaceManagement/overview:
    get:
      operationId: getOrganizationWorkspaceOverview
      summary: Get organization workspace overview
      description: Get organization workspace overview
      tags:
        - Organization
      responses:
        "200":
          description: Organization workspace overview
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationWorkspaceSummary"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/organizationWorkspaceManagement/workspaces:
    get:
      operationId: getOrganizationWorkspaces
      summary: Get organization workspaces
      description: Get organization workspaces
      tags:
        - Organization
      parameters:
        - name: q
          in: query
          description: query string
          schema:
            type: string
        - name: subjects
          in: query
          description: Subject ids
          schema:
            type: array
            items:
              type: string
        - name: educationTypes
          in: query
          description: Education type ids
          schema:
            type: array
            items:
              type: string
        - name: curriculums
          in: query
          description: Curriculum ids
          schema:
            type: array
            items:
              type: string
        - name: publicity
          in: query
          description: Publicity restriction
          schema:
            allOf:
              - $ref: "#/components/schemas/PublicityRestriction"
            default: ONLY_PUBLISHED
        - name: templates
          in: query
          description: Template restriction
          schema:
            allOf:
              - $ref: "#/components/schemas/TemplateRestriction"
            default: ONLY_WORKSPACES
        - name: orderBy
          in: query
          description: Order by
          schema:
            type: array
            items:
              type: string
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 50
      responses:
        "200":
          description: Organization workspaces
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/organizationWorkspaceManagement/workspaces/{workspaceId}/staff:
    post:
      operationId: addStaffToWorkspace
      summary: Add staff to workspace
      description: Add staff to workspace
      tags:
        - Organization
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/OrganizationAddStaffToWorkspaceRequestBody"
      responses:
        "204":
          description: Staff added to workspace successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/organizationWorkspaceManagement/workspaces/{workspaceId}/students:
    post:
      operationId: addStudentsToWorkspace
      summary: Add students to workspace
      description: Add students to workspace
      tags:
        - Organization
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/OrganizationAddStudentsToWorkspaceRequestBody"
      responses:
        "204":
          description: Students added to workspace successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #PEDAGOGY
  /rest/pedagogy/form/{studentIdentifier}:
    get:
      operationId: getPedagogyForm
      summary: Get pedagogy form
      description: Get pedagogy form
      tags:
        - Pedagogy
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Pedagogy form
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PedagogyForm"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createPedagogyForm
      summary: Create pedagogy form
      description: Create pedagogy form
      tags:
        - Pedagogy
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/PedagogyFormCreateRequestBody"
      responses:
        "200":
          description: Pedagogy form created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PedagogyForm"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/pedagogy/form/{studentIdentifier}/access:
    get:
      operationId: getPedagogyFormAccess
      summary: Get pedagogy form access
      description: Get pedagogy form access
      tags:
        - Pedagogy
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Pedagogy form access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PedagogyFormAccess"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/pedagogy/form/{studentIdentifier}/formData:
    put:
      operationId: updatePedagogyFormData
      summary: Update pedagogy form data
      description: Update pedagogy form data
      tags:
        - Pedagogy
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/PedagogyFormDataUpdateRequestBody"
      responses:
        "200":
          description: Pedagogy form data updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PedagogyForm"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/pedagogy/form/{studentIdentifier}/state:
    get:
      operationId: getPedagogyFormState
      summary: Get pedagogy form state
      description: Get pedagogy form state
      tags:
        - Pedagogy
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Pedagogy form state
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PedagogyFormState"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    put:
      operationId: updatePedagogyFormState
      summary: Update pedagogy form state
      description: Update pedagogy form state
      tags:
        - Pedagogy
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/PedagogyFormStateUpdateRequestBody"
      responses:
        "200":
          description: Pedagogy form state updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PedagogyForm"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/pedagogy/form/{studentIdentifier}/visibility:
    put:
      operationId: updatePedagogyFormVisibility
      summary: Update pedagogy form visibility
      description: Update pedagogy form visibility
      tags:
        - Pedagogy
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/PedagogyFormVisibilityUpdateRequestBody"
      responses:
        "200":
          description: Pedagogy form visibility updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PedagogyForm"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #HOPSUPPERSECONDARY
  /rest/records/hops:
    get:
      operationId: getHops
      summary: Get hops
      description: Get hops
      tags:
        - HopsUpperSecondary
      responses:
        "200":
          description: Hops
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HopsUppersecondaryData"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    put:
      operationId: updateHops
      summary: Update hops
      description: Update hops
      tags:
        - HopsUpperSecondary
      requestBody:
        $ref: "#/components/requestBodies/HopsUppersecondaryDataUpdateRequestBody"
      responses:
        "200":
          description: Hops updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HopsUppersecondaryData"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/records/hops/{userIdentifier}:
    get:
      operationId: getHopsByUser
      summary: Get hops by user
      description: Get hops by user
      tags:
        - HopsUpperSecondary
      parameters:
        - name: userIdentifier
          in: path
          description: User identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Hops
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HopsUppersecondaryData"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/records/hopseligibility:
    get:
      operationId: getHopsEligibility
      summary: Get hops eligibility
      description: Get hops eligibility
      tags:
        - HopsUpperSecondary
      responses:
        "200":
          description: Hops eligibility
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HOPSEligibility"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/records/matriculationEligibility:
    get:
      operationId: getMatriculationEligibility
      summary: Get matriculation eligibility
      description: Get matriculation eligibility
      tags:
        - Records
      parameters:
        - name: subjectCode
          in: query
          description: Subject code
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Matriculation eligibility
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/records/matriculationSubjects:
    get:
      operationId: getMatriculationSubjects
      summary: Get matriculation subjects
      description: Get matriculation subjects
      tags:
        - Records
      parameters:
        - name: matriculationSubjectsLoaded
          in: query
          description: Subject code
          schema:
            type: boolean
      responses:
        "200":
          description: Matriculation subjects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MatriculationSubject"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/records/studentMatriculationEligibility/{studentIdentifier}:
    get:
      operationId: getStudentMatriculationEligibility
      summary: Get student matriculation eligibility
      description: Get student matriculation eligibility
      tags:
        - Records
      parameters:
        - name: studentIdentifier
          in: path
          description: Student identifier
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student matriculation eligibility
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/records/users/{userIdentifier}/workspaceActivity:
    get:
      operationId: getWorkspaceActivity
      summary: Get workspace activity
      description: Get workspace activity
      tags:
        - Records
      parameters:
        - name: userIdentifier
          in: path
          description: User identifier
          required: true
          schema:
            type: string
        - name: includeTransferCredits
          in: query
          description: String boolean
          schema:
            type: integer
        - name: includeAssignmentStatistics
          in: query
          description: String boolean
          schema:
            type: string
      responses:
        "200":
          description: Workspace activity
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RecordWorkspaceActivityInfo"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/records/workspaces/{workspaceId}:
    get:
      operationId: getRecordsWorkspace
      summary: Get workspace
      description: Get workspace
      tags:
        - Records
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: userIdentifier
          in: query
          required: true
          description: User identifier
          schema:
            type: string
      responses:
        "200":
          description: Workspace
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #USER
  /rest/user/files/:
    post:
      operationId: createFile
      summary: Create file
      description: Create file
      tags:
        - User
      requestBody:
        $ref: "#/components/requestBodies/UserFileCreateRequestBody"
      responses:
        "200":
          description: File created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEntityFile"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/files/{userEntityId}/identifier/{identifier}:
    delete:
      operationId: deleteFile
      summary: Delete file
      description: Delete file
      tags:
        - User
      parameters:
        - name: userEntityId
          in: path
          description: User entity id
          required: true
          schema:
            type: integer
        - name: identifier
          in: path
          description: File identifier
          required: true
          schema:
            type: string
      responses:
        "204":
          description: File deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/flags/:
    get:
      operationId: getFlags
      summary: Get flags
      description: Get flags
      tags:
        - User
      parameters:
        - name: ownerIdentifier
          in: query
          description: Owner identifier
          schema:
            type: string
      responses:
        "200":
          description: Flags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserFlag"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createFlag
      summary: Create flag
      description: Create flag
      tags:
        - User
      requestBody:
        $ref: "#/components/requestBodies/UserFlagCreateRequestBody"
      responses:
        "200":
          description: Flag created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFlag"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/flags/{flagId}:
    put:
      operationId: updateFlag
      summary: Update flag
      description: Update flag
      tags:
        - User
      parameters:
        - name: flagId
          in: path
          description: Flag id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/UserFlagUpdateRequestBody"

      responses:
        "200":
          description: Flag updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFlag"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    delete:
      operationId: deleteFlag
      summary: Delete flag
      description: Delete flag
      tags:
        - User
      parameters:
        - name: flagId
          in: path
          description: Flag id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Flag deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/flags/{flagId}/shares:
    get:
      operationId: getFlagShares
      summary: Get flag shares
      description: Get flag shares
      tags:
        - User
      parameters:
        - name: flagId
          in: path
          description: Flag id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Flag shares
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserSharedFlag"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createFlagShare
      summary: Create flag share
      description: Create flag share
      tags:
        - User
      parameters:
        - name: flagId
          in: path
          description: Flag id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/UserSharedFlagCreateRequestBody"
      responses:
        "200":
          description: Flag share created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSharedFlag"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/flags/{flagId}/shares/{shareId}:
    delete:
      operationId: deleteFlagShare
      summary: Delete flag share
      description: Delete flag share
      tags:
        - User
      parameters:
        - name: flagId
          in: path
          description: Flag id
          required: true
          schema:
            type: integer
        - name: shareId
          in: path
          description: Share id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Flag share deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/properties/{userEntityId}:
    get:
      operationId: getUserProperties
      summary: Get user properties
      description: Get user properties
      tags:
        - User
      parameters:
        - name: userEntityId
          in: path
          description: User entity id
          required: true
          schema:
            type: integer
        - name: properties
          in: query
          description: Properties
          schema:
            type: string
      responses:
        "200":
          description: User properties
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/property/{key}:
    get:
      operationId: getUserProperty
      summary: Get user property
      description: Get user property
      tags:
        - User
      parameters:
        - name: key
          in: path
          description: Key of the property
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User property
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/property:
    post:
      operationId: setUserProperty
      summary: Set user property
      description: Set user property
      tags:
        - User
      requestBody:
        $ref: "#/components/requestBodies/SetUserPropertyValueRequestBody"
      responses:
        "200":
          description: User property set successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyValue"
        "204":
          description: User property set successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/staffMembers:
    get:
      operationId: getStaffMembers
      summary: Get staff members
      description: Get staff members
      tags:
        - User
      parameters:
        - name: q
          in: query
          description: Search string
          schema:
            type: string
        - name: properties
          in: query
          description: Properties
          schema:
            type: string
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
        - name: workspaceEntityId
          in: query
          description: Workspace entity id
          schema:
            type: integer
      responses:
        "200":
          description: Staff members results object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStaffSearchResult"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createStaffMember
      summary: Create staff member
      description: Create staff member
      tags:
        - User
      requestBody:
        $ref: "#/components/requestBodies/UserStaffCreateRequestBody"
      responses:
        "200":
          description: Staff member created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/staffMembers/{staffMemberId}:
    put:
      operationId: updateStaffMember
      summary: Update staff member
      description: Update staff member
      parameters:
        - name: staffMemberId
          in: path
          description: Staff member id
          required: true
          schema:
            type: integer
      tags:
        - User
      requestBody:
        $ref: "#/components/requestBodies/UserStaffUpdateRequestBody"
      responses:
        "200":
          description: Staff member updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStaff"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/students:
    get:
      operationId: getStudents
      summary: Get students
      description: Get students
      tags:
        - User
      parameters:
        - name: userEntityId
          in: query
          description: User entity id
          required: true
          schema:
            type: integer
        - name: includeInactiveStudents
          in: query
          description: Include inactive students
          schema:
            type: boolean
            default: false
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Students results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserWithSchoolData"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error
    post:
      operationId: createStudent
      summary: Create student
      description: Create student
      tags:
        - User
      requestBody:
        $ref: "#/components/requestBodies/UserStudentCreateRequestBody"
      responses:
        "200":
          description: Student created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithSchoolData"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/students/{studentId}:
    get:
      operationId: getStudent
      summary: Get student
      description: Get student
      tags:
        - User
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithSchoolData"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error
    put:
      operationId: updateStudent
      summary: Update student
      description: Update student
      tags:
        - User
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/UserStudentUpdateRequestBody"
      responses:
        "200":
          description: Student updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithSchoolData"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/students/{studentId}/addresses:
    get:
      operationId: getStudentAddresses
      summary: Get student addresses
      description: Get student addresses
      tags:
        - User
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student addresses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserStudentAddress"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/students/{studentId}/addresses/{addressId}:
    put:
      operationId: updateStudentAddress
      summary: Update student address
      description: Update student address
      tags:
        - User
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: string
        - name: addressId
          in: path
          description: Address id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/UserStudentAddressUpdateRequestBody"
      responses:
        "200":
          description: Student address updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStudentAddress"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/students/{studentId}/basicInfo:
    put:
      operationId: updateStudentBasicInfo
      summary: Update student basic info
      description: Update student basic info
      tags:
        - User
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/UserStudentBasicInfoUpdateRequestBody"
      responses:
        "200":
          description: Student basic info updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithSchoolData"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/students/{studentId}/emails:
    get:
      operationId: getStudentEmails
      summary: Get student emails
      description: Get student emails
      tags:
        - User
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student emails
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserStudentEmail"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/students/{studentId}/flags:
    get:
      operationId: getStudentFlags
      summary: Get student flags
      description: Get student flags
      tags:
        - User
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: string
        - name: ownerIdentifier
          in: query
          description: Owner identifier
          schema:
            type: string
      responses:
        "200":
          description: Student flags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserStudentFlag"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createStudentFlag
      summary: Create student flag
      description: Create student flag
      tags:
        - User
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/GuiderStudentFlagCreateRequestBody"
      responses:
        "200":
          description: Student flag created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStudentFlag"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/students/{studentId}/flags/{flagId}:
    delete:
      operationId: deleteStudentFlag
      summary: Delete student flag
      description: Delete student flag
      tags:
        - User
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: string
        - name: flagId
          in: path
          description: Flag id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Student flag deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/students/{studentId}/phoneNumbers:
    get:
      operationId: getStudentPhoneNumbers
      summary: Get student phone numbers
      description: Get student phone numbers
      tags:
        - User
      parameters:
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Student phone numbers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserStudentPhoneNumber"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/studyProgrammes:
    get:
      operationId: getStudyProgrammes
      summary: Get study programmes
      description: Get study programmes
      tags:
        - User
      responses:
        "200":
          description: Study programmes results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StudyProgramme"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/userInfo/{userEntityId}:
    get:
      operationId: getUserInfo
      summary: Get user info
      description: Get user info
      tags:
        - User
      parameters:
        - name: userEntityId
          in: path
          description: User entity id
          required: true
          schema:
            type: integer
        - name: data
          in: query
          description: Data
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: User info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/users:
    get:
      operationId: getUsers
      summary: Get users
      description: Get users
      tags:
        - User
      parameters:
        - name: q
          in: query
          description: Search string
          schema:
            type: string
        - name: onlyDefaultUsers
          in: query
          description: Only default users
          schema:
            type: boolean
            default: false
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Users results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/user/whoami:
    get:
      operationId: getWhoAmI
      summary: Get who am I
      description: Get who am I
      tags:
        - User
      responses:
        "200":
          description: Who am I
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWhoAmI"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #USERGROUP
  /rest/usergroup/addusers:
    put:
      operationId: updateUsergroupAddUsers
      summary: Add user to user group
      description: Add user to user group
      tags:
        - Usergroup
      requestBody:
        $ref: "#/components/requestBodies/UsergroupUpdateAddUsersRequestBody"
      responses:
        "204":
          description: User added to user group successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/usergroup/removeusers:
    post:
      operationId: removeUserFromUserGroup
      summary: Remove user from user group
      description: Remove user from user group
      tags:
        - Usergroup
      responses:
        "204":
          description: User removed from user group successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error
    put:
      operationId: updateUsergroupRemoveUsers
      summary: Remove user from user group
      description: Remove user from user group
      tags:
        - Usergroup
      requestBody:
        $ref: "#/components/requestBodies/UsergroupUpdateRemoveUsersRequestBody"
      responses:
        "204":
          description: User removed from user group successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/usergroup/groups:
    get:
      operationId: getUsergroups
      summary: Get user groups
      description: Get user groups
      tags:
        - Usergroup
      parameters:
        - name: q
          in: query
          description: Search string
          schema:
            type: string
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
        - name: userGroupIds
          in: query
          description: User group ids
          schema:
            type: array
            items:
              type: integer
      responses:
        "200":
          description: User groups results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserGroup"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createUsergroup
      summary: Create user group
      description: Create user group
      tags:
        - Usergroup
      requestBody:
        $ref: "#/components/requestBodies/UsergroupCreateRequestBody"
      responses:
        "200":
          description: User group created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroup"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error
    put:
      operationId: updateUsergroup
      summary: Update user group
      description: Update user group
      tags:
        - Usergroup
      requestBody:
        $ref: "#/components/requestBodies/UsergroupUpdateRequestBody"
      responses:
        "204":
          description: User group updated successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/usergroup/groups/{groupId}:
    get:
      operationId: getUserGroup
      summary: Get user group
      description: Get user group
      tags:
        - Usergroup
      parameters:
        - name: groupId
          in: path
          description: User group id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroup"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/userplugin/credentials:
    get:
      operationId: getUserPluginCredentials
      summary: Get user plugin credentials
      description: Get user plugin credentials
      tags:
        - Userplugin
      responses:
        "200":
          description: User plugin credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #WORKLIST
  /rest/worklist/basePrice:
    get:
      operationId: getBasePrice
      summary: Get base price
      description: Get base price
      tags:
        - Worklist
      responses:
        "200":
          description: Base price
          content:
            application/json:
              schema:
                type: integer
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/worklist/billedPrice:
    get:
      operationId: getBilledPrice
      summary: Get billed price
      description: Get billed price
      tags:
        - Worklist
      parameters:
        - name: workspaceEntityId
          in: query
          description: Worklist item id
          required: true
          schema:
            type: integer
        - name: assessmentIdentifier
          in: query
          description: Worklist item id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Billed price
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BilledPrice"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    put:
      operationId: updateBilledPrice
      summary: Update billed price
      description: Update billed price
      tags:
        - Worklist
      parameters:
        - name: workspaceEntityId
          in: query
          description: Worklist item id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/BilledPriceUpdateRequestBody"
      responses:
        "204":
          description: Billed price updated successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/worklist/isAvailable:
    get:
      operationId: isAvailable
      summary: Is available
      description: Is available
      tags:
        - Worklist
      responses:
        "200":
          description: Is available
          content:
            application/json:
              schema:
                type: boolean
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/worklist/templates:
    get:
      operationId: getWorklistTemplates
      summary: Get worklist templates
      description: Get worklist templates
      tags:
        - Worklist
      responses:
        "200":
          description: Worklist templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorklistTemplate"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/worklist/updateWorklistItemsState:
    put:
      operationId: updateWorklistItemsState
      summary: Update worklist items state
      description: Update worklist items state
      tags:
        - Worklist
      requestBody:
        $ref: "#/components/requestBodies/WorklistItemsStateUpdateRequestBody"
      responses:
        "200":
          description: Worklist items state updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorklistItem"

        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/worklist/worklistItems:
    get:
      operationId: getWorklistItems
      summary: Get worklist items
      description: Get worklist items
      tags:
        - Worklist
      parameters:
        - name: owner
          in: query
          description: Search string
          required: true
          schema:
            type: string
        - name: beginDate
          in: query
          description: Begin date
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: End date
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: Worklist items results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorklistItem"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createWorklistItem
      summary: Create worklist item
      description: Create worklist item
      tags:
        - Worklist
      requestBody:
        $ref: "#/components/requestBodies/WorklistItemCreateRequestBody"
      responses:
        "200":
          description: Worklist item created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorklistItem"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    put:
      operationId: updateWorklistItem
      summary: Update worklist item
      description: Update worklist item
      tags:
        - Worklist
      requestBody:
        $ref: "#/components/requestBodies/WorklistItemUpdateRequestBody"
      responses:
        "200":
          description: Worklist item updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorklistItem"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    #FIX
    delete:
      operationId: deleteWorklistItem
      summary: Delete worklist item
      description: Delete worklist item
      tags:
        - Worklist
      parameters:
        - name: worklistItemId
          in: query
          description: Worklist item id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Worklist item deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/worklist/worklistSummary:
    get:
      operationId: getWorklistSummary
      summary: Get worklist summary
      description: Get worklist summary
      tags:
        - Worklist
      parameters:
        - name: owner
          in: query
          description: Search string
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Worklist summary
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorklistSummary"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #WORKSPACE
  /rest/workspace/educationTypes:
    get:
      operationId: getEducationTypes
      summary: Get education types
      description: Get education types
      tags:
        - Workspace
      responses:
        "200":
          description: Education types results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceEducationType"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaceTypes:
    get:
      operationId: getWorkspaceTypes
      summary: Get workspace types
      description: Get workspace types
      tags:
        - Workspace
      responses:
        "200":
          description: Workspace types results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceType"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/:
    get:
      operationId: getWorkspaces
      summary: Get workspaces
      description: Get workspaces
      tags:
        - Workspace
      parameters:
        - name: q
          in: query
          description: Search string
          schema:
            type: string
        - name: userId
          in: query
          description: User entity id
          schema:
            type: integer
        - name: userIdentifier
          in: query
          description: User identifier
          schema:
            type: string
        - name: includeInactiveWorkspaces
          in: query
          description: Include inactive workspaces
          schema:
            type: boolean
            default: false
        - name: subjects
          in: query
          description: Subjects
          schema:
            type: array
            items:
              type: string
        - name: educationTypes
          in: query
          description: Education types
          schema:
            type: array
            items:
              type: string
        - name: curriculums
          in: query
          description: Curriculums
          schema:
            type: array
            items:
              type: string
        - name: organizations
          in: query
          description: Organizations
          schema:
            type: array
            items:
              type: string
        - name: minVisits
          in: query
          description: Min visits
          schema:
            type: integer
        - name: publicity
          in: query
          description: Publicity restriction
          schema:
            allOf:
              - $ref: "#/components/schemas/PublicityRestriction"
            default: ONLY_PUBLISHED
        - name: templates
          in: query
          description: Template restriction
          schema:
            allOf:
              - $ref: "#/components/schemas/TemplateRestriction"
            default: ONLY_WORKSPACES
        - name: orderBy
          in: query
          description: Order by
          schema:
            type: array
            items:
              type: string
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Workspaces results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AnyValue"
                  #$ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createWorkspace
      summary: Create workspace
      description: Create workspace
      tags:
        - Workspace
      parameters:
        - name: sourceWorkspaceEntityId
          in: query
          description: Source workspace entity id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceCreateRequestBody"
      responses:
        "200":
          description: Workspace created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}:
    get:
      operationId: getWorkspace
      summary: Get workspace
      description: Get workspace
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Workspace
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyValue"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error
    put:
      operationId: updateWorkspace
      summary: Update workspace
      description: Update workspace
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceUpdateRequestBody"
      responses:
        "200":
          description: Workspace updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error
    delete:
      operationId: deleteWorkspace
      summary: Delete workspace
      description: Delete workspace
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      #FIX
      #requestBody:
      #  content:
      #    application/json:
      #      schema:
      #        type: string
      responses:
        "204":
          description: Workspace deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/additionalInfo:
    get:
      operationId: getWorkspaceAdditionalInfo
      summary: Get workspace additional info
      description: Get workspace additional info
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Workspace additional info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceAdditionalInfo"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/description:
    get:
      operationId: getWorkspaceDescription
      summary: Get workspace description
      description: Get workspace description
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Workspace description
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaterialContentNode"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/details:
    get:
      operationId: getWorkspaceDetails
      summary: Get workspace details
      description: Get workspace details
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Workspace details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceDetails"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    put:
      operationId: updateWorkspaceDetails
      summary: Update workspace details
      description: Update workspace details
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceDetailsUpdateRequestBody"
      responses:
        "200":
          description: Workspace details updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceDetails"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/help:
    post:
      operationId: createWorkspaceHelpMaterial
      summary: Create workspace help material
      description: Create workspace help material
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceHelpCreateRequestBody"
      responses:
        "200":
          description: Workspace help material created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaterialContentNode"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/materials/:
    post:
      operationId: createWorkspaceMaterial
      summary: Create workspace material
      description: Create workspace material
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceMaterialCreateRequestBody"
      responses:
        "200":
          description: Workspace material created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaterialContentNode"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{urlName}/basicInfo:
    get:
      operationId: getWorkspaceBasicInfo
      summary: Get workspace basic info
      description: Get workspace basic info
      tags:
        - Workspace
      parameters:
        - name: urlName
          in: path
          description: Workspace URL name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Workspace basic info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceBasicInfo"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/amIMember:
    get:
      operationId: amIMember
      summary: Am I member
      description: Am I member
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Am I member
          content:
            application/json:
              schema:
                type: boolean
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/workspacefilecopy/{toWorkspaceId}:
    post:
      operationId: copyWorkspaceFile
      summary: Copy workspace file
      description: Copy workspace file
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
        - name: toWorkspaceId
          in: path
          description: To workspace id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Workspace file copied successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/asContentNode/{workspaceMaterialNodeId}:
    get:
      operationId: getWorkspaceAsContentNode
      summary: Get workspace as content node
      description: Get workspace as content node
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
        - name: workspaceMaterialNodeId
          in: path
          description: Workspace node id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Workspace as content node
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaterialContentNode"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/compositeReplies:
    get:
      operationId: getWorkspaceCompositeReplies
      summary: Get workspace composite replies
      description: Get workspace composite replies
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Workspace composite replies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MaterialCompositeReply"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/materialContentNodes/:
    get:
      operationId: getWorkspaceMaterialContentNodes
      summary: Get workspace material content nodes
      description: Get workspace material content nodes
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
        - name: includeHidden
          in: query
          description: Include hidden
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Workspace material content nodes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MaterialContentNode"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/materialProducers:
    get:
      operationId: getWorkspaceMaterialProducers
      summary: Get workspace material producers
      description: Get workspace material producers
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Workspace material producers results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceMaterialProducer"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createWorkspaceMaterialProducer
      summary: Create workspace material producer
      description: Create workspace material producer
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceMaterialProducerCreateRequestBody"
      responses:
        "200":
          description: Workspace material producer created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceMaterialProducer"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/materialProducers/{producerId}:
    delete:
      operationId: deleteWorkspaceMaterialProducer
      summary: Delete workspace material producer
      description: Delete workspace material producer
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
        - name: producerId
          in: path
          description: Workspace material producer id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Workspace material producer deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/materials/:
    get:
      operationId: getWorkspaceMaterialAssignments
      summary: Get workspace materials
      description: Get workspace materials
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: assignmentType
          in: query
          description: Include hidden
          required: true
          schema:
            $ref: "#/components/schemas/MaterialAssigmentType"
      responses:
        "200":
          description: Workspace materials results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MaterialAssignment"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/materials/{workspaceMaterialId}/compositeMaterialReplies:
    get:
      operationId: getWorkspaceCompositeMaterialReplies
      summary: Get workspace composite material replies
      description: Get workspace composite material replies
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: workspaceMaterialId
          in: path
          description: Workspace material id
          required: true
          schema:
            type: integer
        - name: userEntityId
          in: query
          description: User entity id
          schema:
            type: integer
      responses:
        "200":
          description: Workspace composite material replies results object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaterialCompositeReply"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/materials/{workspaceMaterialId}/replies:
    get:
      operationId: getWorkspaceMaterialReplies
      summary: Get workspace material replies
      description: Get workspace material replies
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: workspaceMaterialId
          in: path
          description: Workspace material id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Workspace material replies results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MaterialReply"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createWorkspaceMaterialReply
      summary: Create workspace material reply
      description: Create workspace material reply
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: workspaceMaterialId
          in: path
          description: Workspace material id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/MaterialReplyCreateRequestBody"
      responses:
        "200":
          description: Workspace material reply created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaterialReply"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/materials/{workspaceMaterialId}/replies/{replyId}:
    put:
      operationId: updateWorkspaceMaterialReply
      summary: Update workspace material reply
      description: Update workspace material reply
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: workspaceMaterialId
          in: path
          description: Workspace material id
          required: true
          schema:
            type: integer
        - name: replyId
          in: path
          description: Reply id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/MaterialReplyUpdateRequestBody"
      responses:
        "200":
          description: Workspace material reply updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaterialReply"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/permissions:
    get:
      operationId: getWorkspacePermissions
      summary: Get workspace permissions
      description: Get workspace permissions
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Workspace permissions results list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/signupGroups:
    get:
      operationId: getWorkspaceSignupGroups
      summary: Get workspace signup groups
      description: Get workspace signup groups
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Workspace signup groups results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceSignupGroup"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/signupGroups/{userGroupId}:
    put:
      operationId: updateWorkspaceSignupGroup
      summary: Update workspace signup group
      description: Update workspace signup group
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: userGroupId
          in: path
          description: User group id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceSignupGroupUpdateRequestBody"
      responses:
        "200":
          description: Workspace signup group updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceSignupGroup"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/students:
    get:
      operationId: getWorkspaceStudents
      summary: Get workspace students
      description: Get workspace students
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: q
          in: query
          description: Search string
          required: true
          schema:
            type: string
        - name: firstResult
          in: query
          description: First result
          schema:
            type: integer
            default: 0
        - name: maxResults
          in: query
          description: Max results
          schema:
            type: integer
            default: 10
        - name: active
          in: query
          description: Active
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Workspace students results object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceStudentSearchResult"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceEntityId}/students/{studentId}:
    get:
      operationId: getWorkspaceStudent
      summary: Get workspace student
      description: Get workspace student
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Workspace student
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStudent"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    put:
      operationId: updateWorkspaceStudent
      summary: Update workspace student
      description: Update workspace student
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: studentId
          in: path
          description: Student id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceStudentUpdateRequestBody"
      responses:
        "200":
          description: Workspace student updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStudent"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #???
  #/rest/workspace/workspaces/{workspaceEntityId}/students/{workspaceUserEntityId} (GET) (PUT):

  /rest/workspace/workspaces/{workspaceEntityId}/user/{userEntityId}/workspacematerial/{workspaceMaterialId}/compositeReply:
    get:
      operationId: getWorkspaceUserCompositeReply
      summary: Get workspace user composite reply
      description: Get workspace user composite reply
      tags:
        - Workspace
      parameters:
        - name: workspaceEntityId
          in: path
          description: Workspace entity id
          required: true
          schema:
            type: integer
        - name: userEntityId
          in: path
          description: User entity id
          required: true
          schema:
            type: integer
        - name: workspaceMaterialId
          in: path
          description: Workspace material id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Workspace user composite reply
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaterialCompositeReply"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/folders/:
    post:
      operationId: createWorkspaceFolder
      summary: Create workspace folder
      description: Create workspace folder
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceFolderCreateRequestBody"
      responses:
        "200":
          description: Workspace folder created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaterialContentNode"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/forumLatest:
    get:
      operationId: getWorkspaceForumLatest
      summary: Get workspace forum latest
      description: Get workspace forum latest
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Workspace forum latest
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DiscussionThread"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/journal:
    get:
      operationId: getWorkspaceJournal
      summary: Get workspace journal
      description: Get workspace journal
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Workspace journal
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceJournal"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/journal/{journalEntryID}:
    put:
      operationId: updateWorkspaceJournal
      summary: Update workspace journal
      description: Update workspace journal
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: journalEntryID
          in: path
          description: Journal entry id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceJournalUpdateRequestBody"
      responses:
        "200":
          description: Workspace journal updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceJournal"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/journal/{journalEntryId}/comments:
    get:
      operationId: getWorkspaceJournalComments
      summary: Get workspace journal comments
      description: Get workspace journal comments
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: journalEntryId
          in: path
          description: Journal entry id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Workspace journal comments results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceJournalComment"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    post:
      operationId: createWorkspaceJournalComment
      summary: Create workspace journal comment
      description: Create workspace journal comment
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: journalEntryId
          in: path
          description: Journal entry id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceJournalCommentCreateRequestBody"
      responses:
        "200":
          description: Workspace journal comment created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceJournalComment"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/journal/{journalEntryId}/comments/{journalCommentId}:
    put:
      operationId: updateWorkspaceJournalComment
      summary: Update workspace journal comment
      description: Update workspace journal comment
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: journalEntryId
          in: path
          description: Journal entry id
          required: true
          schema:
            type: integer
        - name: journalCommentId
          in: path
          description: Journal comment id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceJournalCommentUpdateRequestBody"
      responses:
        "200":
          description: Workspace journal comment updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceJournalComment"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error
    delete:
      operationId: deleteWorkspaceJournalComment
      summary: Delete workspace journal comment
      description: Delete workspace journal comment
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: journalEntryId
          in: path
          description: Journal entry id
          required: true
          schema:
            type: integer
        - name: journalCommentId
          in: path
          description: Journal comment id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Workspace journal comment deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/workspacefile/:
    post:
      operationId: createWorkspaceFile
      summary: Create workspace file
      description: Create workspace file
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceFileCreateRequestBody"
      responses:
        "200":
          description: Workspace file created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaterialContentNode"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspace/workspaces/{workspaceId}/workspacefile/{fileIdentifier}:
    delete:
      operationId: deleteWorkspaceFile
      summary: Delete workspace file
      description: Delete workspace file
      tags:
        - Workspace
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: fileIdentifier
          in: path
          description: File identifier
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Workspace file deleted successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  #WORKSPACENOTES
  /rest/workspacenotes/archive:
    delete:
      operationId: archiveWorkspaceNote
      summary: Archive workspace note
      description: Archive workspace note
      tags:
        - WorkspaceNotes
      parameters:
        - name: id
          in: query
          description: Workspace note id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Workspace note archived successfully
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspacenotes/workspace/{workspaceId}/owner/{owner}:
    get:
      operationId: getWorkspaceNotes
      summary: Get workspace notes
      description: Get workspace notes
      tags:
        - WorkspaceNotes
      parameters:
        - name: workspaceId
          in: path
          description: Workspace id
          required: true
          schema:
            type: integer
        - name: owner
          in: path
          description: Owner
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Workspace notes results object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceNote"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

  /rest/workspacenotes/workspacenote:
    post:
      operationId: createWorkspaceNote
      summary: Create workspace note
      description: Create workspace note
      tags:
        - WorkspaceNotes
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceNoteCreateRequestBody"
      responses:
        "200":
          description: Workspace note created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceNote"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

    put:
      operationId: updateWorkspaceNote
      summary: Update workspace note
      description: Update workspace note
      tags:
        - WorkspaceNotes
      requestBody:
        $ref: "#/components/requestBodies/WorkspaceNoteUpdateRequestBody"
      responses:
        "200":
          description: Workspace note updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceNote"
        "400":
          description: Invalid request was sent to the server
        "500":
          description: Internal server error

#COMPONENTS
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  #REQUEST BODIES
  requestBodies:
    AnnouncementCreateRequestBody:
      description: Announcement object
      required: true
      content:
        application/json:
          schema:
            type: object
            description: AnnouncementCreateRequestBody object
            required:
              - caption
              - content
              - startDate
              - endDate
              - publiclyVisible
              - userGroupEntityIds
              - workspaceEntityIds
            properties:
              caption:
                type: string
              content:
                type: string
              endDate:
                type: string
              publiclyVisible:
                type: boolean
              startDate:
                type: string
              temporalStatus:
                type: string
              userGroupEntityIds:
                type: array
                items:
                  type: integer
              workspaceEntityIds:
                type: array
                items:
                  type: integer

    AnnouncementUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: AnnouncementUpdateRequestBody object
            properties:
              archived:
                type: boolean
              caption:
                type: string
              content:
                type: string
              created:
                type: string
              endDate:
                type: string
              id:
                type: integer
              publiclyVisible:
                type: boolean
              publisherUserEntityId:
                type: integer
              startDate:
                type: string
              temporalStatus:
                type: string
              userGroupEntityIds:
                type: array
                items:
                  type: integer
              workspaceEntityIds:
                type: array
                items:
                  type: integer
              workspaces:
                type: array
                items:
                  $ref: "#/components/schemas/WorkspaceBasicInfo"

    AssessmentRequestCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: AssessmentRequestCreateBody object
            required:
              - requestText
            properties:
              requestText:
                type: string

    CeeposOrderCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: CeeposOrderCreateRequestBody object
            required:
              - studentIdentifier
              - product
            properties:
              studentIdentifier:
                type: string
              product:
                $ref: "#/components/schemas/CeeposPurchaseProduct"

    CommunicatorMessageCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: CommunicatorMessageCreateRequestBody object
            required:
              - caption
              - categoryName
              - content
              - recipientIds
              - recipientGroupIds
              - recipientStudentsWorkspaceIds
              - recipientTeachersWorkspaceIds
            properties:
              caption:
                type: string
              categoryName:
                type: string
              content:
                type: string
              recipientIds:
                type: array
                items:
                  type: integer
              recipientGroupIds:
                type: array
                items:
                  type: integer
              recipientStudentsWorkspaceIds:
                type: array
                items:
                  type: integer
              recipientTeachersWorkspaceIds:
                type: array
                items:
                  type: integer

    CommunicatorMessageUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: CommunicatorMessageCreateRequestBody object
            required:
              - caption
              - categoryName
              - content
              - recipientIds
              - recipientGroupIds
              - recipientStudentsWorkspaceIds
              - recipientTeachersWorkspaceIds
            properties:
              caption:
                type: string
              categoryName:
                type: string
              content:
                type: string
              recipientIds:
                type: array
                items:
                  type: integer
              recipientGroupIds:
                type: array
                items:
                  type: integer
              recipientStudentsWorkspaceIds:
                type: array
                items:
                  type: integer
              recipientTeachersWorkspaceIds:
                type: array
                items:
                  type: integer

    CommunicatorMessageLabelRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: CommunicatorMessageLabelRequestBody object
            required:
              - labelId
            properties:
              labelId:
                type: integer

    CommunicatorSignatureCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: CommunicatorSignatureCreateRequestBody object
            required:
              - name
              - signature
            properties:
              name:
                type: string
              signature:
                type: string

    CommunicatorSignatureUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: CommunicatorSignatureUpdateRequestBody object
            required:
              - id
              - name
              - signature
            properties:
              id:
                type: integer
              name:
                type: string
              signature:
                type: string

    CommunicatorCreateLabelRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: CommunicatorCreateLabelRequestBody object
            required:
              - color
              - name
            properties:
              name:
                type: string
              color:
                type: integer

    CommunicatorUpdateLabelRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: CommunicatorUpdateLabelRequestBody object
            required:
              - id
              - color
              - name
            properties:
              id:
                type: integer
              name:
                type: string
              color:
                type: integer

    InterimEvaluationRequestCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: InterimEvaluationRequestCreateRequestBody object
            required:
              - workspaceMaterialId
              - requestText
            properties:
              workspaceMaterialId:
                type: integer
              requestText:
                type: string

    EvaluationSaveAssignmentAssessmentRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: EvaluationAssignmentAssessment object
            required:
              - evaluationType
              - assessorIdentifier
              - gradingScaleIdentifier
              - gradeIdentifier
              - verbalAssessment
              - assessmentDate
              - audioAssessments
            properties:
              identifier:
                type: string
              evaluationType:
                type: string
              assessorIdentifier:
                type: string
              gradingScaleIdentifier:
                type: string
              gradeIdentifier:
                type: string
              verbalAssessment:
                type: string
              assessmentDate:
                type: string
              audioAssessments:
                type: array
                items:
                  $ref: "#/components/schemas/AudioAssessment"

    EvaluationUpdateAssignmentAssessmentRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: EvaluationAssignmentAssessment object
            required:
              - identifier
              - evaluationType
              - assessorIdentifier
              - gradingScaleIdentifier
              - gradeIdentifier
              - verbalAssessment
              - assessmentDate
              - audioAssessments
            properties:
              identifier:
                type: string
              evaluationType:
                $ref: "#/components/schemas/EvaluationType"
              assessorIdentifier:
                type: string
              gradingScaleIdentifier:
                type: string
              gradeIdentifier:
                type: string
              verbalAssessment:
                type: string
              assessmentDate:
                type: string
              audioAssessments:
                type: array
                items:
                  $ref: "#/components/schemas/AudioAssessment"

    EvaluationCreateJournalFeedbackRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: EvaluationCreateJournalFeedbackRequestBody object
            required:
              - feedback
            properties:
              feedback:
                type: string

    EvaluationSaveWorkspaceUserAssessmentRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: EvaluationSaveWorkspaceUserAssessmentRequestBody object
            required:
              - assessorIdentifier
              - gradingScaleIdentifier
              - gradeIdentifier
              - assessmentDate
              - verbalAssessment
              - workspaceSubjectIdentifier
            properties:
              assessorIdentifier:
                type: string
              gradingScaleIdentifier:
                type: string
              gradeIdentifier:
                type: string
              assessmentDate:
                type: string
              verbalAssessment:
                type: string
              workspaceSubjectIdentifier:
                type: string

    EvaluationUpdateWorkspaceUserAssessmentRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: EvaluationUpdateWorkspaceUserAssessmentRequestBody object
            required:
              - identifier
              - assessorIdentifier
              - gradingScaleIdentifier
              - gradeIdentifier
              - assessmentDate
              - verbalAssessment
              - workspaceSubjectIdentifier
            properties:
              identifier:
                type: string
              assessorIdentifier:
                type: string
              gradingScaleIdentifier:
                type: string
              gradeIdentifier:
                type: string
              assessmentDate:
                type: string
              verbalAssessment:
                type: string
              workspaceSubjectIdentifier:
                type: string

    EvaluationSaveSupplementationRequestRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: EvaluationSaveSupplementationRequestRequestBody object
            required:
              - workspaceSubjectIdentifier
              - requestDate
              - requestText
            properties:
              requestDate:
                type: string
              requestText:
                type: string
              workspaceSubjectIdentifier:
                type: string

    EvaluationUpdateSupplementationRequestRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: EvaluationUpdateSupplementationRequestRequestBody object
            required:
              - id
              - workspaceSubjectIdentifier
              - requestDate
              - requestText
            properties:
              id:
                type: string
              requestDate:
                type: string
              requestText:
                type: string
              workspaceSubjectIdentifier:
                type: string

    ResetPasswordRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: ResetPasswordRequestBody object
            required:
              - email
            properties:
              email:
                type: string

    DiscussionAreaCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: DiscussionAreaCreateRequestBody object
            required:
              - name
              - description
            properties:
              name:
                type: string
              description:
                type: string

    DiscussionAreaUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: DiscussionAreaUpdateRequestBody object
            required:
              - name
              - description
            properties:
              name:
                type: string
              description:
                type: string

    DiscussionThreadCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: DiscussionThreadCreateRequestBody object
            required:
              - title
              - message
              - sticky
              - lock
              - forumAreaId
            properties:
              title:
                type: string
              message:
                type: string
              sticky:
                type: boolean
              lock:
                $ref: "#/components/schemas/DiscussionThreadLock"
              forumAreaId:
                type: integer

    DiscussionThreadUpdateRequestBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/DiscussionThread"

    DiscussionThreadReplyCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: DiscussionThreadReplyCreateRequestBody object
            required:
              - message
            properties:
              message:
                type: string

    DiscussionThreadReplyUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: DiscussionThreadReplyUpdateRequestBody object
            required:
              - message
            properties:
              message:
                type: string

    ContactLogCreateEventRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: GuiderContactLogCreateEventRequestBody object
            required:
              - type
              - text
              - entryDate
            properties:
              type:
                $ref: "#/components/schemas/ContactType"
              text:
                type: string
              entryDate:
                type: string

    ContactLogUpdateEventRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: GuiderContactLogUpdateEventRequestBody object
            required:
              - type
              - text
              - entryDate
              - creatorId
            properties:
              type:
                $ref: "#/components/schemas/ContactType"
              text:
                type: string
              entryDate:
                type: string
              creatorId:
                type: integer

    ContactLogEventCommentCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: GuiderContactLogEventCommentCreateRequestBody object
            required:
              - text
              - commentDate
            properties:
              text:
                type: string
              commentDate:
                type: string

    ContactLogEventCommentUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: GuiderContactLogEventCommentUpdateRequestBody object
            required:
              - text
              - commentDate
              - creatorId
            properties:
              text:
                type: string
              commentDate:
                type: string
              creatorId:
                type: integer

    CredentialsUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: CredentialsUpdateRequestBody object
            required:
              - password
              - username
              - secret
            properties:
              password:
                type: string
              username:
                type: string
              secret:
                type: string

    HopsSaveRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: HopsSaveRequestBody object
            required:
              - formData
              - historyDetails
            properties:
              formData:
                description: Hops form data. Stringified JSON object.
                type: string
              historyDetails:
                description: Hops history details.
                type: string

    HopsHistoryEntryUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: HopsHistoryEntryUpdateRequestBody object
            required:
              - details
            properties:
              details:
                type: string

    HopsGoalsUpdateRequestBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/HopsGoals"

    AlternativeStudyOptionSaveRequestBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/AlternativeStudyOption"

    OptionalSuggestionCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: OptionalSuggestionCreateRequestBody object
            required:
              - subject
              - courseNumber
            properties:
              subject:
                type: string
              courseNumber:
                type: integer

    StudentCourseChoiceSaveRequestBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/StudentCourseChoice"

    StudentStudyHoursSaveRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: StudentStudyHoursSaveRequestBody object
            required:
              - studyHours
            properties:
              studyHours:
                type: integer

    ToggleSuggestionCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: ToggleSuggestionCreateRequestBody object
            required:
              - courseId
              - subject
              - courseNumber
            properties:
              courseId:
                type: integer
              subject:
                type: string
              courseNumber:
                type: integer

    BinaryMaterialCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: BinaryMaterialCreateRequestBody object
            required:
              - title
              - contentType
              - fileId
            properties:
              title:
                type: string
              contentType:
                $ref: "#/components/schemas/AnyValue"
              fileId:
                $ref: "#/components/schemas/AnyValue"

    HtmlMaterialCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: HtmlMaterialCreateRequestBody object
            required:
              - title
              - contentType
            properties:
              title:
                type: string
              content:
                type: string

    MaterialContentUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: MaterialContentUpdateRequestBody object
            required:
              - content
              - removeAnswers
            properties:
              content:
                type: string
              removeAnswers:
                type: boolean

    MaterialUpdateRequestBody:
      content:
        application/json:
          schema:
            anyOf:
              - $ref: "#/components/schemas/AnyValue"

    MaterialProducerCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: MaterialProducerCreateRequestBody object
            required:
              - name
            properties:
              name:
                type: string

    MatriculationEnrollmentsCreateRequestBody:
      content:
        application/json:
          schema:
            description: MatriculationEnrollmentsCreateRequestBody object
            type: string

    LocalizationSetRequestBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/LocalizationLocale"

    NoteCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - title
              - description
              - type
              - priority
              - pinned
              - owner
              - startDate
              - dueDate
            properties:
              title:
                type: string
              description:
                type: string
              type:
                $ref: "#/components/schemas/NoteCreationType"
              priority:
                $ref: "#/components/schemas/NotePriorityType"
              pinned:
                type: boolean
              owner:
                type: string
              startDate:
                nullable: true
                type: string
              dueDate:
                nullable: true
                type: string

    NoteUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - title
              - description
              - priority
              - pinned
              - startDate
              - dueDate
              - status
            properties:
              title:
                type: string
              description:
                type: string
              priority:
                $ref: "#/components/schemas/NotePriorityType"
              pinned:
                type: boolean
              startDate:
                nullable: true
                type: string
              dueDate:
                nullable: true
                type: string
              status:
                $ref: "#/components/schemas/NoteStatusType"

    OrganizationAddStaffToWorkspaceRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: OrganizationAddStaffToWorkspaceRequestBody object
            properties:
              staffMemberIdentifiers:
                type: array
                items:
                  $ref: "#/components/schemas/AnyValue"

    OrganizationAddStudentsToWorkspaceRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: OrganizationAddStudentsToWorkspaceRequestBody object
            required:
              - studentIdentifiers
              - studentGroupIds
            properties:
              studentIdentifiers:
                type: array
                items:
                  type: string
              studentGroupIds:
                type: array
                items:
                  type: integer

    PedagogyFormCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: PedagogyFormCreateRequestBody object
            required:
              - formData
            properties:
              formData:
                type: string

    PedagogyFormDataUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: PedagogyFormDataUpdateRequestBody object
            required:
              - formData
              - fields
              - details
            properties:
              formData:
                type: string
              fields:
                nullable: true
                type: array
                items:
                  type: string
              details:
                nullable: true
                type: string

    PedagogyFormStateUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: PedagogyFormStateUpdateRequestBody object
            required:
              - state
            properties:
              state:
                $ref: "#/components/schemas/PedagogyFormState"

    PedagogyFormVisibilityUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: PedagogyFormVisibilityUpdateRequestBody object
            required:
              - visibility
            properties:
              visibility:
                type: array
                items:
                  $ref: "#/components/schemas/PedagogyFormVisibility"

    HopsUppersecondaryDataUpdateRequestBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/HopsUppersecondaryData"

    UserFlagCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: UserFlagCreateRequestBody object
            required:
              - name
              - color
              - description
              - ownerIdentifier
            properties:
              name:
                type: string
              color:
                type: string
              description:
                type: string
              ownerIdentifier:
                type: string

    UserFlagUpdateRequestBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/UserFlag"

    UserSharedFlagCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: UserSharedFlagCreateRequestBody object
            required:
              - flagId
              - userIdentifier
            properties:
              flagId:
                type: integer
              userIdentifier:
                type: string

    SetUserPropertyValueRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: SetUserPropertyValueRequestBody object
            required:
              - key
              - value
            properties:
              key:
                type: string
              value:
                $ref: "#/components/schemas/AnyValue"
              userEntityId:
                type: integer

    UserStaffCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: UserStaffCreateRequestBody object
            required:
              - firstName
              - lastName
              - email
            properties:
              firstName:
                type: string
              lastName:
                type: string
              email:
                type: string
              studyProgrammeIdentifier:
                type: string
              role:
                type: string
              ssn:
                type: string

    UserStaffUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: UserStaffUpdateRequestBody object
            required:
              - firstName
              - lastName
              - identifier
              - email
            properties:
              firstName:
                type: string
              lastName:
                type: string
              identifier:
                type: integer
              email:
                type: string
              role:
                type: string
              studyProgrammeIdentifier:
                type: string
              ssn:
                type: string

    UserStudentCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: UserStudentCreateRequestBody object
            required:
              - firstName
              - lastName
              - email
              - studyProgrammeIdentifier
            properties:
              firstName:
                type: string
              lastName:
                type: string
              email:
                type: string
              studyProgrammeIdentifier:
                type: string
              role:
                type: string
              ssn:
                type: string

    UserStudentUpdateRequestBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/UserWithSchoolData"

    UserStudentBasicInfoUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: UserStudentBasicInfoUpdateRequestBody object
            required:
              - identifier
              - firstName
              - lastName
              - email
            properties:
              identifier:
                type: integer
              firstName:
                type: string
              lastName:
                type: string
              email:
                type: string
              ssn:
                type: string
              role:
                type: string
              studyProgrammeIdentifier:
                type: string

    UserStudentAddressUpdateRequestBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/UserStudentAddress"

    GuiderStudentFlagCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: GuiderStudentFlagCreateRequestBody object
            required:
              - flagId
              - studentIdentifier
            properties:
              flagId:
                type: integer
              studentIdentifier:
                type: string

    UserFileCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: UserFileCreateRequestBody object
            required:
              - name
              - contentType
              - base64Data
              - identifier
              - visibility
            properties:
              name:
                type: string
              contentType:
                type: string
              base64Data:
                type: string
              identifier:
                type: string
              visibility:
                $ref: "#/components/schemas/UserEntityFileVisibility"

    UsergroupCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: UsergroupCreateRequestBody object
            required:
              - name
              - isGuidanceGroup
            properties:
              name:
                type: string
              isGuidanceGroup:
                type: boolean

    UsergroupUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: UsergroupUpdateRequestBody object
            required:
              - identifier
              - name
              - isGuidanceGroup
            properties:
              identifier:
                type: string
              name:
                type: string
              isGuidanceGroup:
                type: boolean

    UsergroupUpdateAddUsersRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: UsergroupUpdateAddUsersRequestBody object
            required:
              - groupIdentifier
              - userIdentifiers
            properties:
              groupIdentifier:
                type: string
              userIdentifiers:
                type: array
                items:
                  type: string

    UsergroupUpdateRemoveUsersRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: UsergroupUpdateRemoveUsersRequestBody object
            required:
              - groupIdentifier
              - userIdentifiers
            properties:
              groupIdentifier:
                type: string
              userIdentifiers:
                type: array
                items:
                  type: string

    WorkspaceChatStatusUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            description: WorkspaceChatStatusUpdateRequestBody object
            required:
              - chatStatus
              - workspaceEntityId
            properties:
              chatStatus:
                $ref: "#/components/schemas/WorkspaceChatStatus"
              workspaceEntityId:
                type: integer

    WorkspaceStudentUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/WorkspaceStudent"

    BilledPriceUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - assessmentIdentifier
              - price
            properties:
              assessmentIdentifier:
                type: string
              price:
                type: string

    WorklistItemsStateUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: WorklistItemsStateUpdateRequestBody object
            required:
              - userIdentifier
              - beginDate
              - endDate
              - state
            properties:
              userIdentifier:
                type: string
              beginDate:
                type: string
              endDate:
                type: string
              state:
                $ref: "#/components/schemas/WorklistBillingStateType"

    WorklistItemCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: WorklistItemCreateRequestBody object
            required:
              - templateId
              - entryDate
              - description
              - price
              - factor
              - billingNumber
            properties:
              templateId:
                type: integer
              entryDate:
                type: string
              description:
                type: string
              price:
                type: integer
              factor:
                type: integer
              billingNumber:
                type: integer

    WorklistItemUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: WorklistItemUpdateRequestBody object
            required:
              - id
              - entryDate
              - description
              - price
              - factor
              - billingNumber
            properties:
              id:
                type: integer
              templateId:
                type: integer
              entryDate:
                type: string
                format: date-time
              description:
                type: string
              price:
                type: integer
              factor:
                type: integer
              billingNumber:
                type: integer

    WorkspaceFolderCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: WorkspaceFolderCreateRequestBody object
            required:
              - parentId
              - nextSiblingId
            properties:
              parentId:
                type: integer
              nextSiblingId:
                type: integer

    WorkspaceNoteCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: WorkspaceNoteCreateRequestBody object
            required:
              - title
              - workspaceNote
              - workspaceEntityId
            properties:
              title:
                type: string
              workspaceNote:
                type: string
              workspaceEntityId:
                type: integer
              nextSiblingId:
                description: Optional given to determine place in the list. if not given, the note is added to the end of the list
                type: integer
                nullable: true

    WorkspaceNoteUpdateRequestBody:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/WorkspaceNote"

    WorkspaceJournalCommentCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: WorkspaceJournalCommentCreateRequestBody object
            required:
              - journalEntryId
              - comment
            properties:
              journalEntryId:
                type: integer
              comment:
                type: string

    WorkspaceJournalCommentUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: WorkspaceJournalCommentUpdateRequestBody object
            required:
              - id
              - journalEntryId
              - comment
            properties:
              id:
                type: integer
              journalEntryId:
                type: integer
              comment:
                type: string

    WorkspaceJournalUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: WorkspaceJournalUpdateRequestBody object
            required:
              - id
              - title
              - content
              - workspaceEntityId
            properties:
              id:
                type: integer
              title:
                type: string
              content:
                type: string
              workspaceEntityId:
                type: integer

    WorkspaceMaterialProducerCreateRequestBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/WorkspaceMaterialProducer"

    WorkspaceHelpCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: WorkspaceHelpCreateRequestBody object
            required:
              - materialId
              - parentId
              - nextSiblingId
            properties:
              materialId:
                type: integer
              parentId:
                type: integer
              nextSiblingId:
                type: integer

    WorkspaceMaterialCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: WorkspaceMaterialCreateRequestBody object
            required:
              - materialId
              - parentId
              - nextSiblingId
            properties:
              materialId:
                type: integer
              parentId:
                type: integer
              nextSiblingId:
                type: integer

    WorkspaceDetailsUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/WorkspaceDetails"

    WorkspaceUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AnyValue"

    WorkspaceCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: WorkspaceCreateRequestBody object
            required:
              - name
              - description
            properties:
              name:
                type: string
              nameExtension:
                type: string
              description:
                type: string

    WorkspaceSignupGroupUpdateRequestBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/WorkspaceSignupGroup"

    WorkspaceFileCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: WorkspaceFileCreateRequestBody object
            required:
              - fileIdentifier
              - contentType
              - base64Data
            properties:
              fileIdentifier:
                type: string
              contentType:
                type: string
              base64Data:
                type: string

    MaterialReplyCreateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: MaterialReplyCreateRequestBody object
            required:
              - state
            properties:
              state:
                $ref: "#/components/schemas/MaterialCompositeReplyStateType"

    MaterialReplyUpdateRequestBody:
      content:
        application/json:
          schema:
            type: object
            description: MaterialReplyUpdateRequestBody object
            required:
              - state
            properties:
              state:
                $ref: "#/components/schemas/MaterialCompositeReplyStateType"

  #SCHEMAS
  schemas:
    AnyValue:
      description: Can be any value - string, number, boolean, array or object.

    #Null_type:
    #title: "OpenAPI 3.0 null-type ref"
    #description: "for adding nullability to a ref"
    #enum:
    #  - null

    AlternativeStudyOption:
      type: object
      description: Alternative study option
      required:
        - nativeLanguageSelection
        - religionSelection
      properties:
        nativeLanguageSelection:
          nullable: true
          type: string
        religionSelection:
          nullable: true
          type: string

    Assessment:
      type: object
      description: Assessment object
      required:
        - identifier
        - assessorIdentifier
        - gradingScaleIdentifier
        - gradeIdentifier
        - assessmentDate
        - passing
        - verbalAssessment
      properties:
        identifier:
          type: integer
        assessorIdentifier:
          type: string
        gradingScaleIdentifier:
          type: string
        gradeIdentifier:
          type: string
        assessmentDate:
          type: string
        passing:
          type: boolean
        verbalAssessment:
          type: string

    AssessmentWithAudio:
      allOf:
        - $ref: "#/components/schemas/Assessment"
        - type: object
          required:
            - audioAssessments
          properties:
            audioAssessments:
              type: array
              items:
                $ref: "#/components/schemas/AudioAssessment"

    AudioAssessment:
      type: object
      description: AudioAssessment object
      required:
        - id
        - name
        - contentType
      properties:
        id:
          type: string
        name:
          type: string
        contentType:
          type: string

    AssessmentState:
      type: object
      description: AssessmentState object
      required:
        - date
        - state
        - grade
        - passingGrade
        - text
        - workspaceSubjectIdentifier
      properties:
        date:
          type: string
        state:
          $ref: "#/components/schemas/WorkspaceAssessmentStateType"
        grade:
          type: string
        passingGrade:
          type: boolean
        text:
          type: string
        workspaceSubjectIdentifier:
          nullable: true
          type: string

    Announcement:
      type: object
      description: Announcement object
      required:
        - id
        - caption
        - content
        - created
        - endDate
        - publiclyVisible
        - publisherUserEntityId
        - startDate
        - temporalStatus
        - userGroupEntityIds
        - workspaceEntityIds
        - workspaces
      properties:
        archived:
          type: boolean
        caption:
          type: string
        content:
          type: string
        created:
          type: string
        endDate:
          type: string
        id:
          type: integer
        publiclyVisible:
          type: boolean
        publisherUserEntityId:
          type: integer
        startDate:
          type: string
        temporalStatus:
          type: string
        userGroupEntityIds:
          type: array
          items:
            type: integer
        workspaceEntityIds:
          type: array
          items:
            type: integer
        workspaces:
          type: array
          items:
            $ref: "#/components/schemas/WorkspaceBasicInfo"

    AssessmentRequest:
      type: object
      description: AssessmentRequest object
      required:
        - id
        - userEntityId
        - userIdentifier
        - workspaceUserIdentifier
        - workspaceEntityId
        - requestText
        - date
      properties:
        id:
          type: integer
        userEntityId:
          type: integer
        userIdentifier:
          type: string
        workspaceUserIdentifier:
          type: string
        workspaceEntityId:
          type: integer
        requestText:
          type: string
        date:
          type: string
          format: date-time

    BilledPrice:
      type: object
      required:
        - assessmentIdentifier
        - editable
        - price
      properties:
        assessmentIdentifier:
          type: string
        editable:
          type: boolean
        price:
          type: integer

    CeeposPurchaseState:
      type: string
      enum:
        - CREATED
        - CANCELLED
        - ERRORED
        - ONGOING
        - PAID
        - COMPLETE

    CeeposPurchaseCreator:
      type: object
      description: CeeposPurchaseCreator object
      required:
        - id
        - userEntityId
        - firstName
        - lastName
        - email
      properties:
        id:
          type: integer
        userEntityId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string

    CeeposPurchaseProduct:
      type: object
      description: CeeposPurchaseProduct object. Property first letter is capital because reasons...
      required:
        - Code
        - Description
        - Price
      properties:
        Code:
          type: string
        Description:
          type: string
        Price:
          type: integer

    CeeposPurchase:
      type: object
      description: CeeposPurchase object
      required:
        - id
        - paid
        - created
        - product
        - state
        - studentEmail
        - studentIdentifier
        - creator
      properties:
        id:
          type: integer
        paid:
          type: string
          format: date-time
        created:
          type: string
          format: date-time
        product:
          $ref: "#/components/schemas/CeeposPurchaseProduct"
        state:
          $ref: "#/components/schemas/CeeposPurchaseState"
        studentEmail:
          type: string
        studentIdentifier:
          type: string
        creator:
          $ref: "#/components/schemas/CeeposPurchaseCreator"

    CommunicatorSignature:
      type: object
      description: Communicator signature object
      required:
        - id
        - name
        - signature
      properties:
        id:
          type: integer
        name:
          type: string
        signature:
          type: string

    ContactType:
      type: string
      enum:
        - OTHER
        - LETTER
        - EMAIL
        - PHONE
        - CHATLOG
        - SKYPE
        - FACE2FACE
        - ABSENCE
        - MUIKKU

    ContactLog:
      type: object
      description: GuiderContactLog object
      required:
        - totalHitCount
        - allPrivileges
        - firstResult
        - results
      properties:
        totalHitCount:
          type: integer
        allPrivileges:
          type: boolean
        firstResult:
          type: integer
        results:
          type: array
          items:
            $ref: "#/components/schemas/ContactLogEvent"

    ContactLogEvent:
      type: object
      description: GuiderContactLogEvent object
      required:
        - id
        - entryDate
        - type
        - creatorId
        - creatorName
        - hasImage
        - text
      properties:
        id:
          type: integer
        entryDate:
          type: string
        type:
          $ref: "#/components/schemas/ContactType"
        creatorId:
          type: integer
        creatorName:
          type: string
        hasImage:
          type: boolean
        text:
          type: string
        comments:
          type: array
          items:
            $ref: "#/components/schemas/ContactLogEventComment"

    ContactLogEventComment:
      type: object
      description: GuiderContactLogEventComment object
      required:
        - id
        - entry
        - commentDate
        - creatorId
        - creatorName
        - hasImage
        - text
      properties:
        id:
          type: integer
        entryDate:
          type: string
        creatorId:
          type: integer
        creatorName:
          type: string
        text:
          type: string

    Curriculum:
      type: object
      description: Curriculum object
      required:
        - identifier
        - name
      properties:
        identifier:
          type: string
        name:
          type: string

    DiscussionArea:
      type: object
      description: DiscussionArea object
      required:
        - id
        - name
        - description
        - groupId
        - numThreads
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        groupId:
          type: integer
        numThreads:
          type: integer

    DiscussionThread:
      type: object
      description: DiscussionThread object
      required:
        - id
        - message
        - numReplies
        - sticky
        - title
        - updated
        - lastModified
        - forumAreaId
        - entryPoint
        - creator
        - created
      properties:
        id:
          type: integer
        message:
          type: string
        numReplies:
          type: integer
        sticky:
          type: boolean
        title:
          type: string
        updated:
          type: string
        lastModified:
          type: string
        forumAreaId:
          type: integer
        entryPoint:
          type: boolean
        creator:
          type: string
        created:
          type: string
        lock:
          $ref: "#/components/schemas/DiscussionThreadLock"
        lockBy:
          description: User id of the user who locked the thread.
          nullable: true
          type: integer
        lockDate:
          description: Date when the thread was locked. Backend updates this field
          nullable: true
          type: string

    DiscussionThreadReply:
      type: object
      description: DiscussionThreadReply object
      required:
        - id
        - created
        - creator
        - childReplyCount
        - deleted
        - forumAreaId
        - lastModified
        - message
        - parentReplyId
      properties:
        id:
          type: integer
        created:
          type: string
        creator:
          type: string
        childReplyCount:
          type: integer
        deleted:
          type: boolean
        forumAreaId:
          type: integer
        lastModified:
          type: string
        message:
          type: string
        parentReplyId:
          type: integer

    DiscussionSubscribedThread:
      type: object
      description: DiscussionSubscribedThread object
      required:
        - userEntityId
        - threadId
        - thread
      properties:
        userEntityId:
          type: integer
        threadId:
          type: integer
        thread:
          $ref: "#/components/schemas/DiscussionThread"

    DiscussionWorkspaceSubscribedThread:
      allOf:
        - $ref: "#/components/schemas/DiscussionSubscribedThread"
        - type: object
          required:
            - workspaceId
            - workspaceName
            - workspaceUrlName
          properties:
            workspaceId:
              type: integer
            workspaceName:
              type: string
            workspaceUrlName:
              type: string

    DiscussionSubscribedArea:
      type: object
      description: DiscussionSubscribedArea object
      required:
        - userEntityId
        - areaId
        - area
      properties:
        userEntityId:
          type: integer
        areaId:
          type: integer
        area:
          $ref: "#/components/schemas/DiscussionArea"

    DiscussionWorkspaceSubscribedArea:
      allOf:
        - $ref: "#/components/schemas/DiscussionSubscribedArea"
        - type: object
          required:
            - workspaceId
            - workspaceName
            - workspaceUrlName
          properties:
            workspaceId:
              type: integer
            workspaceName:
              type: string
            workspaceUrlName:
              type: string

    DiscussionThreadLock:
      type: string
      enum:
        - ALL
        - STUDENTS

    DiscussionWorkspaceStatistic:
      type: object
      description: DiscussionWorkspaceStatistic object
      required:
        - messageCount
        - latestMessage
      properties:
        messageCount:
          type: integer
        latestMessage:
          type: string

    EvaluationJournalFeedback:
      type: object
      description: EvaluationJournalFeedback object
      required:
        - id
        - student
        - workspaceEntityId
        - created
        - creator
        - creatorName
        - feedback
      properties:
        id:
          description: Id of feedback
          type: integer
        student:
          description: userEntityId of student
          type: string
        workspaceEntityId:
          type: integer
        created:
          type: string
        creator:
          description: id of creator
          type: integer
        creatorName:
          type: string
        feedback:
          type: string

    EvaluationAssessmentRequest:
      type: object
      description: EvaluationAssessmentRequest object
      required:
        - id
        - subjects
        - enrollmentDate
        - evaluationDate
        - assessmentRequestDate
        - assignmentsDone
        - assignmentsTotal
        - graded
        - passing
        - interimEvaluationRequest
        - userEntityID
        - firstName
        - lastName
        - studyProgramme
        - workspaceEntityId
        - workspaceName
        - workspaceNameExtension
        - workspaceUrlName
        - workspaceUserEntityId
        - workspaceUserIdentifier
      properties:
        id:
          type: integer
        subjects:
          type: array
          items:
            $ref: "#/components/schemas/WorkspaceSubject"
        enrollmentDate:
          type: string
        evaluationDate:
          type: string
        assessmentRequestDate:
          type: string
        assignmentsDone:
          type: integer
        assignmentsTotal:
          type: integer
        graded:
          type: boolean
        passing:
          type: boolean
        interimEvaluationRequest:
          type: boolean
        userEntityID:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        studyProgramme:
          type: string
        workspaceEntityId:
          type: integer
        workspaceName:
          type: string
        workspaceNameExtension:
          type: string
        workspaceUrlName:
          type: string
        workspaceUserEntityId:
          type: integer
        workspaceUserIdentifier:
          type: string

    EvaluationSupplementationRequest:
      type: object
      description: EvaluationSupplementationRequest object
      required:
        - id
        - userEntityId
        - studentEntityId
        - workspaceEntityId
        - workspaceSubjectIdentifier
        - requestDate
        - requestText
      properties:
        id:
          type: integer
        userEntityId:
          type: integer
        studentEntityId:
          type: integer
        workspaceEntityId:
          type: integer
        workspaceSubjectIdentifier:
          type: string
        requestDate:
          type: string
        requestText:
          type: string

    EvaluationEventType:
      type: string
      enum:
        - EVALUATION_PASS
        - EVALUATION_FAIL
        - EVALUATION_IMPROVED
        - EVALUATION_REQUEST
        - SUPPLEMENTATION_REQUEST
        - EVALUATION_REQUEST_CANCELLED
        - INTERIM_EVALUATION_REQUEST
        - INTERIM_EVALUATION_REQUEST_CANCELLED
        - INTERIM_EVALUATION

    EvaluationEvent:
      type: object
      description: EvaluationEvent object
      required:
        - identifier
        - author
        - date
        - grade
        - gradeIdentifier
        - student
        - text
        - type
        - workspaceSubjectIdentifier
      properties:
        identifier:
          type: integer
        author:
          type: string
        date:
          type: string
          nullable: true
        grade:
          type: string
        gradeIdentifier:
          type: string
          nullable: true
        student:
          type: string
        text:
          type: string
          nullable: true
        type:
          $ref: "#/components/schemas/EvaluationEventType"
        workspaceSubjectIdentifier:
          type: string
          nullable: true

    EvaluationGradeScale:
      type: object
      description: EvaluationGradeSystem object
      required:
        - id
        - name
        - passing
        - grades
        - dataSource
        - active
      properties:
        id:
          type: string
        name:
          type: string
        active:
          type: boolean
        dataSource:
          type: string
        grades:
          type: array
          items:
            $ref: "#/components/schemas/EvaluationGrade"

    EvaluationGrade:
      type: object
      description: EvaluationGrade object
      required:
        - id
        - name
        - dataSource
      properties:
        id:
          type: string
        name:
          type: string
        dataSource:
          type: string

    EvaluationType:
      type: string
      enum:
        - ASSESSMENT
        - SUPPLEMENTATIONREQUEST

    UserStudentFlag:
      type: object
      description: UserStudentFlag object
      required:
        - id
        - flagId
        - flagName
        - flagColor
        - studentIdentifier
      properties:
        id:
          type: integer
        flagId:
          type: integer
        flagName:
          type: string
        flagColor:
          type: string
        studentIdentifier:
          type: string

    UserFlag:
      type: object
      description: UserFlag object
      required:
        - id
        - name
        - color
        - description
        - ownerIdentifier
      properties:
        id:
          type: integer
        name:
          type: string
        color:
          type: string
        description:
          type: string
        ownerIdentifier:
          type: string

    UserSharedFlag:
      type: object
      description: UserSharedFlag object
      required:
        - flagId
        - id
        - user
        - userIdentifier
      properties:
        flagId:
          type: integer
        id:
          type: integer
        user:
          type: object
          required:
            - firstName
            - lastName
            - hasImage
            - nickName
            - userEntityId
            - userIdentifier
          properties:
            firstName:
              type: string
            lastName:
              type: string
            hasImage:
              type: boolean
            nickName:
              type: string
            userEntityId:
              type: integer
            userIdentifier:
              type: string
        userIdentifier:
          type: string

    GuidanceCouncelorContact:
      type: object
      description: GuidanceCouncelorContact object
      required:
        - id
        - email
        - chatAvailable
        - userEntityId
        - firstName
        - lastName
        - hasImage
        - organization
        - properties
        - role
      properties:
        id:
          type: string
        email:
          type: string
        chatAvailable:
          type: boolean
        userEntityId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        hasImage:
          type: boolean
        organization:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
        properties:
          $ref: "#/components/schemas/AnyValue"
        role:
          type: string

    GuiderStudent:
      allOf:
        - $ref: "#/components/schemas/UserWithSchoolData"
        - type: object
          required:
            - flags
          properties:
            flags:
              type: array
              items:
                $ref: "#/components/schemas/GuiderStudentLabel"

    GuiderStudentLabel:
      type: object
      description: GuiderStudentLabel object
      required:
        - id
        - flagId
        - flagName
        - flagColor
        - studentIdentifier
      properties:
        id:
          type: integer
        flagId:
          type: integer
        flagName:
          type: string
        flagColor:
          type: integer
        studentIdentifier:
          type: string

    GuiderStudentNotification:
      type: object
      description: GuiderStudentNotification object
      properties:
        studytime:
          type: string
        nopassedcourses:
          type: string
        assessmentrequest:
          type: string

    HopsHistoryEntry:
      type: object
      description: HopsHistoryEntry object
      required:
        - id
        - details
        - date
        - modifier
        - modifierId
        - modifierHasImage
      properties:
        id:
          type: integer
        details:
          type: string
          nullable: true
        date:
          type: string
        modifier:
          type: string
        modifierId:
          type: integer
        modifierHasImage:
          type: boolean

    HopsUppersecondaryData:
      type: object
      description: HopsUppersecondaryData object
      required:
        - goalSecondarySchoolDegree
        - goalMatriculationExam
        - vocationalYears
        - goalJustMatriculationExam
        - justTransferCredits
        - transferCreditYears
        - completionYears
        - mathSyllabus
        - finnish
        - swedish
        - english
        - german
        - french
        - italian
        - spanish
        - science
        - religion
        - studentMatriculationSubjects
        - optedIn
      properties:
        goalSecondarySchoolDegree:
          type: string
          enum:
            - yes
            - no
            - maybe
        goalMatriculationExam:
          type: string
          enum:
            - yes
            - no
            - maybe
        vocationalYears:
          description: defined as a string, but this is actually a number
          type: string
        goalJustMatriculationExam:
          type: string
          enum:
            - yes
            - no
        justTransferCredits:
          description: defined as a string, but this is actually a number
          type: string
        transferCreditYears:
          description: defined as a string, but this is actually a number
          type: string
        completionYears:
          description: defined as a string, but this is actually a number
          type: string
        mathSyllabus:
          type: string
          enum:
            - MAA
            - MAB
        finnish:
          type: string
          enum:
            - AI
            - S2
        swedish:
          type: boolean
        english:
          type: boolean
        german:
          type: boolean
        french:
          type: boolean
        italian:
          type: boolean
        spanish:
          type: boolean
        science:
          type: string
          enum:
            - BI
            - FY
            - KE
            - GE
        religion:
          type: string
          enum:
            - UE
            - ET
            - UX
        studentMatriculationSubjects:
          type: array
          items:
            type: string
        optedIn:
          type: boolean
        additionalInfo:
          type: string

    HOPSEligibility:
      type: object
      description: HOPSEligibilityType object
      required:
        - upperSecondarySchoolCurriculum
      properties:
        upperSecondarySchoolCurriculum:
          type: boolean

    HopsGoals:
      type: object
      description: HopsGoals object
      required:
        - graduationGoal
        - followUpGoal
      properties:
        graduationGoal:
          nullable: true
          type: string
        followUpGoal:
          type: string
        followUpStudies:
          type: string
        followUpStudiesElse:
          type: string
        studySector:
          type: string
        studySectorElse:
          type: string
        followUpPlanExtraInfo:
          type: string

    InterimEvaluationRequest:
      type: object
      description: InterimEvaluationRequest object
      required:
        - id
        - userEntityId
        - workspaceEntityId
        - workspaceMaterialId
        - requestDate
        - cancellationDate
        - requestText
        - archived
      properties:
        id:
          type: integer
        userEntityId:
          type: integer
        workspaceEntityId:
          type: integer
        workspaceMaterialId:
          type: integer
        requestDate:
          type: string
        cancellationDate:
          type: string
        requestText:
          type: string
        archived:
          type: boolean

    LocaleType:
      type: string
      enum:
        - en
        - fi

    LocalizationLocale:
      type: object
      description: LocalizationLocale object
      required:
        - lang
      properties:
        lang:
          $ref: "#/components/schemas/LocaleType"

    MatriculationSubject:
      type: object
      description: MatriculationSubject object
      required:
        - code
        - subjectCode
      properties:
        code:
          type: string
        subjectCode:
          type: string

    MatriculationExamDegreeStructure:
      type: string
      enum:
        - PRE2022
        - POST2022

    MatriculationExamApplication:
      type: object
      description: MatriculationExamApplication object
      required:
        - examId
        - name
        - ssn
        - email
        - phone
        - address
        - postalCode
        - city
        - guider
        - enrollAs
        - degreeType
        - restartExam
        - numMandatoryCourses
        - location
        - message
        - degreeStructure
        - studentIdentifier
        - canPublishName
        - state
        - attendances
      properties:
        examId:
          type: string
        name:
          type: string
        ssn:
          type: string
        email:
          type: string
        phone:
          type: string
        address:
          type: string
        postalCode:
          type: string
        city:
          type: string
        guider:
          type: string
        enrollAs:
          type: string
        degreeType:
          type: string
        restartExam:
          type: boolean
        numMandatoryCourses:
          type: integer
        location:
          type: string
        message:
          type: string
        degreeStructure:
          $ref: "#/components/schemas/AudioAssessment"
        studentIdentifier:
          type: string
        canPublishName:
          type: boolean
        state:
          type: string
        attendances:
          type: array
          items:
            $ref: "#/components/schemas/AnyValue"

    MatriculationEnrollemnt:
      type: object
      description: MatriculationEnrollemnt object
      required:
        - id
        - enrolled
        - enrollmentDate
        - eligible
        - starts
        - ends
        - compulsoryEducationEligible
      properties:
        id:
          type: integer
        enrolled:
          type: boolean
        enrollmentDate:
          type: string
        eligible:
          type: boolean
        starts:
          type: string
        ends:
          type: string
        compulsoryEducationEligible:
          type: boolean

    MatriculationStudentData:
      type: object
      description: MatriculationStudent object
      required:
        - address
        - email
        - enrollmentSent
        - guidanceCounselor
        - locality
        - name
        - phone
        - postalCode
        - ssn
        - studentIdentifier
      properties:
        address:
          type: string
        email:
          type: string
        enrollmentSent:
          type: boolean
        guidanceCounselor:
          type: string
        locality:
          type: string
        name:
          type: string
        phone:
          type: string
        postalCode:
          type: string
        ssn:
          type: string
        studentIdentifier:
          type: string

    MatriculationAttendanceStatusType:
      type: string
      enum:
        - ENROLLED
        - FINISHED
        - PLANNED

    MatriculationExamFundingType:
      type: string
      enum:
        - SELF_FUNDED
        - COMPULSORYEDUCATION_FREE
        - COMPULSORYEDUCATION_FREE_RETRY

    MatriculationExamEnrolledSubject:
      type: object
      description: MatriculationExamEnrolledSubject object
      required:
        - subject
        - mandatory
        - repeat
        - status
        - refType
      properties:
        subject:
          type: string
        mandatory:
          type: string
        repeat:
          type: string
        status:
          $ref: "#/components/schemas/MatriculationAttendanceStatusType"
        funding:
          $ref: "#/components/schemas/MatriculationExamFundingType"

    MatriculationExamFinishedSubject:
      type: object
      description: MatriculationExamEnrolledSubject object
      required:
        - term
        - subject
        - mandatory
        - grade
        - status
        - refType
      properties:
        term:
          $ref: "#/components/schemas/AnyValue"
        subject:
          type: string
        mandatory:
          type: string
        grade:
          type: string
        status:
          $ref: "#/components/schemas/MatriculationAttendanceStatusType"
        funding:
          $ref: "#/components/schemas/MatriculationExamFundingType"

    MatriculationExamPlannedSubject:
      type: object
      description: MatriculationExamEnrolledSubject object
      required:
        - term
        - subject
        - mandatory
        - status
      properties:
        term:
          $ref: "#/components/schemas/AnyValue"
        subject:
          type: string
        mandatory:
          type: string
        status:
          $ref: "#/components/schemas/MatriculationAttendanceStatusType"
        funding:
          $ref: "#/components/schemas/MatriculationExamFundingType"

    MatriculationExamSubject:
      oneOf:
        - $ref: "#/components/schemas/MatriculationExamEnrolledSubject"
        - $ref: "#/components/schemas/MatriculationExamFinishedSubject"
        - $ref: "#/components/schemas/MatriculationExamPlannedSubject"

    MatriculationStudentExamination:
      type: object
      description: MatriculationStudentExamination object
      required:
        - canPublishName
        - changedContactInfo
        - degreeType
        - enrollAs
        - enrolledAttendances
        - finishedAttendances
        - plannedAttendances
        - guider
        - initialized
        - location
        - message
        - numMandatoryCourses
        - restartExam
        - degreeStructure
      properties:
        canPublishName:
          type: boolean
        changedContactInfo:
          type: boolean
        degreeType:
          type: string
        enrollAs:
          type: string
        enrolledAttendances:
          type: array
          items:
            $ref: "#/components/schemas/MatriculationExamEnrolledSubject"
        finishedAttendances:
          type: array
          items:
            $ref: "#/components/schemas/MatriculationExamFinishedSubject"
        plannedAttendances:
          type: array
          items:
            $ref: "#/components/schemas/MatriculationExamPlannedSubject"
        guider:
          type: string
        initialized:
          type: boolean
        location:
          type: string
        message:
          type: string
        numMandatoryCourses:
          type: integer
        restartExam:
          description: Value is either boolean or string
          allOf:
            - $ref: "#/components/schemas/AnyValue"
        degreeStructure:
          $ref: "#/components/schemas/MatriculationExamDegreeStructure"

    MaterialReply:
      type: object
      description: MaterialReply object
      required:
        - id
        - state
      properties:
        id:
          type: integer
        state:
          $ref: "#/components/schemas/MaterialCompositeReplyStateType"

    MaterialEvaluationInfo:
      type: object
      description: Evaluation info of the material assignments
      required:
        - id
        - type
        - evaluationType
        - text
        - grade
        - date
        - audioAssessments
      properties:
        id:
          type: integer
        type:
          $ref: "#/components/schemas/MaterialCompositeReplyStateType"
        evaluationType:
          type: string
        text:
          type: string
        grade:
          type: string
        date:
          type: string
        audioAssessments:
          type: array
          items:
            $ref: "#/components/schemas/AudioAssessment"

    MaterialAnswer:
      type: object
      description: MaterialAnswer object
      required:
        - embedId
        - fieldName
        - materialId
        - value
        - workspaceMaterialId

    MaterialCompositeReplyStateType:
      type: string
      enum:
        - UNANSWERED
        - ANSWERED
        - SUBMITTED
        - WITHDRAWN
        - PASSED
        - FAILED
        - INCOMPLETE

    MaterialCompositeReply:
      type: object
      description: MaterialCompositeReply object
      required:
        - answers
        - state
        - created
        - lastModified
        - submitted
        - workspaceMaterialId
        - workspaceMaterialReplyId
      properties:
        answers:
          type: array
          items:
            $ref: "#/components/schemas/MaterialAnswer"
        state:
          $ref: "#/components/schemas/MaterialCompositeReplyStateType"
        evaluationInfo:
          $ref: "#/components/schemas/MaterialEvaluationInfo"
        created:
          type: string
          format: date-time
        lastModified:
          type: string
          format: date-time
        submitted:
          type: string
          format: date-time
        withdrawn:
          type: string
          format: date-time
        workspaceMaterialId:
          type: integer
        workspaceMaterialReplyId:
          type: integer

    MaterialAssigmentType:
      type: string
      enum:
        - EXERCISE
        - EVALUATED
        - JOURNAL
        - INTERIM_EVALUATION

    MaterialViewRestriction:
      type: string
      enum:
        - NONE
        - LOGGED_IN
        - WORKSPACE_MEMBERS

    MaterialAnswersType:
      type: string
      enum:
        - ALWAYS
        - ON_REQUEST
        - NEVER

    MaterialAssignment:
      type: object
      description: MaterialAssignment object
      required:
        - id
        - materialId
        - parentId
        - nextSiblingId
        - hidden
        - assignmentType
        - correctAnswers
        - path
        - title
      properties:
        id:
          type: integer
        materialId:
          type: integer
        parentId:
          type: integer
        nextSiblingId:
          type: integer
        hidden:
          type: boolean
        assignmentType:
          $ref: "#/components/schemas/MaterialAssigmentType"
        correctAnswers:
          type: string
        path:
          type: string
        title:
          type: string

    MaterialEvaluation:
      type: object
      description: MaterialEvaluation object
      required:
        - id
        - evaluated
        - assessorEntityId
        - studentEntityId
        - workspaceMaterialId
        - gradingScaleIdentifier
        - gradingScaleSchoolDataSource
        - grade
        - gradeIdentifier
        - gradeSchoolDataSource
        - gradingScale
        - verbalAssessment
        - passed
        - audioAssessments
      properties:
        id:
          type: integer
        evaluated:
          type: string
        assessorEntityId:
          type: integer
        studentEntityId:
          type: integer
        workspaceMaterialId:
          type: integer
        gradingScaleIdentifier:
          type: string
        gradingScaleSchoolDataSource:
          type: string
        grade:
          type: string
        gradeIdentifier:
          type: string
        gradeSchoolDataSource:
          type: string
        gradingScale:
          type: string
        verbalAssessment:
          type: string
        passed:
          type: boolean
        audioAssessments:
          type: array
          items:
            $ref: "#/components/schemas/AudioAssessment"

    MaterialContentNodeProducer:
      type: object
      description: MaterialContentNodeProducer object
      required:
        - id
        - name
        - materialId
      properties:
        id:
          type: integer
        name:
          type: string
        materialId:
          type: integer

    MaterialContentNode:
      type: object
      description: HtmlMaterialContentNode object
      required:
        - title
        - license
        - viewRestrict
        - html
        - contentType
        - contentHiddenForUser
      properties:
        title:
          type: string
        license:
          type: string
        viewRestrict:
          $ref: "#/components/schemas/MaterialViewRestriction"
        html:
          type: string
        contentType:
          type: string
        contentHiddenForUser:
          type: boolean
        titleLanguage:
          #nullable: true
          allOf:
            - $ref: "#/components/schemas/Language"
        id:
          type: integer
        type:
          type: string
        children:
          type: array
          items:
            $ref: "#/components/schemas/MaterialContentNode"
        workspaceMaterialId:
          type: integer
        materialId:
          type: integer
        level:
          type: integer
        assignmentType:
          $ref: "#/components/schemas/MaterialAssigmentType"
        correctAnswers:
          type: string
        hidden:
          type: boolean
        parentId:
          type: integer
        nextSiblingId:
          type: integer
        path:
          type: string
        producers:
          type: array
          items:
            $ref: "#/components/schemas/MaterialContentNodeProducer"
        childrenAttachments:
          type: array
          items:
            $ref: "#/components/schemas/MaterialContentNode"
        evaluation:
          $ref: "#/components/schemas/MaterialEvaluation"
        assignment:
          $ref: "#/components/schemas/MaterialAssignment"

    Message:
      type: object
      description: Message object
      required:
        - id
        - senderId
        - communicatorMessageId
        - caption
        - categoryName
        - content
        - created
        - recipientCount
        - recipients
        - sender
        - tags
        - userGroupRecipients
        - workspaceRecipients
      properties:
        id:
          type: integer
        senderId:
          type: integer
        communicatorMessageId:
          type: integer
        caption:
          type: string
        categoryName:
          type: string
        content:
          type: string
        created:
          type: string
        recipientCount:
          type: integer
        recipients:
          type: array
          items:
            $ref: "#/components/schemas/MessageRecipient"
        sender:
          $ref: "#/components/schemas/User"
        tags:
          $ref: "#/components/schemas/AnyValue"
        userGroupRecipients:
          type: array
          items:
            $ref: "#/components/schemas/UserGroup"
        workspaceRecipients:
          type: array
          items:
            $ref: "#/components/schemas/MessageRecipientWorkspace"

    MessageThread:
      type: object
      description: Message thread object
      required:
        - id
        - senderId
        - communicatorMessageId
        - caption
        - categoryName
        - content
        - created
        - sender
        - tags
        - unreadMessagesInThread
        - threadLatestMessageDate
        - messageCountInThread
        - labels
      properties:
        id:
          type: integer
        senderId:
          type: integer
        communicatorMessageId:
          type: integer
        caption:
          type: string
        categoryName:
          type: string
        content:
          type: string
        created:
          type: string
        sender:
          $ref: "#/components/schemas/User"
        tags:
          $ref: "#/components/schemas/AnyValue"
        unreadMessagesInThread:
          type: boolean
        threadLatestMessageDate:
          type: string
        messageCountInThread:
          type: integer
        labels:
          type: array
          items:
            $ref: "#/components/schemas/MessageThreadLabel"
        recipients:
          type: array
          items:
            $ref: "#/components/schemas/MessageRecipient"
        userGroupRecipients:
          type: array
          items:
            $ref: "#/components/schemas/UserGroup"
        workspaceRecipients:
          type: array
          items:
            $ref: "#/components/schemas/MessageRecipientWorkspace"

    MessageThreadExpanded:
      type: object
      description: Message thread expanded object
      required:
        - messages
        - labels
      properties:
        olderThreadId:
          type: integer
        newerThreadId:
          type: integer
        messages:
          type: array
          items:
            $ref: "#/components/schemas/Message"
        labels:
          type: array
          items:
            $ref: "#/components/schemas/MessageThreadLabel"

    MessageThreadLabel:
      type: object
      description: Message thread label object
      required:
        - id
        - labelName
        - labelColor
        - labelId
        - messageThreadId
        - userEntityId
      properties:
        id:
          type: integer
        labelName:
          type: string
        labelColor:
          type: integer
        labelId:
          type: integer
        messageThreadId:
          type: integer
        userEntityId:
          type: integer

    MessageRecipient:
      type: object
      description: Message recipient object
      required:
        - recipientId
        - userEntityId
        - communicatorMessageId
        - firstName
      properties:
        recipientId:
          type: integer
        userEntityId:
          type: integer
        communicatorMessageId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
          nullable: true
        nickname:
          type: string
          nullable: true
        archived:
          type: boolean
        studiesEnded:
          type: boolean

    MessageRecipientWorkspace:
      type: object
      description: RecipientWorkspace object
      required:
        - workspaceName
        - workspaceEntityId
        - archetype
      properties:
        workspaceName:
          type: string
        workspaceEntityId:
          type: integer
        archetype:
          type: string
        workspaceExtension:
          type: string

    MessageSearchResult:
      type: object
      description: Message search result object
      required:
        - id
        - senderId
        - communicatorMessageId
        - caption
        - created
        - readByReceiver
        - folder
        - labels
        - sender
        - tags
        - recipients
        - userGroupRecipients
        - workspaceRecipients
      properties:
        id:
          type: integer
        senderId:
          type: integer
        communicatorMessageId:
          type: integer
        caption:
          type: string
        created:
          type: string
        readByReceiver:
          type: boolean
        folder:
          $ref: "#/components/schemas/MessageFolder"
        labels:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              labelName:
                type: string
              labelColor:
                type: integer
        sender:
          type: object
          properties:
            userEntityId:
              type: integer
            firstName:
              type: string
            lastName:
              type: string
            nickname:
              type: string
            studyProgrammeName:
              type: string
              nullable: true
        tags:
          $ref: "#/components/schemas/AnyValue"
        recipients:
          type: array
          items:
            $ref: "#/components/schemas/MessageRecipient"
        userGroupRecipients:
          type: array
          items:
            $ref: "#/components/schemas/UserGroup"
        workspaceRecipients:
          type: array
          items:
            $ref: "#/components/schemas/MessageRecipientWorkspace"

    MessageFolder:
      type: string
      enum:
        - INBOX
        - SENT
        - TRASH

    Note:
      type: object
      description: Note object
      required:
        - id
        - title
        - description
        - type
        - priority
        - pinned
        - isActive
        - isArchived
        - owner
        - creator
        - creatorName
        - created
        - startDate
        - dueDate
        - status
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        type:
          $ref: "#/components/schemas/NoteCreationType"
        priority:
          $ref: "#/components/schemas/NotePriorityType"
        pinned:
          type: boolean
        isActive:
          type: boolean
        isArchived:
          type: boolean
        owner:
          type: string
        creator:
          type: string
        creatorName:
          type: string
        created:
          type: string
        startDate:
          nullable: true
          type: string
        dueDate:
          nullable: true
          type: string
        status:
          $ref: "#/components/schemas/NoteStatusType"

    NoteCreationType:
      type: string
      enum:
        - MANUAL
        - AUTOMATIC

    NotePriorityType:
      type: string
      enum:
        - OWN
        - LOW
        - NORMAL
        - HIGH

    NoteStatusType:
      type: string
      enum:
        - ONGOING
        - APPROVAL_PENDING
        - APPROVED

    Label:
      type: object
      description: Label object
      required:
        - id
        - name
        - color
      properties:
        id:
          type: integer
        name:
          type: string
        color:
          type: integer

    Course:
      type: object
      description: Course object
      required:
        - subject
        - courseNumber
      properties:
        subject:
          description: Subject of the course
          type: string
        courseNumber:
          description: Number of the course
          type: integer

    Organization:
      type: object
      description: Organization object
      required:
        - id
        - name
      properties:
        id:
          type: integer
        name:
          type: string

    OrganizationWorkspaceSummary:
      type: object
      description: OrganizationWorkspaceSummary object
      required:
        - unpublishedCount
        - publishedCount
      properties:
        unpublishedCount:
          type: integer
        publishedCount:
          type: integer

    OrganizationStudentsSummary:
      type: object
      description: OrganizationStudentsSummary object
      required:
        - activeStudents
        - inactiveStudents
      properties:
        inactiveStudents:
          type: integer
        activeStudents:
          type: integer

    OrganizationContact:
      type: object
      description: OrganizationContact object
      required:
        - id
        - type
        - name
        - phone
        - email
      properties:
        id:
          type: integer
        type:
          type: string
        name:
          type: string
        phone:
          type: string
        email:
          type: string

    OrganizationStaffMember:
      type: object
      description: OrganizationStaffMember object
      required:
        - id
        - firstName
        - lastName
        - email
        - phone
        - title
        - organization
        - properties
        - role

    OptionalCourseSuggestion:
      allOf:
        - $ref: "#/components/schemas/Course"

    PedagogyFormAccess:
      type: object
      description: PedagogyFormAccess object
      required:
        - accessible
        - courseTeacher
        - specEdTeacher
        - guidanceCounselor
      properties:
        accessible:
          type: boolean
        courseTeacher:
          type: boolean
        specEdTeacher:
          type: boolean
        guidanceCounselor:
          type: boolean

    PedagogyFormState:
      type: string
      enum:
        - PENDING
        - APPROVED
        - NOT_SENT
        - INACTIVE

    PedagogyFormVisibility:
      type: string
      enum:
        - TEACHER
        - GUARDIANS

    PedaogyHistoryEntry:
      type: object
      description: PedaogyHistoryEntry object
      required:
        - modifierId
        - modifierName
        - modifierHasAvatar
        - date
      properties:
        modifierId:
          description: Id of the user who made the update
          type: integer
        modifierName:
          description: The user who made the update
          type: string
        modifierHasAvatar:
          description: If the user who made the update has an avatar
          type: boolean
        date:
          description: The date when the update was made
          type: string
        editedFiels:
          description: Fields that were edited in the update
          type: array
          items:
            type: string
        details:
          description: The description or details of the update what was done
          type: string

    PedagogyUserInfo:
      type: object
      description: PedagogyUserInfo object
      required:
        - firstName
        - lastName
      properties:
        firstName:
          description: The first name of the student. Include the middle names if the student has one
          example: "Matti Johannes"
          type: string
        lastName:
          description: The last name of the student
          example: "Meikäläinen"
          type: string
        dateOfBirth:
          description: The date of birth of the student
          type: string
        phoneNumber:
          description: Phone number of the student
          type: string
          nullable: true
        city:
          description: The city where the student lives
          type: string
          nullable: true
        country:
          description: The country where the student lives
          type: string
          nullable: true
        email:
          description: Email of the student
          type: string
          nullable: true
        streetAddress:
          description: The street address of the student
          type: string
          nullable: true
        addressName:
          description: The address of the student
          type: string
          nullable: true
        zipCode:
          description: The postal code of the student
          type: string
          nullable: true

    PedagogyForm:
      type: object
      description: PedagogyForm object
      required:
        - studentIdentifier
        - ownerId
        - ownerInfo
        - id
        - state
        - studentInfo
        - history
        - visibility
      properties:
        studentIdentifier:
          description: The id of the student
          example: "STUDENT-1"
          type: string
        ownerId:
          description: Id of the user who created the document
          type: integer
        ownerInfo:
          description: Info of the user who created the document
          allOf:
            - $ref: "#/components/schemas/PedagogyUserInfo"
        id:
          description: The id of the form
          type: integer
        state:
          description: State of the form
          example: "PENDING | APPROVED | NOT_SENT | INACTIVE"
          allOf:
            - $ref: "#/components/schemas/PedagogyFormState"
        studentInfo:
          description: Student information. Data is automatically filled in from the student's profile and can not be changed in the form
          allOf:
            - $ref: "#/components/schemas/PedagogyUserInfo"
        history:
          description: Update history of the form
          type: array
          items:
            $ref: "#/components/schemas/PedaogyHistoryEntry"
        visibility:
          description: Permissions for reading and viewing the form inside Muikku
          example: ["TEACHER", "GUARDIANS"]
          type: array
          items:
            $ref: "#/components/schemas/PedagogyFormVisibility"
        fromData:
          description: The data of the form
          example: "JSON object"
          type: string
        created:
          description: The date when the form was created
          type: string

    PublicityRestriction:
      type: string
      enum:
        - LIST_ALL
        - ONLY_PUBLISHED
        - ONLY_UNPUBLISHED

    RecordWorkspaceActivity:
      type: object
      description: RecordWorkspaceActivity object
      required:
        - id
        - identifier
        - subjects
        - assessmentStates
        - name
        - curriculums
      properties:
        id:
          type: integer
        identifier:
          type: string
        subjects:
          nullable: true
          type: array
          items:
            $ref: "#/components/schemas/RecordWorkspaceActivitySubject"
        assessmentStates:
          type: array
          items:
            $ref: "#/components/schemas/AssessmentState"
        name:
          type: string
        curriculums:
          nullable: true
          type: array
          items:
            $ref: "#/components/schemas/RecordWorkspaceActivityCurriculum"
        exercisesTotal:
          nullable: true
          type: integer
        exercisesAnswered:
          nullable: true
          type: integer
        evaluablesTotal:
          nullable: true
          type: integer
        evaluablesAnswered:
          nullable: true
          type: integer

    RecordWorkspaceActivitySubject:
      type: object
      description: RecordWorkspaceActivitySubject object
      required:
        - subjectCode
        - subjectName
        - courseLength
        - courseLengthSymbol
      properties:
        subjectCode:
          type: string
        subjectName:
          type: string
        courseNumber:
          type: integer
        courseLength:
          type: integer
        courseLengthSymbol:
          type: string
        identifier:
          nullable: true
          type: string

    RecordWorkspaceActivityCurriculum:
      type: object
      description: RecordWorkspaceActivityCurriculum object
      required:
        - identifier
        - name
      properties:
        identifier:
          type: string
        name:
          type: string

    RecordWorkspaceActivityInfo:
      type: object
      description: RecordsWorkspaceActivityInfo object
      required:
        - lineName
        - lineCategory
        - defaultLine
        - activities
      properties:
        lineName:
          type: string
        lineCategory:
          type: string
        defaultLine:
          type: boolean
        activities:
          type: array
          items:
            $ref: "#/components/schemas/RecordWorkspaceActivity"
    Role:
      type: string
      enum:
        - TEACHER
        - STUDENT
        - ADMINISTRATOR
        - MANAGER
        - STUDY_PROGRAMME_LEADER
        - STUDY_GUIDER
        - CUSTOM

    Subject:
      type: object
      description: Subject object
      required:
        - identifier
        - name
        - code
      properties:
        identifier:
          type: string
        name:
          type: string
        code:
          type: string

    StudentInfo:
      type: object
      description: StudentInfo object
      required:
        - id
        - firstName
        - lastName
        - studyTimeEnd
        - studyProgrammeEducationType
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        studyTimeEnd:
          type: string
        studyProgrammeEducationType:
          type: string
        counselorList:
          type: array
          items:
            type: string

    StudentStudyActivity:
      type: object
      description: StudentStudyActivity object
      required:
        - subjectName
        - subject
        - courseId
        - courseNumber
        - courseName
        - grade
        - status
        - date
        - transferCreditMandatory
        - id
      properties:
        subjectName:
          type: string
          nullable: true
        subject:
          type: string
        courseId:
          type: integer
          nullable: true
        courseNumber:
          type: integer
        courseName:
          type: string
        grade:
          type: string
        status:
          $ref: "#/components/schemas/CourseStatus"
        date:
          type: string
        transferCreditMandatory:
          type: boolean
          nullable: true
        id:
          type: integer

    StudentCourseChoice:
      allOf:
        - $ref: "#/components/schemas/Course"

    StudyProgramme:
      type: object
      description: StudyProgramme object
      required:
        - identifier
        - name
      properties:
        identifier:
          type: string
        name:
          type: string

    TemplateRestriction:
      type: string
      enum:
        - LIST_ALL,
        - ONLY_TEMPLATES
        - ONLY_WORKSPACES

    UserSearchResult:
      description: StaffSearchResult object. Holding the search results of staff search and the total hit count.
      type: object
      required:
        - results
        - totalHitCount
        - firstResult
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/User"
        totalHitCount:
          type: integer
        firstResult:
          type: integer

    UserInfo:
      type: object
      description: Info data. Some of the fields are boolean, but are returned as string by the API. Everyvalue is optional and can be null. Values are returned if they are defined in the API call.
      required:
        - userId
        - schoolDataIdentifier
        - isStudent
        - moreInfoForLoggedUser
        - firstName
        - lastName
      properties:
        userId:
          description: The id of the user
          example: "1"
          type: string
        schoolDataIdentifier:
          description: The id of the user in the school data
          type: string
          example: "PYRAMUS-XX | PYRAMUS-STAFF-XX"
        isStudent:
          description: If the user is a student. Api returns this as string, but it is boolean
          example: "true | false"
          type: string
        moreInfoForLoggedUser:
          description: If logged user has permissions to see student in the guider. Used in conjunction with isStudent. Api returns this as string, but it is boolean.
          example: "true | false"
          type: string
        firstName:
          description: The first name of the user. Include the middle names if the user has one
          example: "Matti Johannes"
          type: string
        lastName:
          description: The last name of the user
          example: "Meikäläinen"
          type: string
        email:
          description: Email of the user
          type: string
          nullable: true
        phoneNumber:
          description: Phone number of the user
          type: string
          nullable: true
        vacationEnd:
          description: The date when the user's vacation ends
          type: string
          nullable: true
        vacationStart:
          description: The date when the user's vacation starts
          type: string
          nullable: true
        extraInfo:
          description: Extra info of the user
          type: string
          nullable: true
        hasAvatar:
          description: If the user has an avatar. Api returns this as string, but it is boolean and can be converted to boolean later.
          type: string
          example: "true | false"
          nullable: true
        whatsapp:
          description: If the user has enabled whatsapp. Api returns this as string, but it is boolean and can be converted to boolean later.
          type: string
          example: "true | false"
          nullable: true
        appointmentCalendar:
          description: Appointment calendar href. If the loaded user has enabled and set appointment calendar and logged user has permissions to use this feature.
          type: string
          nullable: true

    UserStudentAddress:
      type: object
      description: UserStudentAddress object
      required:
        - identifier
        - studentIdentifier
        - street
        - postalCode
        - city
        - region
        - country
        - type
        - defaultAddress
      properties:
        identifier:
          type: string
        studentIdentifier:
          type: string
        street:
          type: string
        postalCode:
          type: string
        city:
          type: string
        region:
          type: string
        country:
          type: string
        type:
          type: string
        defaultAddress:
          type: boolean

    UserStudentEmail:
      type: object
      description: UserStudentEmail object
      required:
        - studentIdentifier
        - type
        - address
        - defaultAddress
      properties:
        studentIdentifier:
          type: string
        type:
          type: string
        address:
          type: string
        defaultAddress:
          type: boolean

    UserStudentPhoneNumber:
      type: object
      description: UserStudentPhoneNumber object
      required:
        - studentIdentifier
        - type
        - number
        - defaultNumber
      properties:
        studentIdentifier:
          type: string
        type:
          type: string
        number:
          type: string
        defaultNumber:
          type: boolean

    UserStudent:
      type: object
      description: UserStudent object
      required:
        - workspaceUserEntityId
        - userIdentifier
        - userEntityId
        - firstName
        - lastName
        - studyProgrammeName
        - active
        - hasImage
      properties:
        workspaceUserEntityId:
          type: integer
        userIdentifier:
          type: string
        userEntityId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        nickName:
          type: string
        studyProgrammeName:
          type: string
        hasImage:
          type: boolean
        nickname:
          type: string
        active:
          type: boolean

    UserStaff:
      type: object
      description: UserStaff object
      required:
        - id
        - email
        - firstName
        - lastName
        - properties
        - userEntityId
        - hasImage
        - role
      properties:
        id:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        properties:
          $ref: "#/components/schemas/AnyValue"
        userEntityId:
          type: integer
        hasImage:
          type: boolean
        role:
          $ref: "#/components/schemas/Role"

    UserGroup:
      type: object
      description: UserGroup object
      required:
        - id
        - name
        - userCount
      properties:
        id:
          type: integer
        name:
          type: string
        userCount:
          type: integer
        identifier:
          type: string
        organization:
          $ref: "#/components/schemas/Organization"
        isGuidanceGroup:
          type: boolean

    UserEntityFile:
      type: object
      description: UserEntityFile object
      required:
        - id
        - name
        - contentType
        - fileId
        - base64Data
        - identifier
        - userEntityId
        - visibility
      properties:
        id:
          type: integer
        name:
          type: string
        contentType:
          type: string
        fileId:
          type: string
        base64Data:
          type: string
        identifier:
          type: string
        userEntityId:
          type: integer
        visibility:
          $ref: "#/components/schemas/UserEntityFileVisibility"

    UserFile:
      type: object
      description: UserFile object
      required:
        - id
        - userEntityId
        - fileName
        - contentType
        - title
        - description
        - archived
      properties:
        id:
          type: integer
        userEntityId:
          type: integer
        fileName:
          type: string
        contentType:
          type: string
        title:
          type: string
        description:
          type: string
        archived:
          type: boolean
        size:
          type: integer

    UserEntityFileVisibility:
      type: string
      enum:
        - PUBLIC
        - PRIVATE
        - STAFF

    UserStaffSearchResult:
      type: object
      description: UserStaffSearchResult object
      required:
        - results
        - totalHitCount
        - firstResult
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/UserStaff"
        totalHitCount:
          type: integer
        firstResult:
          type: integer

    User:
      type: object
      description: User object
      required:
        - id
        - firstName
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        nickName:
          type: string
        studyProgrammeName:
          type: string
        hasImage:
          type: boolean
        hasEvaluationFees:
          type: boolean
        curriculumIdentifier:
          type: string
        studyProgrammeIdentifier:
          type: string
        organizationIdentifier:
          type: string
        isDefaultOrganization:
          type: boolean
        permissions:
          type: array
          items:
            type: string
        roles:
          type: array
          items:
            type: string
        role:
          type: string
        ssn:
          type: string
        email:
          type: string
        language:
          type: string
        municipality:
          type: string
        nationality:
          type: string
        school:
          type: string
        studyStartDate:
          type: string
        studyTimeEnd:
          type: string
        userEntityId:
          type: integer
        lastLogin:
          type: string
        archived:
          type: boolean
        studiesEnded:
          type: boolean

    UserWithSchoolData:
      type: object
      description: UserWithSchoolData object
      required:
        - id
        - firstName
        - email
        - hasImage
        - updatedByStudent
        - userEntityId
        - matriculationEligibility
        - ceeposLine
      properties:
        id:
          type: string
        userEntityId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        nickName:
          type: string
        email:
          type: string
        hasImage:
          type: boolean
        updatedByStudent:
          type: boolean
        matriculationEligibility:
          type: string
        ceeposLine:
          type: string
          nullable: true
        curriculumIdentifier:
          type: string
        language:
          type: string
        municipality:
          type: string
        nationality:
          type: string
        school:
          type: string
        studyEndDate:
          type: string
        studyStartDate:
          type: string
        studyTimeEnd:
          type: string
        lastLogin:
          type: string
        studyProgrammeName:
          type: string

    UserWhoAmI:
      type: object
      description: This is whoAmI object returned by whoAmI endpoint. It contains basic information about the user.
      required:
        - id
        - identifier
        - organizationIdentifier
        - isActive
        - firstName
        - lastName
        - displayName
        - nickName
        - phoneNumbers
        - addresses
        - emails
        - hasImage
        - role
        - permissions
        - curriculumName
        - curriculumIdentifier
        - studyTimeEnd
        - studyTimeLeftStr
        - studyStartDate
        - studyEndDate
        - studyProgrammeName
        - studyProgrammeIdentifier
        - locale
        - hasEvaluationFees
        - isDefaultOrganization
        - services
      properties:
        id:
          type: integer
          nullable: true
        identifier:
          type: string
          description: PYRAMUS-STAFF-XX or PYRAMUS-STUDENT-XX type identifier
          nullable: true
        organizationIdentifier:
          type: string
          nullable: true
        isActive:
          type: boolean
          description: Whether user is active
          nullable: true
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        displayName:
          type: string
          nullable: true
        nickName:
          type: string
          nullable: true
        phoneNumbers:
          type: string
          nullable: true
        addresses:
          type: string
          nullable: true
        emails:
          type: string
          nullable: true
        hasImage:
          type: boolean
          nullable: true
        role:
          nullable: true
          $ref: "#/components/schemas/Role"
        permissions:
          type: array
          nullable: true
          items:
            type: string
        curriculumName:
          type: string
          nullable: true
        curriculumIdentifier:
          type: string
          nullable: true
        studyTimeEnd:
          type: string
          nullable: true
        studyTimeLeftStr:
          type: string
          nullable: true
        studyStartDate:
          type: string
          nullable: true
        studyEndDate:
          type: string
          nullable: true
        studyProgrammeName:
          type: string
          nullable: true
        studyProgrammeIdentifier:
          type: string
          nullable: true
        locale:
          type: string
          nullable: true
        hasEvaluationFees:
          type: boolean
          nullable: true
        isDefaultOrganization:
          type: boolean
          nullable: true
        services:
          $ref: "#/components/schemas/UserWhoAmIServices"

    UserWhoAmIServices:
      type: object
      description: WhoAmIServices object
      required:
        - chat
        - environmentForum
        - worklist
      properties:
        chat:
          type: object
          required:
            - isActive
            - isAvailable
          properties:
            isActive:
              type: boolean
            isAvailable:
              type: boolean
        environmentForum:
          type: object
          required:
            - isAvailable
          properties:
            isAvailable:
              type: boolean
        worklist:
          type: object
          required:
            - isAvailable
          properties:
            isAvailable:
              type: boolean

    Language:
      type: string
      enum:
        - fi
        - sv
        - en
        - de
        - ru
        - ja
        - es

    WorkspaceMandatority:
      type: string
      enum:
        - MANDATORY
        - SCHOOL_LEVEL_OPTIONAL
        - NATIONAL_LEVEL_OPTIONAL
        - UNSPECIFIED_OPTIONAL

    WorkspaceAccess:
      type: string
      enum:
        - MEMBERS_ONLY
        - LOGGED_IN
        - ANYONE

    WorkspaceAdditionalInfo:
      type: object
      description: WorkspaceAdditionalInfo object
      required:
        - beginDate
        - endDate
        - viewLink
        - subjects
      properties:
        beginDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        viewLink:
          type: string
        workspaceTypeId:
          type: integer
        workspaceType:
          type: string
        educationType:
          type: object
          properties:
            identifier:
              type: object
              properties:
                identifier:
                  type: string
                dataSource:
                  type: string
            name:
              type: string
            schoolDataSource:
              type: string
        subjects:
          type: array
          items:
            $ref: "#/components/schemas/WorkspaceSubject"

    Workspace:
      type: object
      description: Workspace object
      required:
        - id
        - name
        - description
        - published
        - archived
        - hasCustomImage
        - lastVisit
        - materialDefaultLicense
        - numVisits
        - subjectIdentifier
        - urlName
        - curriculumIdentifiers
        - organizationEntityId
        - language
      properties:
        id:
          type: integer
        name:
          type: string
        nameExtension:
          type: string
          nullable: true
        description:
          type: string
        published:
          type: boolean
        numVisits:
          type: integer
        subjectIdentifier:
          type: string
        materialDefaultLicense:
          type: string
        lastVisit:
          type: string
        hasCustomImage:
          type: boolean
        curriculumIdentifiers:
          type: array
          items:
            type: string
        archived:
          type: boolean
        organizationEntityId:
          type: integer
        urlName:
          type: string
        language:
          $ref: "#/components/schemas/Language"
        mandatority:
          allOf:
            - $ref: "#/components/schemas/WorkspaceMandatority"
          nullable: true
        access:
          $ref: "#/components/schemas/WorkspaceAccess"

    WorkspaceWithAddons:
      allOf:
        - $ref: "#/components/schemas/Workspace"
        - type: object
          properties:
            activity:
              $ref: "#/components/schemas/WorkspaceActivity"

    WorkspaceBasicInfo:
      type: object
      description: WorkspaceBasicInfo object
      required:
        - id
        - name
        - urlName
      properties:
        id:
          type: integer
        name:
          type: string
        urlName:
          type: string
        nameExtension:
          type: string
          nullable: true

    WorkspaceSubject:
      type: object
      description: WorkspaceSubject object
      required:
        - identifier
      properties:
        identifier:
          type: integer
        subject:
          $ref: "#/components/schemas/Subject"
        courseNumber:
          type: integer
        courseLength:
          type: string
        courseLengthSymbol:
          $ref: "#/components/schemas/WorkspaceLengthSymbol"

    WorkspaceLengthSymbol:
      type: object
      description: WorkspaceLengthSymbol object
      required:
        - id
        - name
        - symbol
      properties:
        id:
          type: string
        name:
          type: string
        symbol:
          type: string

    WorkspaceActivity:
      type: object
      description: WorkspaceActivity object
      required:
        - assessmentState
        - evaluablesAnswered
        - evaluablesAnsweredLastDate
        - evaluablesDonePercent
        - evaluablesFailed
        - evaluablesIncomplete
        - evaluablesPassed
        - evaluablesSubmitted
        - evaluablesTotal
        - evaluablesUnanswered
        - exercisesAnswered
        - exercisesAnsweredLastDate
        - exercisesDonePercent
        - exercisesTotal
        - exercisesUnanswered
        - journalEntryCount
        - numVisits
      properties:
        assessmentState:
          type: array
          items:
            $ref: "#/components/schemas/WorkspaceAssessment"
        evaluablesAnswered:
          type: integer
        evaluablesAnsweredLastDate:
          type: string
        evaluablesDonePercent:
          type: integer
        evaluablesFailed:
          type: integer
        evaluablesFailedLastDate:
          type: string
        evaluablesIncomplete:
          type: integer
        evaluablesIncompleteLastDate:
          type: string
        evaluablesPassed:
          type: integer
        evaluablesPassedLastDate:
          type: string
        evaluablesSubmitted:
          type: integer
        evaluablesSubmittedLastDate:
          type: string
        evaluablesTotal:
          type: integer
        evaluablesUnanswered:
          type: integer
        exercisesAnswered:
          type: integer
        exercisesAnsweredLastDate:
          type: string
        exercisesDonePercent:
          type: integer
        exercisesTotal:
          type: integer
        exercisesUnanswered:
          type: integer
        journalEntryCount:
          type: integer
        lastJournalEntry:
          type: string
        lastVisit:
          type: string
        numVisits:
          type: integer

    WorkspaceAssessment:
      type: object
      description: WorkspaceAssessment object
      required:
        - date
        - state
        - grade
        - passingGrade
        - text
        - workspaceSubjectIdentifier
      properties:
        date:
          type: string
        state:
          $ref: "#/components/schemas/WorkspaceAssessmentStateType"
        grade:
          type: string
        passingGrade:
          type: boolean
        text:
          type: string
        workspaceSubjectIdentifier:
          type: string
          nullable: true

    WorkspaceAssessmentStateType:
      type: string
      enum:
        - transferred
        - unassessed
        - pending
        - pending_pass
        - pending_fail
        - pass
        - fail
        - incomplete
        - interim_evaluation_request
        - interim_evaluation

    CourseStatus:
      type: string
      enum:
        - ONGOING
        - GRADED
        - TRANSFERRED
        - SUGGESTED_NEXT
        - SUGGESTED_OPTIONAL

    CourseType:
      type: string
      enum:
        - Nonstop
        - Ryhmäkurssi

    WorkspaceSuggestion:
      type: object
      description: WorkspaceSuggestion object
      required:
        - id
        - name
        - subject
        - courseNumber
        - urlName
        - hasCustomImage
        - nameExtension
        - courseType
      properties:
        id:
          type: integer
        name:
          type: string
        subject:
          type: string
        courseNumber:
          type: integer
        urlName:
          type: string
        hasCustomImage:
          type: boolean
        nameExtension:
          nullable: true
          type: string
        courseType:
          $ref: "#/components/schemas/CourseType"
        description:
          type: string
          nullable: true

    WorkspaceStudent:
      allOf: #extends WorkspaceUserBase object
        - $ref: "#/components/schemas/WorkspaceUserBase"
        - type: object
          description: WorkspaceUserRestModel object
          required:
            - nickname
            - studyProgrammeName
            - active
          properties:
            nickname:
              type: string
            studyProgrammeName:
              type: string
            active:
              type: boolean

    WorkspaceUserBase:
      type: object
      description: WorkspaceUserBase object
      required:
        - workspaceUserEntityId
        - userIdentifier
        - userEntityId
        - firstName
        - lastName
        - hasImage
      properties:
        workspaceUserEntityId:
          type: integer
        userIdentifier:
          type: string
        userEntityId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        hasImage:
          type: boolean

    WorkspaceType:
      type: object
      description: WorkspaceType object
      required:
        - identifier
        - name
      properties:
        identifier:
          type: string
        name:
          type: string

    WorkspaceEducationType:
      type: object
      description: WorkspaceEducationType object
      required:
        - identifier
        - name
      properties:
        identifier:
          type: string
        name:
          type: string

    WorkspaceDetails:
      type: object
      description: WorkspaceDetails object
      required:
        - beginDate
        - endDate
        - signupStart
        - signupEnd
        - externalViewUrl
        - typeId
        - rootFolderId
        - helpFolderId
        - indexFolderId
      properties:
        beginDate:
          description: OffSetDateTime format
          type: string
        endDate:
          description: OffSetDateTime format
          type: string
        signupStart:
          description: OffSetDateTime format
          type: string
        signupEnd:
          description: OffSetDateTime format
          type: string
        externalViewUrl:
          type: string
        typeId:
          type: string
        rootFolderId:
          type: integer
        helpFolderId:
          type: integer
        indexFolderId:
          type: integer

    WorkspaceMaterialProducer:
      type: object
      description: WorkspaceMaterialProducer object
      required:
        - name
      properties:
        name:
          type: string
        id:
          type: integer

    WorkspaceSignupGroup:
      type: object
      description: WorkspaceSignupGroup object
      required:
        - workspaceEntityId
        - userGroupEntityId
        - userGroupName
        - canSignup
      properties:
        workspaceEntityId:
          type: integer
        userGroupEntityId:
          type: integer
        userGroupName:
          type: string
        canSignup:
          type: boolean

    WorkspaceUserEntity:
      type: object
      description: WorkspaceUserEntity object
      required:
        - userEntityId
        - userIdentifier
        - workspaceUserEntityId
        - active
        - firstName
        - lastName
        - nickname
        - studyProgrammeName
        - hasImage
      properties:
        userEntityId:
          type: integer
        userIdentifier:
          type: string
        workspaceUserEntityId:
          type: integer
        active:
          type: boolean
        firstName:
          type: string
        lastName:
          type: string
        nickname:
          type: string
        studyProgrammeName:
          type: string
        hasImage:
          type: boolean

    WorkspaceStudentSearchResult:
      type: object
      description: WorkspaceStudentSearchResult object
      required:
        - results
        - totalHitCount
        - firstResult
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/WorkspaceStudent"
        totalHitCount:
          type: integer
        firstResult:
          type: integer

    WorkspaceJournal:
      type: object
      description: WorkspaceJournal object
      required:
        - id
        - workspaceEntityId
        - userEntityId
        - firstName
        - lastName
        - content
        - title
        - created
        - commentCount
        - isMaterialField
        - workspaceMaterialReplyState
      properties:
        id:
          type: integer
        workspaceEntityId:
          type: integer
        userEntityId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        content:
          type: string
        title:
          type: string
        created:
          type: string
        commentCount:
          type: integer
        isMaterialField:
          type: boolean
        workspaceMaterialReplyState:
          $ref: "#/components/schemas/MaterialCompositeReplyStateType"

    WorkspaceJournalComment:
      type: object
      description: WorkspaceJournalComment object
      required:
        - id
        - journalEntryId
        - parentCommentId
        - depth
        - authorId
        - firstName
        - lastName
        - comment
        - created
        - editable
        - archivable
      properties:
        id:
          type: integer
        journalEntryId:
          type: integer
        parentCommentId:
          type: integer
        depth:
          type: integer
        authorId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        comment:
          type: string
        created:
          type: string
          format: date-time
        editable:
          type: boolean
        archivable:
          type: boolean

    WorkspaceNote:
      type: object
      description: WorkspaceNote object
      required:
        - id
        - owner
        - workspaceEntityId
        - title
        - workspaceNote
      properties:
        id:
          type: integer
        owner:
          description: The id of the user
          type: string
        workspaceEntityId:
          description: The id of the workspace
          type: integer
        title:
          type: string
        workspaceNote:
          type: string
        nextSiblingId:
          description: Backend uses this to determine the order of the notes. This is not used in the frontend
          type: integer
          nullable: true

    WorklistEditableFieldType:
      type: string
      enum:
        - ENTRYDATE
        - DESCRIPTION
        - PRICE
        - FACTOR
        - BILLING_NUMBER

    WorklistBillingStateType:
      type: string
      enum:
        - ENTERED
        - PROPOSED
        - APPROVED
        - PAID

    WorklistTemplate:
      type: object
      description: WorklistTemplate object
      required:
        - id
        - description
        - price
        - factor
        - billingNumber
        - editableFields
      properties:
        id:
          type: integer
        description:
          type: string
        price:
          type: integer
        factor:
          type: integer
        billingNumber:
          type: integer
        editableFields:
          type: array
          items:
            $ref: "#/components/schemas/WorklistEditableFieldType"

    WorklistItem:
      type: object
      description: WorklistItem object
      required:
        - id
        - templateId
        - state
        - entryDate
        - description
        - price
        - factor
        - billingNumber
        - courseAssessment
        - editableFields
        - removable
      properties:
        id:
          type: integer
        templateId:
          type: integer
        state:
          $ref: "#/components/schemas/WorklistBillingStateType"
        entryDate:
          type: string
        description:
          type: string
        price:
          type: integer
        factor:
          type: integer
        billingNumber:
          type: integer
        courseAssessment:
          type: object
          properties:
            courseName:
              type: string
            studentName:
              type: string
            grade:
              type: integer
            raisedGrade:
              type: boolean
        editableFields:
          type: array
          items:
            $ref: "#/components/schemas/WorklistEditableFieldType"
        removable:
          type: boolean

    WorklistSummary:
      type: object
      description: WorklistSummary object
      required:
        - displayName
        - beginDate
        - endDate
        - count
      properties:
        displayName:
          type: string
        beginDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        count:
          type: integer

    WorkspaceChatStatus:
      type: string
      enum:
        - ENABLED
        - DISABLED

    ErrorModel:
      type: object
      description: ErrorModel object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
