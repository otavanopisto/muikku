<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>fi.muikku</groupId>
    <artifactId>parent</artifactId>
    <version>1.0.75-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>
  
  <artifactId>atests</artifactId>
  <packaging>jar</packaging>
  <name>Muikku atests</name>
  <description>Muikku acceptance tests</description>

  <properties>
    <!-- Selenium -->
    <selenium-java.version>2.48.2</selenium-java.version>
    <wiremock.version>1.53</wiremock.version>
  </properties>

  <dependencies>

    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-java</artifactId>
      <version>${selenium-java.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.saucelabs</groupId>
      <artifactId>sauce_junit</artifactId>
      <version>2.1.18</version>
      <scope>test</scope>
      <!-- 
      <exclusions>
        <exclusion>
          <artifactId>httpclient</artifactId>
          <groupId>org.apache.httpcomponents</groupId>
        </exclusion>
      </exclusions> -->
    </dependency>

    <dependency>
      <groupId>joda-time</groupId>
      <artifactId>joda-time</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- RestEasy -->
    
    <dependency>
      <groupId>org.jboss.resteasy</groupId>
      <artifactId>resteasy-jaxrs</artifactId>
      <scope>provided</scope>
    </dependency>
    
    <dependency>
      <groupId>org.jboss.resteasy</groupId>
      <artifactId>jaxrs-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.resteasy</groupId>
      <artifactId>resteasy-jackson2-provider</artifactId>
      <scope>provided</scope>
    </dependency>
    
    <dependency>
      <groupId>org.jboss.resteasy</groupId>
      <artifactId>resteasy-client</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Jackson -->

    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-joda</artifactId>
    </dependency> 

    <dependency>
      <groupId>com.fasterxml.jackson.jaxrs</groupId>
      <artifactId>jackson-jaxrs-json-provider</artifactId>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>fi.pyramus</groupId>
      <artifactId>rest-model</artifactId>
      <version>0.7.26-SNAPSHOT</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>fi.pyramus</groupId>
      <artifactId>pyramus-webhooks</artifactId>
      <version>0.7.26-SNAPSHOT</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.github.tomakehurst</groupId>
      <artifactId>wiremock</artifactId>
      <version>${wiremock.version}</version>
      <scope>test</scope>
      <!-- Include everything below here if you have dependency conflicts -->
      <classifier>standalone</classifier>
      <exclusions>
        <exclusion>
          <groupId>org.mortbay.jetty</groupId>
          <artifactId>jetty</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.google.guava</groupId>
          <artifactId>guava</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.fasterxml.jackson.core</groupId>
          <artifactId>jackson-core</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.fasterxml.jackson.core</groupId>
          <artifactId>jackson-annotations</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.fasterxml.jackson.core</groupId>
          <artifactId>jackson-databind</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.apache.httpcomponents</groupId>
          <artifactId>httpclient</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.skyscreamer</groupId>
          <artifactId>jsonassert</artifactId>
        </exclusion>
        <exclusion>
          <groupId>xmlunit</groupId>
          <artifactId>xmlunit</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.jayway.jsonpath</groupId>
          <artifactId>json-path</artifactId>
        </exclusion>
        <exclusion>
          <groupId>net.sf.jopt-simple</groupId>
          <artifactId>jopt-simple</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.jayway.restassured</groupId>
      <artifactId>rest-assured</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.oltu.oauth2</groupId>
      <artifactId>org.apache.oltu.oauth2.common</artifactId>
      <version>1.0.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.oltu.oauth2</groupId>
      <artifactId>org.apache.oltu.oauth2.authzserver</artifactId>
      <version>1.0.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.oltu.oauth2</groupId>
      <artifactId>org.apache.oltu.oauth2.resourceserver</artifactId>
      <version>1.0.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.oltu.oauth2</groupId>
      <artifactId>org.apache.oltu.oauth2.client</artifactId>
      <version>1.0.0</version>
      <scope>test</scope>
    </dependency>
    
    <dependency>
      <groupId>fi.muikku</groupId>
      <artifactId>persistence</artifactId>
    </dependency>
    
    <dependency>
      <groupId>fi.muikku</groupId>
      <artifactId>core-plugins-persistence</artifactId>
    </dependency>
    
    <dependency>
      <groupId>fi.muikku</groupId>
      <artifactId>muikku-school-data-pyramus-persistence</artifactId>
    </dependency>
    
    <dependency>
      <groupId>fi.muikku</groupId>
      <artifactId>forum-plugin-rest-model</artifactId>
    </dependency>

    <dependency>
      <groupId>fi.muikku</groupId>
      <artifactId>atests-plugin-rest-model</artifactId>
      <version>${project.version}</version>
    </dependency>    
    
    <dependency>
      <groupId>javax.enterprise</groupId>
      <artifactId>cdi-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.jboss.spec.javax.servlet</groupId>
      <artifactId>jboss-servlet-api_3.1_spec</artifactId>
    </dependency>
    
    <dependency>
      <artifactId>httpclient</artifactId>
      <groupId>org.apache.httpcomponents</groupId>
      <version>4.3.1</version>
    </dependency>
    
    <dependency>
      <artifactId>httpmime</artifactId>
      <groupId>org.apache.httpcomponents</groupId>
      <version>4.3.1</version>
    </dependency>
    
    <dependency>
      <artifactId>httpcore</artifactId>
      <groupId>org.apache.httpcomponents</groupId>
      <version>4.3.1</version>
    </dependency>
    
    <dependency>
      <groupId>org.skyscreamer</groupId>
      <artifactId>jsonassert</artifactId>
      <version>1.2.3</version>
    </dependency>
  </dependencies>

  <profiles>
    <profile>
      <id>ui-it</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <h2.version>1.4.177</h2.version>
        <it.port.http>8080</it.port.http>
        <it.port.https>8443</it.port.https>
        <it.host>dev.muikku.fi</it.host>
        <it.build.directory>${project.build.directory}</it.build.directory>
        <it.jdbc.driver>org.h2.Driver</it.jdbc.driver>
        <it.jdbc.url>jdbc:h2:file:${project.build.directory}/h2;AUTO_SERVER=TRUE</it.jdbc.url>
        <it.jdbc.jndi>java:/jdbc/muikku</it.jdbc.jndi>
        <it.jdbc.username>sa</it.jdbc.username>
        <it.jdbc.password>sa</it.jdbc.password>
        <it.hibernate.dialect>org.hibernate.dialect.H2Dialect</it.hibernate.dialect>
        <it.keystore.alias>pyrit</it.keystore.alias>
        <it.keystore.pass>storepass</it.keystore.pass>
        <it.keystore.file>${it.build.directory}/pyrit.keystore</it.keystore.file>
        <it.wiremock.port>8089</it.wiremock.port>
        <it.report.directory>${project.build.directory}/failsafe-reports/</it.report.directory>
        <it.package>**</it.package>
      </properties>

      <dependencies>
        <dependency>
          <groupId>com.h2database</groupId>
          <artifactId>h2</artifactId>
          <version>${h2.version}</version>
          <scope>test</scope>
        </dependency>
      </dependencies>
      <build>

        <plugins>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>2.14.1</version>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>2.16</version>
            <configuration>

              <dependenciesToScan>
                <dependency>fi.muikku:core-plugins</dependency>
              </dependenciesToScan>

              <includes>
                <include>fi/muikku/ui/chrome/${it.package}/*IT.java</include>
              </includes>
              <systemPropertyVariables>
                <it.project.version>${project.version}</it.project.version>
                <it.host>${it.host}</it.host>
                <it.port.http>${it.port.http}</it.port.http>
                <it.port.https>${it.port.https}</it.port.https>
                <it.jdbc.driver>${it.jdbc.driver}</it.jdbc.driver>
                <it.jdbc.url>${it.jdbc.url}</it.jdbc.url>
                <it.jdbc.jndi>${it.jdbc.jndi}</it.jdbc.jndi>
                <it.jdbc.username>${it.jdbc.username}</it.jdbc.username>
                <it.jdbc.password>${it.jdbc.password}</it.jdbc.password>
                <it.keystore.file>${it.keystore.file}</it.keystore.file>
                <it.keystore.alias>${it.keystore.alias}</it.keystore.alias>
                <it.keystore.storepass>${it.keystore.pass}</it.keystore.storepass>
                <it.wiremock.port>${it.wiremock.port}</it.wiremock.port>
                <it.report.directory>${it.report.directory}</it.report.directory>
                <it.build.directory>${it.build.directory}</it.build.directory>
                <it.selenium.version>${selenium-java.version}</it.selenium.version>
              </systemPropertyVariables>
            </configuration>
            <executions>
              <execution>
                <id>integration-test</id>
                <goals>
                  <goal>integration-test</goal>
                </goals>
              </execution>
              <execution>
                <id>verify</id>
                <goals>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>de.juplo</groupId>
            <artifactId>hibernate4-maven-plugin</artifactId>
            <version>1.0.5</version>
            <dependencies>
              <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <version>${h2.version}</version>
              </dependency>
            </dependencies>
            <configuration>
              <driverClassName>${it.jdbc.driver}</driverClassName>
              <hibernateDialect>${it.hibernate.dialect}</hibernateDialect>
              <url><![CDATA[${it.jdbc.url}]]></url>
              <username>${it.jdbc.username}</username>
              <password>${it.jdbc.password}</password>

              <!-- <scanDependencies>compile,test</scanDependencies> -->
            </configuration>
            <executions>
              <execution>
                <id>create-schema</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>export</goal>
                </goals>
                <configuration>
                  <type>CREATE</type>
                </configuration>
              </execution>
              <execution>
                <id>drop-db-after-test</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>export</goal>
                </goals>
                <configuration>
                  <type>DROP</type>
                  <force>true</force>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>keytool-maven-plugin</artifactId>
            <version>1.5</version>
            <executions>
              <execution>
                <phase>pre-integration-test</phase>
                <id>keyclean</id>
                <goals>
                  <goal>clean</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                </configuration>
              </execution>
              <execution>
                <phase>pre-integration-test</phase>
                <id>genkey</id>
                <goals>
                  <goal>generateKeyPair</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                  <dname>cn=${it.host}, ou=None, L=Test, ST=Test, o=Test, c=TE</dname>
                  <storepass>${it.keystore.pass}</storepass>
                  <alias>${it.keystore.alias}</alias>
                  <keyalg>RSA</keyalg>
                  <keysize>2048</keysize>
                </configuration>
              </execution>
              <execution>
                <phase>pre-integration-test</phase>
                <id>exportkey</id>
                <goals>
                  <goal>exportCertificate</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                  <alias>${it.keystore.alias}</alias>
                  <file>${project.build.directory}/pyrit.crt</file>
                  <storepass>${it.keystore.pass}</storepass>
                </configuration>
              </execution>
              <execution>
                <phase>pre-integration-test</phase>
                <id>importkey</id>
                <goals>
                  <goal>importCertificate</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                  <alias>root</alias>
                  <file>${project.build.directory}/pyrit.crt</file>
                  <storepass>${it.keystore.pass}</storepass>
                  <noprompt>true</noprompt>
                  <trustcacerts>true</trustcacerts>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <version>1.4.12</version>
            <configuration>
              <container>
                <containerId>wildfly8x</containerId>
                <log>${project.basedir}/target/cargo.log</log>
                <output>${project.basedir}/target/jboss.log</output>
                <zipUrlInstaller>
                  <url>http://download.jboss.org/wildfly/8.1.0.Final/wildfly-8.1.0.Final.zip</url>
                  <downloadDir>${project.basedir}/.cargo/downloads</downloadDir>
                  <extractDir>${project.basedir}/.cargo/extracts</extractDir>
                </zipUrlInstaller>
                <dependencies>
                  <dependency>
                    <groupId>com.h2database</groupId>
                    <artifactId>h2</artifactId>
                  </dependency>
                </dependencies>
              </container>
              <configuration>
                <properties>
                  <cargo.servlet.port>${it.port.http}</cargo.servlet.port>
                  <cargo.jboss.configuration>standalone</cargo.jboss.configuration>
                  <cargo.jvmargs>-Xms64m -Xmx1152m -XX:MaxPermSize=512m</cargo.jvmargs>
                  <cargo.datasource.datasource.pyrit>
                    cargo.datasource.driver=${it.jdbc.driver}|
                    cargo.datasource.url=${it.jdbc.url}|
                    cargo.datasource.jndi=${it.jdbc.jndi}|
                    cargo.datasource.username=${it.jdbc.username}|
                    cargo.datasource.password=${it.jdbc.password}|
                    cargo.datasource.transactionsupport=LOCAL_TRANSACTION
                  </cargo.datasource.datasource.pyrit>
                </properties>
              </configuration>

            </configuration>
            <executions> 
              <execution>
                <id>start-cargo</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop-cargo</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.wildfly.plugins</groupId>
            <artifactId>wildfly-maven-plugin</artifactId>
            <version>1.0.2.Final</version>
            <executions>
              <execution>
                <id>configure-wildfly</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>execute-commands</goal>
                </goals>
                <configuration>
                  <execute-commands>
                    <batch>true</batch>
                    <commands>
                      <command>/system-property=muikku-data:add(value="${it.build.directory}/../src/test/resources/muikku-data/muikku-data-ui.xml")</command>
                      <command>/system-property=jsf.project.stage:add(value="Production")</command>
                      <command>/system-property=tests.running:add(value="true")</command>
                      <command>/core-service=management/security-realm=ssl-realm:add()</command>
                      <command>/core-service=management/security-realm=ssl-realm/server-identity=ssl:add(keystore-path="${it.keystore.file}",keystore-password="${it.keystore.pass}",alias="${it.keystore.alias}")</command>
                      <command>/subsystem=undertow/server=default-server/host=muikku:add()</command>
                      <command>/subsystem=undertow/server=default-server/https-listener=https:add(socket-binding="https",security-realm="ssl-realm")</command>
                      <command>/subsystem=undertow/server=default-server/host=muikku:write-attribute(name=alias,value=["${it.host}"])</command>
                      <command>/subsystem=undertow/server=default-server/host=muikku:write-attribute(name=default-web-module,value=ROOT.war)</command>
                      <command>/subsystem=logging/logger=fi.muikku.facelets.WidgetComponentHandler:add(level=FATAL)</command>
                    </commands>
                  </execute-commands>
                </configuration>
              </execution>
              
              <execution>
                <id>deploy-muikku</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>deploy</goal>
                </goals>
                <configuration>
                  <filename>../../muikku/target/muikku-${project.version}.war</filename>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.sonatype.plugins</groupId>
            <artifactId>wait-maven-plugin</artifactId>
            <version>1.0</version>
            <executions>
              <execution>
                <id>wait-rest</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>wait</goal>
                </goals>
                <configuration>
                  <protocol>http</protocol>
                  <host>${it.host}</host>
                  <port>${it.port.http}</port>
                  <file>/rest/system/ping</file>
                  <maxcount>10</maxcount>
                  <timeout>10000</timeout>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    
    <profile>
      <id>sauce-it</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <h2.version>1.4.177</h2.version>
        <it.port.http>8080</it.port.http>
        <it.port.https>8443</it.port.https>
        <it.host>dev.muikku.fi</it.host>
        <it.build.directory>${project.build.directory}</it.build.directory>
        <it.jdbc.driver>org.h2.Driver</it.jdbc.driver>
        <it.jdbc.url>jdbc:h2:file:${project.build.directory}/h2;AUTO_SERVER=TRUE</it.jdbc.url>
        <it.jdbc.jndi>java:/jdbc/muikku</it.jdbc.jndi>
        <it.jdbc.username>sa</it.jdbc.username>
        <it.jdbc.password>sa</it.jdbc.password>
        <it.hibernate.dialect>org.hibernate.dialect.H2Dialect</it.hibernate.dialect>
        <it.keystore.alias>pyrit</it.keystore.alias>
        <it.keystore.pass>storepass</it.keystore.pass>
        <it.keystore.file>${it.build.directory}/pyrit.keystore</it.keystore.file>
        <it.wiremock.port>8089</it.wiremock.port>
        <it.report.directory>${project.build.directory}/failsafe-reports/</it.report.directory>
        <it.sauce.username>${env.SAUCE_USERNAME}</it.sauce.username>
        <it.sauce.accessKey>${env.SAUCE_ACCESS_KEY}</it.sauce.accessKey>
        <it.sauce.tunnelId>${env.TRAVIS_JOB_NUMBER}</it.sauce.tunnelId>
        <it.sauce.browser />
        <it.sauce.browser.version />
        <it.sauce.browser.resolution />
        <it.sauce.platform />
        <it.package>**</it.package>
      </properties>

      <dependencies>
        <dependency>
          <groupId>com.h2database</groupId>
          <artifactId>h2</artifactId>
          <version>${h2.version}</version>
          <scope>test</scope>
        </dependency>
      </dependencies>
      <build>

        <plugins>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>2.14.1</version>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>2.16</version>
            <configuration>

              <dependenciesToScan>
                <dependency>fi.muikku:core-plugins</dependency>
              </dependenciesToScan>

              <includes>
                <include>fi/muikku/ui/sauce/${it.package}/*IT.java</include>
              </includes>
              <systemPropertyVariables>
                <it.project.version>${project.version}</it.project.version>
                <it.host>${it.host}</it.host>
                <it.port.http>${it.port.http}</it.port.http>
                <it.port.https>${it.port.https}</it.port.https>
                <it.jdbc.driver>${it.jdbc.driver}</it.jdbc.driver>
                <it.jdbc.url>${it.jdbc.url}</it.jdbc.url>
                <it.jdbc.jndi>${it.jdbc.jndi}</it.jdbc.jndi>
                <it.jdbc.username>${it.jdbc.username}</it.jdbc.username>
                <it.jdbc.password>${it.jdbc.password}</it.jdbc.password>
                <it.keystore.file>${it.keystore.file}</it.keystore.file>
                <it.keystore.alias>${it.keystore.alias}</it.keystore.alias>
                <it.keystore.storepass>${it.keystore.pass}</it.keystore.storepass>
                <it.wiremock.port>${it.wiremock.port}</it.wiremock.port>
                <it.report.directory>${it.report.directory}</it.report.directory>
                <it.build.directory>${it.build.directory}</it.build.directory>
                <it.sauce.username>${it.sauce.username}</it.sauce.username>
                <it.sauce.accessKey>${it.sauce.accessKey}</it.sauce.accessKey>
                <it.sauce.tunnelId>${it.sauce.tunnelId}</it.sauce.tunnelId>
                <it.selenium.version>${selenium-java.version}</it.selenium.version>
                <it.sauce.browser>${it.sauce.browser}</it.sauce.browser>
                <it.sauce.browser.version>${it.sauce.browser.version}</it.sauce.browser.version>
                <it.sauce.browser.resolution>${it.sauce.browser.resolution}</it.sauce.browser.resolution>
                <it.sauce.platform>${it.sauce.platform}</it.sauce.platform>
                <it.selenium.version>${selenium-java.version}</it.selenium.version>
              </systemPropertyVariables>
            </configuration>
            <executions>
              <execution>
                <id>integration-test</id>
                <goals>
                  <goal>integration-test</goal>
                </goals>
              </execution>
              <execution>
                <id>verify</id>
                <goals>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>de.juplo</groupId>
            <artifactId>hibernate4-maven-plugin</artifactId>
            <version>1.0.5</version>
            <dependencies>
              <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <version>${h2.version}</version>
              </dependency>
            </dependencies>
            <configuration>
              <driverClassName>${it.jdbc.driver}</driverClassName>
              <hibernateDialect>${it.hibernate.dialect}</hibernateDialect>
              <url><![CDATA[${it.jdbc.url}]]></url>
              <username>${it.jdbc.username}</username>
              <password>${it.jdbc.password}</password>

              <!-- <scanDependencies>compile,test</scanDependencies> -->
            </configuration>
            <executions>
              <execution>
                <id>create-schema</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>export</goal>
                </goals>
                <configuration>
                  <type>CREATE</type>
                </configuration>
              </execution>
              <execution>
                <id>drop-db-after-test</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>export</goal>
                </goals>
                <configuration>
                  <type>DROP</type>
                  <force>true</force>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>keytool-maven-plugin</artifactId>
            <version>1.5</version>
            <executions>
              <execution>
                <phase>pre-integration-test</phase>
                <id>keyclean</id>
                <goals>
                  <goal>clean</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                </configuration>
              </execution>
              <execution>
                <phase>pre-integration-test</phase>
                <id>genkey</id>
                <goals>
                  <goal>generateKeyPair</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                  <dname>cn=${it.host}, ou=None, L=Test, ST=Test, o=Test, c=TE</dname>
                  <storepass>${it.keystore.pass}</storepass>
                  <alias>${it.keystore.alias}</alias>
                  <keyalg>RSA</keyalg>
                  <keysize>2048</keysize>
                </configuration>
              </execution>
              <execution>
                <phase>pre-integration-test</phase>
                <id>exportkey</id>
                <goals>
                  <goal>exportCertificate</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                  <alias>${it.keystore.alias}</alias>
                  <file>${project.build.directory}/pyrit.crt</file>
                  <storepass>${it.keystore.pass}</storepass>
                </configuration>
              </execution>
              <execution>
                <phase>pre-integration-test</phase>
                <id>importkey</id>
                <goals>
                  <goal>importCertificate</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                  <alias>root</alias>
                  <file>${project.build.directory}/pyrit.crt</file>
                  <storepass>${it.keystore.pass}</storepass>
                  <noprompt>true</noprompt>
                  <trustcacerts>true</trustcacerts>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <version>1.4.12</version>
            <configuration>
              <container>
                <containerId>wildfly8x</containerId>
                <log>${project.basedir}/target/cargo.log</log>
                <output>${project.basedir}/target/jboss.log</output>
                <zipUrlInstaller>
                  <url>http://download.jboss.org/wildfly/8.1.0.Final/wildfly-8.1.0.Final.zip</url>
                  <downloadDir>${project.basedir}/.cargo/downloads</downloadDir>
                  <extractDir>${project.basedir}/.cargo/extracts</extractDir>
                </zipUrlInstaller>
                <dependencies>
                  <dependency>
                    <groupId>com.h2database</groupId>
                    <artifactId>h2</artifactId>
                  </dependency>
                </dependencies>
              </container>
              <configuration>
                <properties>
                  <cargo.servlet.port>${it.port.http}</cargo.servlet.port>
                  <cargo.jboss.configuration>standalone</cargo.jboss.configuration>
                  <cargo.jvmargs>-Xms64m -Xmx1152m -XX:MaxPermSize=512m</cargo.jvmargs>
                  <cargo.datasource.datasource.pyrit>
                    cargo.datasource.driver=${it.jdbc.driver}|
                    cargo.datasource.url=${it.jdbc.url}|
                    cargo.datasource.jndi=${it.jdbc.jndi}|
                    cargo.datasource.username=${it.jdbc.username}|
                    cargo.datasource.password=${it.jdbc.password}|
                    cargo.datasource.transactionsupport=LOCAL_TRANSACTION
                  </cargo.datasource.datasource.pyrit>
                </properties>
              </configuration>

            </configuration>
            <executions>
              <execution>
                <id>start-cargo</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop-cargo</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.wildfly.plugins</groupId>
            <artifactId>wildfly-maven-plugin</artifactId>
            <version>1.0.2.Final</version>
            <executions>
              <execution>
                <id>configure-wildfly</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>execute-commands</goal>
                </goals>
                <configuration>
                  <execute-commands>
                    <batch>true</batch>
                    <commands>
                      <command>/system-property=muikku-data:add(value="${it.build.directory}/../src/test/resources/muikku-data/muikku-data-ui.xml")</command>
                      <command>/system-property=jsf.project.stage:add(value="Production")</command>
                      <command>/system-property=tests.running:add(value="true")</command>
                      <command>/core-service=management/security-realm=ssl-realm:add()</command>
                      <command>/core-service=management/security-realm=ssl-realm/server-identity=ssl:add(keystore-path="${it.keystore.file}",keystore-password="${it.keystore.pass}",alias="${it.keystore.alias}")</command>
                      <command>/subsystem=undertow/server=default-server/host=muikku:add()</command>
                      <command>/subsystem=undertow/server=default-server/https-listener=https:add(socket-binding="https",security-realm="ssl-realm")</command>
                      <command>/subsystem=undertow/server=default-server/host=muikku:write-attribute(name=alias,value=["${it.host}"])</command>
                      <command>/subsystem=undertow/server=default-server/host=muikku:write-attribute(name=default-web-module,value=ROOT.war)</command>
                      <command>/subsystem=logging/logger=fi.muikku.facelets.WidgetComponentHandler:add(level=FATAL)</command>
                    </commands>
                  </execute-commands>
                </configuration>
              </execution>
              
              <execution>
                <id>deploy-muikku</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>deploy</goal>
                </goals>
                <configuration>
                  <filename>../../muikku/target/muikku-${project.version}.war</filename>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>com.saucelabs.maven.plugin</groupId>
            <artifactId>sauce-connect-plugin</artifactId>
            <version>2.1.19</version>
            <configuration>
              <sauceUsername>${it.sauce.username}</sauceUsername>
              <sauceAccessKey>${it.sauce.accessKey}</sauceAccessKey>
              <quietMode>true</quietMode>
              <options>-i ${it.sauce.tunnelId} --vm-version dev-varnish</options>
            </configuration>
            <executions>
              <execution>
                <id>start-sauceconnct</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start-sauceconnect</goal>
                </goals>
              </execution>
              <execution>
                <id>stop-sauceconnect</id>
                  <phase>post-integration-test</phase>
                  <goals>
                    <goal>stop-sauceconnect</goal>
                  </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.sonatype.plugins</groupId>
            <artifactId>wait-maven-plugin</artifactId>
            <version>1.0</version>
            <executions>
              <execution>
                <id>wait-rest</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>wait</goal>
                </goals>
                <configuration>
                  <protocol>http</protocol>
                  <host>${it.host}</host>
                  <port>${it.port.http}</port>
                  <file>/rest/system/ping</file>
                  <maxcount>10</maxcount>
                  <timeout>10000</timeout>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    
    <profile>
      <id>travis</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <h2.version>1.4.177</h2.version>
        <it.port.http>8080</it.port.http>
        <it.port.https>8443</it.port.https>
        <it.host>dev.muikku.fi</it.host>
        <it.build.directory>${project.build.directory}</it.build.directory>
        <it.jdbc.driver>org.h2.Driver</it.jdbc.driver>
        <it.jdbc.url>jdbc:h2:file:${project.build.directory}/h2;AUTO_SERVER=TRUE</it.jdbc.url>
        <it.jdbc.jndi>java:/jdbc/muikku</it.jdbc.jndi>
        <it.jdbc.username>sa</it.jdbc.username>
        <it.jdbc.password>sa</it.jdbc.password>
        <it.hibernate.dialect>org.hibernate.dialect.H2Dialect</it.hibernate.dialect>
        <it.keystore.alias>pyrit</it.keystore.alias>
        <it.keystore.pass>storepass</it.keystore.pass>
        <it.keystore.file>${it.build.directory}/pyrit.keystore</it.keystore.file>
        <it.wiremock.port>8089</it.wiremock.port>
        <it.report.directory>${project.build.directory}/failsafe-reports/</it.report.directory>
        <it.sauce.username>${env.SAUCE_USERNAME}</it.sauce.username>
        <it.sauce.accessKey>${env.SAUCE_ACCESS_KEY}</it.sauce.accessKey>
        <it.sauce.tunnelId>${env.TRAVIS_JOB_NUMBER}</it.sauce.tunnelId>
        <it.sauce.browser />
        <it.sauce.browser.version />
        <it.sauce.browser.resolution />
        <it.sauce.platform />
        <it.package>**</it.package>
      </properties>

      <dependencies>
        <dependency>
          <groupId>com.h2database</groupId>
          <artifactId>h2</artifactId>
          <version>${h2.version}</version>
          <scope>test</scope>
        </dependency>
      </dependencies>
      <build>

        <plugins>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>2.14.1</version>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>2.16</version>
            <configuration>

              <dependenciesToScan>
                <dependency>fi.muikku:core-plugins</dependency>
              </dependenciesToScan>

              <includes>
                <include>fi/muikku/ui/sauce/${it.package}/*IT.java</include>
              </includes>
              <systemPropertyVariables>
                <it.project.version>${project.version}</it.project.version>
                <it.host>${it.host}</it.host>
                <it.port.http>${it.port.http}</it.port.http>
                <it.port.https>${it.port.https}</it.port.https>
                <it.jdbc.driver>${it.jdbc.driver}</it.jdbc.driver>
                <it.jdbc.url>${it.jdbc.url}</it.jdbc.url>
                <it.jdbc.jndi>${it.jdbc.jndi}</it.jdbc.jndi>
                <it.jdbc.username>${it.jdbc.username}</it.jdbc.username>
                <it.jdbc.password>${it.jdbc.password}</it.jdbc.password>
                <it.keystore.file>${it.keystore.file}</it.keystore.file>
                <it.keystore.alias>${it.keystore.alias}</it.keystore.alias>
                <it.keystore.storepass>${it.keystore.pass}</it.keystore.storepass>
                <it.wiremock.port>${it.wiremock.port}</it.wiremock.port>
                <it.report.directory>${it.report.directory}</it.report.directory>
                <it.build.directory>${it.build.directory}</it.build.directory>
                <it.sauce.username>${it.sauce.username}</it.sauce.username>
                <it.sauce.accessKey>${it.sauce.accessKey}</it.sauce.accessKey>
                <it.sauce.tunnelId>${it.sauce.tunnelId}</it.sauce.tunnelId>
                <it.sauce.browser>${it.sauce.browser}</it.sauce.browser>
                <it.sauce.browser.version>${it.sauce.browser.version}</it.sauce.browser.version>
                <it.sauce.browser.resolution>${it.sauce.browser.resolution}</it.sauce.browser.resolution>
                <it.sauce.platform>${it.sauce.platform}</it.sauce.platform>
                <it.selenium.version>${selenium-java.version}</it.selenium.version>
              </systemPropertyVariables>
            </configuration>
            <executions>
              <execution>
                <id>integration-test</id>
                <goals>
                  <goal>integration-test</goal>
                </goals>
              </execution>
              <execution>
                <id>verify</id>
                <goals>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>de.juplo</groupId>
            <artifactId>hibernate4-maven-plugin</artifactId>
            <version>1.0.5</version>
            <dependencies>
              <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <version>${h2.version}</version>
              </dependency>
            </dependencies>
            <configuration>
              <driverClassName>${it.jdbc.driver}</driverClassName>
              <hibernateDialect>${it.hibernate.dialect}</hibernateDialect>
              <url><![CDATA[${it.jdbc.url}]]></url>
              <username>${it.jdbc.username}</username>
              <password>${it.jdbc.password}</password>

              <!-- <scanDependencies>compile,test</scanDependencies> -->
            </configuration>
            <executions>
              <execution>
                <id>create-schema</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>export</goal>
                </goals>
                <configuration>
                  <type>CREATE</type>
                </configuration>
              </execution>
              <execution>
                <id>drop-db-after-test</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>export</goal>
                </goals>
                <configuration>
                  <type>DROP</type>
                  <force>true</force>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>keytool-maven-plugin</artifactId>
            <version>1.5</version>
            <executions>
              <execution>
                <phase>pre-integration-test</phase>
                <id>keyclean</id>
                <goals>
                  <goal>clean</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                </configuration>
              </execution>
              <execution>
                <phase>pre-integration-test</phase>
                <id>genkey</id>
                <goals>
                  <goal>generateKeyPair</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                  <dname>cn=${it.host}, ou=None, L=Test, ST=Test, o=Test, c=TE</dname>
                  <storepass>${it.keystore.pass}</storepass>
                  <alias>${it.keystore.alias}</alias>
                  <keyalg>RSA</keyalg>
                  <keysize>2048</keysize>
                </configuration>
              </execution>
              <execution>
                <phase>pre-integration-test</phase>
                <id>exportkey</id>
                <goals>
                  <goal>exportCertificate</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                  <alias>${it.keystore.alias}</alias>
                  <file>${project.build.directory}/pyrit.crt</file>
                  <storepass>${it.keystore.pass}</storepass>
                </configuration>
              </execution>
              <execution>
                <phase>pre-integration-test</phase>
                <id>importkey</id>
                <goals>
                  <goal>importCertificate</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                  <alias>root</alias>
                  <file>${project.build.directory}/pyrit.crt</file>
                  <storepass>${it.keystore.pass}</storepass>
                  <noprompt>true</noprompt>
                  <trustcacerts>true</trustcacerts>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <version>1.4.12</version>
            <configuration>
              <container>
                <containerId>wildfly8x</containerId>
                <log>${project.basedir}/target/cargo.log</log>
                <output>${project.basedir}/target/jboss.log</output>
                <zipUrlInstaller>
                  <url>http://download.jboss.org/wildfly/8.1.0.Final/wildfly-8.1.0.Final.zip</url>
                  <downloadDir>${project.basedir}/.cargo/downloads</downloadDir>
                  <extractDir>${project.basedir}/.cargo/extracts</extractDir>
                </zipUrlInstaller>
                <dependencies>
                  <dependency>
                    <groupId>com.h2database</groupId>
                    <artifactId>h2</artifactId>
                  </dependency>
                </dependencies>
              </container>
              <configuration>
                <properties>
                  <cargo.servlet.port>${it.port.http}</cargo.servlet.port>
                  <cargo.jboss.configuration>standalone</cargo.jboss.configuration>
                  <cargo.jvmargs>-Xms64m -Xmx1152m -XX:MaxPermSize=512m</cargo.jvmargs>
                  <cargo.datasource.datasource.pyrit>
                    cargo.datasource.driver=${it.jdbc.driver}|
                    cargo.datasource.url=${it.jdbc.url}|
                    cargo.datasource.jndi=${it.jdbc.jndi}|
                    cargo.datasource.username=${it.jdbc.username}|
                    cargo.datasource.password=${it.jdbc.password}|
                    cargo.datasource.transactionsupport=LOCAL_TRANSACTION
                  </cargo.datasource.datasource.pyrit>
                </properties>
              </configuration>

            </configuration>
            <executions>
              <execution>
                <id>start-cargo</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop-cargo</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.wildfly.plugins</groupId>
            <artifactId>wildfly-maven-plugin</artifactId>
            <version>1.0.2.Final</version>
            <executions>
              <execution>
                <id>configure-wildfly</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>execute-commands</goal>
                </goals>
                <configuration>
                  <execute-commands>
                    <batch>true</batch>
                    <commands>
                      <command>/system-property=muikku-data:add(value="${it.build.directory}/../src/test/resources/muikku-data/muikku-data-ui.xml")</command>
                      <command>/system-property=jsf.project.stage:add(value="Production")</command>
                      <command>/system-property=tests.running:add(value="true")</command>
                      <command>/core-service=management/security-realm=ssl-realm:add()</command>
                      <command>/core-service=management/security-realm=ssl-realm/server-identity=ssl:add(keystore-path="${it.keystore.file}",keystore-password="${it.keystore.pass}",alias="${it.keystore.alias}")</command>
                      <command>/subsystem=undertow/server=default-server/host=muikku:add()</command>
                      <command>/subsystem=undertow/server=default-server/https-listener=https:add(socket-binding="https",security-realm="ssl-realm")</command>
                      <command>/subsystem=undertow/server=default-server/host=muikku:write-attribute(name=alias,value=["${it.host}"])</command>
                      <command>/subsystem=undertow/server=default-server/host=muikku:write-attribute(name=default-web-module,value=ROOT.war)</command>
                      <command>/subsystem=logging/logger=fi.muikku.facelets.WidgetComponentHandler:add(level=FATAL)</command>
                    </commands>
                  </execute-commands>
                </configuration>
              </execution>
              
              <execution>
                <id>deploy-muikku</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>deploy</goal>
                </goals>
                <configuration>
                  <filename>../../muikku/target/muikku-${project.version}.war</filename>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.sonatype.plugins</groupId>
            <artifactId>wait-maven-plugin</artifactId>
            <version>1.0</version>
            <executions>
              <execution>
                <id>wait-rest</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>wait</goal>
                </goals>
                <configuration>
                  <protocol>http</protocol>
                  <host>${it.host}</host>
                  <port>${it.port.http}</port>
                  <file>/rest/system/ping</file>
                  <maxcount>10</maxcount>
                  <timeout>10000</timeout>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    
    <profile>
      <id>rest-it</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <h2.version>1.4.177</h2.version>
        <it.port.http>8080</it.port.http>
        <it.port.https>8443</it.port.https>
        <it.host>dev.muikku.fi</it.host>
        <it.build.directory>${project.build.directory}</it.build.directory>
        <it.jdbc.driver>org.h2.Driver</it.jdbc.driver>
        <it.jdbc.url>jdbc:h2:file:${project.build.directory}/h2;AUTO_SERVER=TRUE</it.jdbc.url>
        <it.jdbc.jndi>java:/jdbc/muikku</it.jdbc.jndi>
        <it.jdbc.username>sa</it.jdbc.username>
        <it.jdbc.password>sa</it.jdbc.password>
        <it.hibernate.dialect>org.hibernate.dialect.H2Dialect</it.hibernate.dialect>
        <it.keystore.alias>pyrit</it.keystore.alias>
        <it.keystore.pass>storepass</it.keystore.pass>
        <it.keystore.file>${it.build.directory}/pyrit.keystore</it.keystore.file>
        <it.wiremock.port>8089</it.wiremock.port>
        <it.report.directory>${project.build.directory}/failsafe-reports/</it.report.directory>
      </properties>

      <dependencies>
        <dependency>
          <groupId>com.h2database</groupId>
          <artifactId>h2</artifactId>
          <version>${h2.version}</version>
          <scope>test</scope>
        </dependency>
      </dependencies>
      <build>

        <plugins>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>2.14.1</version>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>2.16</version>
            <configuration>

              <dependenciesToScan>
                <dependency>fi.muikku:core-plugins</dependency>
              </dependenciesToScan>

              <includes>
                <include>fi/muikku/rest/**/*IT.java</include>
              </includes>
              <systemPropertyVariables>
                <it.project.version>${project.version}</it.project.version>
                <it.host>${it.host}</it.host>
                <it.port.http>${it.port.http}</it.port.http>
                <it.port.https>${it.port.https}</it.port.https>
                <it.jdbc.driver>${it.jdbc.driver}</it.jdbc.driver>
                <it.jdbc.url>${it.jdbc.url}</it.jdbc.url>
                <it.jdbc.jndi>${it.jdbc.jndi}</it.jdbc.jndi>
                <it.jdbc.username>${it.jdbc.username}</it.jdbc.username>
                <it.jdbc.password>${it.jdbc.password}</it.jdbc.password>
                <it.keystore.file>${it.keystore.file}</it.keystore.file>
                <it.keystore.alias>${it.keystore.alias}</it.keystore.alias>
                <it.keystore.storepass>${it.keystore.pass}</it.keystore.storepass>
                <it.wiremock.port>${it.wiremock.port}</it.wiremock.port>
                <it.report.directory>${it.report.directory}</it.report.directory>
                <it.build.directory>${it.build.directory}</it.build.directory>
              </systemPropertyVariables>
            </configuration>
            <executions>
              <execution>
                <id>integration-test</id>
                <goals>
                  <goal>integration-test</goal>
                </goals>
              </execution>
              <execution>
                <id>verify</id>
                <goals>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>de.juplo</groupId>
            <artifactId>hibernate4-maven-plugin</artifactId>
            <version>1.0.5</version>
            <dependencies>
              <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <version>${h2.version}</version>
              </dependency>
            </dependencies>
            <configuration>
              <driverClassName>${it.jdbc.driver}</driverClassName>
              <hibernateDialect>${it.hibernate.dialect}</hibernateDialect>
              <url><![CDATA[${it.jdbc.url}]]></url>
              <username>${it.jdbc.username}</username>
              <password>${it.jdbc.password}</password>

              <!-- <scanDependencies>compile,test</scanDependencies> -->
            </configuration>
            <executions>
              <execution>
                <id>create-schema</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>export</goal>
                </goals>
                <configuration>
                  <type>CREATE</type>
                </configuration>
              </execution>
              <execution>
                <id>drop-db-after-test</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>export</goal>
                </goals>
                <configuration>
                  <type>DROP</type>
                  <force>true</force>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>keytool-maven-plugin</artifactId>
            <version>1.5</version>
            <executions>
              <execution>
                <phase>pre-integration-test</phase>
                <id>keyclean</id>
                <goals>
                  <goal>clean</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                </configuration>
              </execution>
              <execution>
                <phase>pre-integration-test</phase>
                <id>genkey</id>
                <goals>
                  <goal>generateKeyPair</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                  <dname>cn=${it.host}, ou=None, L=Test, ST=Test, o=Test, c=TE</dname>
                  <storepass>${it.keystore.pass}</storepass>
                  <alias>${it.keystore.alias}</alias>
                  <keyalg>RSA</keyalg>
                  <keysize>2048</keysize>
                </configuration>
              </execution>
              <execution>
                <phase>pre-integration-test</phase>
                <id>exportkey</id>
                <goals>
                  <goal>exportCertificate</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                  <alias>${it.keystore.alias}</alias>
                  <file>${project.build.directory}/pyrit.crt</file>
                  <storepass>${it.keystore.pass}</storepass>
                </configuration>
              </execution>
              <execution>
                <phase>pre-integration-test</phase>
                <id>importkey</id>
                <goals>
                  <goal>importCertificate</goal>
                </goals>
                <configuration>
                  <keystore>${it.keystore.file}</keystore>
                  <alias>root</alias>
                  <file>${project.build.directory}/pyrit.crt</file>
                  <storepass>${it.keystore.pass}</storepass>
                  <noprompt>true</noprompt>
                  <trustcacerts>true</trustcacerts>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <version>1.4.12</version>
            <configuration>
              <container>
                <containerId>wildfly8x</containerId>
                <log>${project.basedir}/target/cargo.log</log>
                <output>${project.basedir}/target/jboss.log</output>
                <zipUrlInstaller>
                  <url>http://download.jboss.org/wildfly/8.1.0.Final/wildfly-8.1.0.Final.zip</url>
                  <downloadDir>${project.basedir}/.cargo/downloads</downloadDir>
                  <extractDir>${project.basedir}/.cargo/extracts</extractDir>
                </zipUrlInstaller>
                <dependencies>
                  <dependency>
                    <groupId>com.h2database</groupId>
                    <artifactId>h2</artifactId>
                  </dependency>
                </dependencies>
              </container>
              <configuration>
                <properties>
                  <cargo.servlet.port>${it.port.http}</cargo.servlet.port>
                  <cargo.jboss.configuration>standalone</cargo.jboss.configuration>
                  <cargo.jvmargs>-Xms64m -Xmx1152m -XX:MaxPermSize=512m</cargo.jvmargs>
                  <cargo.datasource.datasource.pyrit>
                    cargo.datasource.driver=${it.jdbc.driver}|
                    cargo.datasource.url=${it.jdbc.url}|
                    cargo.datasource.jndi=${it.jdbc.jndi}|
                    cargo.datasource.username=${it.jdbc.username}|
                    cargo.datasource.password=${it.jdbc.password}|
                    cargo.datasource.transactionsupport=LOCAL_TRANSACTION
                  </cargo.datasource.datasource.pyrit>
                </properties>
              </configuration>

            </configuration>
            <executions>
              <execution>
                <id>start-cargo</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop-cargo</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.wildfly.plugins</groupId>
            <artifactId>wildfly-maven-plugin</artifactId>
            <version>1.0.2.Final</version>
            <executions>
              <execution>
                <id>configure-wildfly</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>execute-commands</goal>
                </goals>
                <configuration>
                  <execute-commands>
                    <batch>true</batch>
                    <commands>
                      <command>/system-property=muikku-data:add(value="${it.build.directory}/../src/test/resources/muikku-data/muikku-data.xml")</command>
                      <command>/system-property=jsf.project.stage:add(value="Production")</command>
                      <command>/system-property=tests.running:add(value="true")</command>
                      <command>/core-service=management/security-realm=ssl-realm:add()</command>
                      <command>/core-service=management/security-realm=ssl-realm/server-identity=ssl:add(keystore-path="${it.keystore.file}",keystore-password="${it.keystore.pass}",alias="${it.keystore.alias}")</command>
                      <command>/subsystem=undertow/server=default-server/host=muikku:add()</command>
                      <command>/subsystem=undertow/server=default-server/https-listener=https:add(socket-binding="https",security-realm="ssl-realm")</command>
                      <command>/subsystem=undertow/server=default-server/host=muikku:write-attribute(name=alias,value=["${it.host}"])</command>
                      <command>/subsystem=undertow/server=default-server/host=muikku:write-attribute(name=default-web-module,value=ROOT.war)</command>
                      <command>/subsystem=logging/logger=fi.muikku.facelets.WidgetComponentHandler:add(level=FATAL)</command>
                    </commands>
                  </execute-commands>
                </configuration>
              </execution>
              
              <execution>
                <id>deploy-muikku</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>deploy</goal>
                </goals>
                <configuration>
                  <filename>../../muikku/target/muikku-${project.version}.war</filename>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.sonatype.plugins</groupId>
            <artifactId>wait-maven-plugin</artifactId>
            <version>1.0</version>
            <executions>
              <execution>
                <id>wait-rest</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>wait</goal>
                </goals>
                <configuration>
                  <protocol>http</protocol>
                  <host>${it.host}</host>
                  <port>${it.port.http}</port>
                  <file>/rest/system/ping</file>
                  <maxcount>10</maxcount>
                  <timeout>10000</timeout>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    
  </profiles>
</project>
